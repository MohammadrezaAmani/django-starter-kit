openapi: 3.0.3
info:
  title: Authentication API
  version: 1.0.0
  description: A robust JWT-based authentication API with user registration, login,
    token management, and password reset functionality.
paths:
  /accounts/api/auth/forgot-password/:
    post:
      operationId: accounts_api_auth_forgot_password_create
      description: Sends a password reset link to the user's email if the email exists.
      tags:
      - Password Reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
            examples:
              ForgotPasswordRequest:
                value:
                  email: john@example.com
                summary: Forgot password request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Reset link sent if email exists
        '400':
          description: Invalid input
  /accounts/api/auth/login/:
    post:
      operationId: accounts_api_auth_login_create
      description: Authenticates a user and returns JWT access and refresh tokens
        along with user details.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            examples:
              LoginRequest:
                value:
                  username: johndoe
                  password: secure123
                summary: Login request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                LoginResponse:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 1
                      username: johndoe
                      email: john@example.com
                      first_name: John
                      last_name: Doe
                      last_login: '2025-05-16T12:00:00Z'
                      date_joined: '2025-05-16T12:00:00Z'
                  summary: Login response
          description: ''
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Account disabled
  /accounts/api/auth/logout/:
    post:
      operationId: accounts_api_auth_logout_create
      description: Logs out a user by blacklisting the provided refresh token.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refresh'
            examples:
              LogoutRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Logout request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Refresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Refresh'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '205':
          description: Successfully logged out
        '400':
          description: Invalid input
        '401':
          description: Invalid refresh token
  /accounts/api/auth/me/:
    get:
      operationId: accounts_api_auth_me_retrieve
      description: Retrieves the authenticated user's profile information.
      tags:
      - User Management
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                ProfileResponse:
                  value:
                    id: 1
                    username: johndoe
                    email: john@example.com
                    first_name: John
                    last_name: Doe
                    last_login: '2025-05-16T12:00:00Z'
                    date_joined: '2025-05-16T12:00:00Z'
                  summary: Profile response
          description: ''
        '401':
          description: Unauthorized
  /accounts/api/auth/refresh/:
    post:
      operationId: accounts_api_auth_refresh_create
      description: Refreshes a JWT access token using a valid refresh token.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refresh'
            examples:
              RefreshRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Refresh request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Refresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Refresh'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: New access token
        '400':
          description: Invalid input
        '401':
          description: Invalid or blacklisted token
  /accounts/api/auth/register/:
    post:
      operationId: accounts_api_auth_register_create
      description: Registers a new user and returns JWT tokens and user details.
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
            examples:
              RegisterRequest:
                value:
                  username: janedoe
                  email: jane@example.com
                  password: secure123
                  first_name: Jane
                  last_name: Doe
                summary: Register request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                RegisterResponse:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 2
                      username: janedoe
                      email: jane@example.com
                      first_name: Jane
                      last_name: Doe
                      last_login: null
                      date_joined: '2025-05-16T12:00:00Z'
                  summary: Register response
          description: ''
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /accounts/api/auth/reset-password/:
    post:
      operationId: accounts_api_auth_reset_password_create
      description: Resets a user's password using a valid token and UID.
      tags:
      - Password Reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
            examples:
              ResetPasswordRequest:
                value:
                  token: abc123
                  uid: 550e8400-e29b-41d4-a716-446655440000
                  password: newsecure123
                summary: Reset password request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid input or token
  /accounts/api/auth/verify/:
    post:
      operationId: accounts_api_auth_verify_create
      description: Verifies if a JWT access token is valid and returns token details.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
            examples:
              VerifyRequest:
                value:
                  access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Verify request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Verify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Verify'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Token is valid
        '400':
          description: Invalid input
        '401':
          description: Invalid or expired token
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    ForgotPassword:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address to send password reset link
      required:
      - email
    Login:
      type: object
      properties:
        username:
          type: string
          description: Username to authenticate with
          maxLength: 150
        password:
          type: string
          writeOnly: true
          description: Password for authentication
          maxLength: 128
      required:
      - password
      - username
    Refresh:
      type: object
      properties:
        refresh:
          type: string
          description: JWT refresh token to get a new access token
      required:
      - refresh
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          description: Password must be at least 8 characters
          minLength: 8
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - password
      - username
    ResetPassword:
      type: object
      properties:
        token:
          type: string
          description: Password reset token
        uid:
          type: string
          description: User identifier for password reset
        password:
          type: string
          writeOnly: true
          description: New password (minimum 8 characters)
          minLength: 8
      required:
      - password
      - token
      - uid
    TokenResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT access token
        refresh:
          type: string
          description: JWT refresh token
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          description: User details
      required:
      - access
      - refresh
      - user
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        is_verified:
          type: boolean
          readOnly: true
          title: Email verified
          description: Indicates if the user's email has been verified.
        last_activity:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Timestamp of the user's last activity.
      required:
      - date_joined
      - email
      - first_name
      - id
      - is_verified
      - last_activity
      - last_login
      - last_name
      - username
    Verify:
      type: object
      properties:
        access:
          type: string
          description: JWT access token to verify
      required:
      - access
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Authentication
  description: Endpoints for user login, logout, and token management
- name: User Management
  description: Endpoints for user registration and profile retrieval
- name: Password Reset
  description: Endpoints for password reset requests and confirmation
