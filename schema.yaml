openapi: 3.0.3
info:
  title: Django Starter Kit
  version: 1.0.2
  description: 🚀 A production-ready API with modular components
paths:
  /accounts/forgot-password/:
    post:
      operationId: accounts_forgot_password_create
      description: Sends a password reset link to the user's email if the email exists.
      tags:
      - Password Reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              ForgotPasswordRequest:
                value:
                  email: john@example.com
                summary: Forgot password request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          description: Reset link sent if email exists
        '400':
          description: Invalid input
  /accounts/login/:
    post:
      operationId: accounts_login_create
      description: Authenticates a user and returns JWT access and refresh tokens
        along with user details.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              LoginRequest:
                value:
                  username: johndoe
                  password: secure123
                summary: Login request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                LoginResponse:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 1
                      username: johndoe
                      email: john@example.com
                      first_name: John
                      last_name: Doe
                      last_login: '2025-05-16T12:00:00Z'
                      date_joined: '2025-05-16T12:00:00Z'
                  summary: Login response
          description: ''
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Account disabled
  /accounts/logout/:
    post:
      operationId: accounts_logout_create
      description: Logs out a user by blacklisting the provided refresh token.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
            examples:
              LogoutRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Logout request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '205':
          description: Successfully logged out
        '400':
          description: Invalid input
        '401':
          description: Invalid refresh token
  /accounts/me/:
    get:
      operationId: accounts_me_retrieve
      description: Retrieves the authenticated user's profile information.
      tags:
      - User Management
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                ProfileResponse:
                  value:
                    id: 1
                    username: johndoe
                    email: john@example.com
                    first_name: John
                    last_name: Doe
                    last_login: '2025-05-16T12:00:00Z'
                    date_joined: '2025-05-16T12:00:00Z'
                  summary: Profile response
          description: ''
        '401':
          description: Unauthorized
  /accounts/profile/achievements/:
    get:
      operationId: accounts_profile_achievements_list
      description: List user achievements with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAchievementList'
          description: ''
    post:
      operationId: accounts_profile_achievements_create
      description: Create a new achievement entry.
      tags:
      - Achievements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
          description: ''
  /accounts/profile/achievements/{id}/:
    get:
      operationId: accounts_profile_achievements_retrieve
      description: ViewSet for managing user achievements and awards.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
          description: ''
    put:
      operationId: accounts_profile_achievements_update
      description: Update an achievement entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Achievements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AchievementRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
          description: ''
    patch:
      operationId: accounts_profile_achievements_partial_update
      description: ViewSet for managing user achievements and awards.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAchievementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAchievementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAchievementRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
          description: ''
    delete:
      operationId: accounts_profile_achievements_destroy
      description: Delete an achievement entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/achievements/by_category/:
    get:
      operationId: accounts_profile_achievements_by_category_list
      description: Get achievements by category.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAchievementList'
          description: ''
  /accounts/profile/achievements/by_issuer/:
    get:
      operationId: accounts_profile_achievements_by_issuer_list
      description: Get achievements by issuer.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAchievementList'
          description: ''
  /accounts/profile/achievements/categories/:
    get:
      operationId: accounts_profile_achievements_categories_retrieve
      description: Get all achievement categories for the user.
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                categories: list
          description: ''
  /accounts/profile/achievements/recent/:
    get:
      operationId: accounts_profile_achievements_recent_list
      description: Get recent achievements (last 2 years).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAchievementList'
          description: ''
  /accounts/profile/achievements/stats/:
    get:
      operationId: accounts_profile_achievements_stats_retrieve
      description: Get achievement statistics.
      tags:
      - Achievements
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/profile/certifications/:
    get:
      operationId: accounts_profile_certifications_list
      description: List user certifications with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCertificationList'
          description: ''
    post:
      operationId: accounts_profile_certifications_create
      description: Create a new certification entry.
      tags:
      - Certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
  /accounts/profile/certifications/{id}/:
    get:
      operationId: accounts_profile_certifications_retrieve
      description: ViewSet for managing user certifications.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    put:
      operationId: accounts_profile_certifications_update
      description: Update a certification entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    patch:
      operationId: accounts_profile_certifications_partial_update
      description: ViewSet for managing user certifications.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCertificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCertificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCertificationRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    delete:
      operationId: accounts_profile_certifications_destroy
      description: Delete a certification entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/certifications/active/:
    get:
      operationId: accounts_profile_certifications_active_list
      description: Get active certifications (non-expired).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCertificationList'
          description: ''
  /accounts/profile/certifications/by_organization/:
    get:
      operationId: accounts_profile_certifications_by_organization_list
      description: Get certifications by issuing organization.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCertificationList'
          description: ''
  /accounts/profile/certifications/expiring_soon/:
    get:
      operationId: accounts_profile_certifications_expiring_soon_list
      description: Get certifications expiring within the next 90 days.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCertificationList'
          description: ''
  /accounts/profile/certifications/organizations/:
    get:
      operationId: accounts_profile_certifications_organizations_retrieve
      description: Get all certification organizations for the user.
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                organizations: list
          description: ''
  /accounts/profile/certifications/verified/:
    get:
      operationId: accounts_profile_certifications_verified_list
      description: Get verified certifications.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Certifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCertificationList'
          description: ''
  /accounts/profile/education/:
    get:
      operationId: accounts_profile_education_list
      description: List user education with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEducationList'
          description: ''
    post:
      operationId: accounts_profile_education_create
      description: Create a new education entry.
      tags:
      - Education
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EducationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EducationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
          description: ''
  /accounts/profile/education/{id}/:
    get:
      operationId: accounts_profile_education_retrieve
      description: ViewSet for managing user education background.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
          description: ''
    put:
      operationId: accounts_profile_education_update
      description: Update an education entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Education
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EducationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EducationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
          description: ''
    patch:
      operationId: accounts_profile_education_partial_update
      description: ViewSet for managing user education background.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEducationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEducationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEducationRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
          description: ''
    delete:
      operationId: accounts_profile_education_destroy
      description: Delete an education entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/education/by_degree/:
    get:
      operationId: accounts_profile_education_by_degree_list
      description: Get education entries by degree type.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEducationList'
          description: ''
  /accounts/profile/education/by_field/:
    get:
      operationId: accounts_profile_education_by_field_list
      description: Get education entries by field of study.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEducationList'
          description: ''
  /accounts/profile/education/by_institution/:
    get:
      operationId: accounts_profile_education_by_institution_list
      description: Get education entries by institution.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEducationList'
          description: ''
  /accounts/profile/education/current/:
    get:
      operationId: accounts_profile_education_current_list
      description: Get current education (ongoing studies).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Education
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEducationList'
          description: ''
  /accounts/profile/experience/:
    get:
      operationId: accounts_profile_experience_list
      description: List user experiences with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Experience
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExperienceList'
          description: ''
    post:
      operationId: accounts_profile_experience_create
      description: Create a new experience entry.
      tags:
      - Experience
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
          description: ''
  /accounts/profile/experience/{id}/:
    get:
      operationId: accounts_profile_experience_retrieve
      description: ViewSet for managing user work experience.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
          description: ''
    put:
      operationId: accounts_profile_experience_update
      description: Update an experience entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Experience
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExperienceRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
          description: ''
    patch:
      operationId: accounts_profile_experience_partial_update
      description: ViewSet for managing user work experience.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExperienceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExperienceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExperienceRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
          description: ''
    delete:
      operationId: accounts_profile_experience_destroy
      description: Delete an experience entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Experience
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/experience/by_company/:
    get:
      operationId: accounts_profile_experience_by_company_list
      description: Get experiences grouped by company.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Experience
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExperienceList'
          description: ''
  /accounts/profile/experience/by_type/:
    get:
      operationId: accounts_profile_experience_by_type_list
      description: Get experiences by type (work, internship, volunteer, freelance).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Experience
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExperienceList'
          description: ''
  /accounts/profile/experience/current/:
    get:
      operationId: accounts_profile_experience_current_list
      description: Get current work positions.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Experience
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExperienceList'
          description: ''
  /accounts/profile/languages/:
    get:
      operationId: accounts_profile_languages_list
      description: List user languages with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
    post:
      operationId: accounts_profile_languages_create
      description: Create a new language entry.
      tags:
      - Languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
  /accounts/profile/languages/{id}/:
    get:
      operationId: accounts_profile_languages_retrieve
      description: ViewSet for managing user language proficiencies.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    put:
      operationId: accounts_profile_languages_update
      description: Update a language entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    patch:
      operationId: accounts_profile_languages_partial_update
      description: ViewSet for managing user language proficiencies.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLanguageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLanguageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLanguageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    delete:
      operationId: accounts_profile_languages_destroy
      description: Delete a language entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/languages/by_proficiency/:
    get:
      operationId: accounts_profile_languages_by_proficiency_list
      description: Get languages by proficiency level.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
  /accounts/profile/languages/fluent/:
    get:
      operationId: accounts_profile_languages_fluent_list
      description: Get fluent and native languages.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
  /accounts/profile/languages/native_languages/:
    get:
      operationId: accounts_profile_languages_native_languages_list
      description: Get native languages.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
  /accounts/profile/languages/proficiency_levels/:
    get:
      operationId: accounts_profile_languages_proficiency_levels_retrieve
      description: Get available proficiency levels.
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                proficiency_levels: list
          description: ''
  /accounts/profile/languages/stats/:
    get:
      operationId: accounts_profile_languages_stats_retrieve
      description: Get language statistics.
      tags:
      - Languages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/profile/networks/:
    get:
      operationId: accounts_profile_networks_list
      description: List networks with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkList'
          description: ''
    post:
      operationId: accounts_profile_networks_create
      description: ViewSet for managing professional networks and communities.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: ''
  /accounts/profile/networks/{id}/:
    get:
      operationId: accounts_profile_networks_retrieve
      description: ViewSet for managing professional networks and communities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: ''
    put:
      operationId: accounts_profile_networks_update
      description: ViewSet for managing professional networks and communities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: ''
    patch:
      operationId: accounts_profile_networks_partial_update
      description: ViewSet for managing professional networks and communities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNetworkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: ''
    delete:
      operationId: accounts_profile_networks_destroy
      description: ViewSet for managing professional networks and communities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/networks/{id}/approve_membership/:
    post:
      operationId: accounts_profile_networks_approve_membership_create
      description: Approve a membership request (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to approve
      tags:
      - Networks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkMembership'
          description: ''
  /accounts/profile/networks/{id}/invite_user/:
    post:
      operationId: accounts_profile_networks_invite_user_create
      description: Invite a user to join the network.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to invite
      tags:
      - Networks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkMembership'
          description: ''
  /accounts/profile/networks/{id}/join/:
    post:
      operationId: accounts_profile_networks_join_create
      description: Join a network.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - Networks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkMembership'
          description: ''
  /accounts/profile/networks/{id}/leave/:
    delete:
      operationId: accounts_profile_networks_leave_destroy
      description: Leave a network.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/networks/{id}/members/:
    get:
      operationId: accounts_profile_networks_members_list
      description: Get network members.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: industry
        schema:
          type: string
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
  /accounts/profile/networks/{id}/membership_requests/:
    get:
      operationId: accounts_profile_networks_membership_requests_list
      description: Get pending membership requests for a network (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: industry
        schema:
          type: string
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkMembershipList'
          description: ''
  /accounts/profile/networks/{id}/reject_membership/:
    delete:
      operationId: accounts_profile_networks_reject_membership_destroy
      description: Reject a membership request (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to reject
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/networks/{id}/remove_member/:
    delete:
      operationId: accounts_profile_networks_remove_member_destroy
      description: Remove a member from the network (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to remove
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/networks/{id}/statistics/:
    get:
      operationId: accounts_profile_networks_statistics_retrieve
      description: Get network statistics (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this network.
        required: true
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                statistics: dict
          description: ''
  /accounts/profile/networks/administered/:
    get:
      operationId: accounts_profile_networks_administered_list
      description: Get networks administered by the user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkList'
          description: ''
  /accounts/profile/networks/discover/:
    get:
      operationId: accounts_profile_networks_discover_list
      description: Discover networks based on user's profile and interests.
      parameters:
      - in: query
        name: industry
        schema:
          type: string
        description: Industry filter
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
        description: Location filter
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkList'
          description: ''
  /accounts/profile/networks/my_networks/:
    get:
      operationId: accounts_profile_networks_my_networks_list
      description: Get networks where user is a member.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkList'
          description: ''
  /accounts/profile/networks/popular/:
    get:
      operationId: accounts_profile_networks_popular_list
      description: Get popular networks by member count.
      parameters:
      - in: query
        name: industry
        schema:
          type: string
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Networks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNetworkList'
          description: ''
  /accounts/profile/projects/:
    get:
      operationId: accounts_profile_projects_list
      description: List user projects with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: accounts_profile_projects_create
      description: Create a new project entry.
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /accounts/profile/projects/{id}/:
    get:
      operationId: accounts_profile_projects_retrieve
      description: ViewSet for managing user projects and portfolio items.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: accounts_profile_projects_update
      description: Update a project entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: accounts_profile_projects_partial_update
      description: ViewSet for managing user projects and portfolio items.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: accounts_profile_projects_destroy
      description: Delete a project entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/projects/{id}/delete-image/{image_id}/:
    delete:
      operationId: accounts_profile_projects_delete_image_destroy
      description: Delete a project image.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: image_id
        schema:
          type: string
        required: true
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/projects/{id}/duplicate/:
    post:
      operationId: accounts_profile_projects_duplicate_create
      description: Duplicate a project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /accounts/profile/projects/{id}/tasks/:
    get:
      operationId: accounts_profile_projects_tasks_retrieve
      description: Get tasks associated with a project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                tasks: list
          description: ''
  /accounts/profile/projects/{id}/upload_images/:
    post:
      operationId: accounts_profile_projects_upload_images_create
      description: Upload additional images for a project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectImageRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectImageList'
          description: ''
  /accounts/profile/projects/by_category/:
    get:
      operationId: accounts_profile_projects_by_category_list
      description: Get projects by category.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
  /accounts/profile/projects/by_status/:
    get:
      operationId: accounts_profile_projects_by_status_list
      description: Get projects by status.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
  /accounts/profile/projects/by_technology/:
    get:
      operationId: accounts_profile_projects_by_technology_list
      description: Get projects that use specific technology.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
  /accounts/profile/projects/current/:
    get:
      operationId: accounts_profile_projects_current_list
      description: Get current/ongoing projects.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
  /accounts/profile/projects/featured/:
    get:
      operationId: accounts_profile_projects_featured_list
      description: Get featured projects (most recent and significant).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
  /accounts/profile/projects/statistics/:
    get:
      operationId: accounts_profile_projects_statistics_retrieve
      description: Get project statistics for the user.
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                statistics: dict
          description: ''
  /accounts/profile/projects/technologies/:
    get:
      operationId: accounts_profile_projects_technologies_retrieve
      description: Get all technologies used across projects.
      tags:
      - Projects
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                technologies: list
          description: ''
  /accounts/profile/publications/:
    get:
      operationId: accounts_profile_publications_list
      description: List user publications with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicationList'
          description: ''
    post:
      operationId: accounts_profile_publications_create
      description: Create a new publication entry.
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
  /accounts/profile/publications/{id}/:
    get:
      operationId: accounts_profile_publications_retrieve
      description: ViewSet for managing user publications.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
    put:
      operationId: accounts_profile_publications_update
      description: Update a publication entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
    patch:
      operationId: accounts_profile_publications_partial_update
      description: ViewSet for managing user publications.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
    delete:
      operationId: accounts_profile_publications_destroy
      description: Delete a publication entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/publications/by_category/:
    get:
      operationId: accounts_profile_publications_by_category_list
      description: Get publications by category.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicationList'
          description: ''
  /accounts/profile/publications/by_journal/:
    get:
      operationId: accounts_profile_publications_by_journal_list
      description: Get publications by journal.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicationList'
          description: ''
  /accounts/profile/publications/categories/:
    get:
      operationId: accounts_profile_publications_categories_retrieve
      description: Get all publication categories.
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                categories: list
          description: ''
  /accounts/profile/publications/recent/:
    get:
      operationId: accounts_profile_publications_recent_list
      description: Get recent publications (last 5 years).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicationList'
          description: ''
  /accounts/profile/publications/stats/:
    get:
      operationId: accounts_profile_publications_stats_retrieve
      description: Get publication statistics.
      tags:
      - Publications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/profile/recommendations/:
    get:
      operationId: accounts_profile_recommendations_list
      description: List recommendations with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRecommendationList'
          description: ''
    post:
      operationId: accounts_profile_recommendations_create
      description: Create a new recommendation.
      tags:
      - Recommendations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
  /accounts/profile/recommendations/{id}/:
    get:
      operationId: accounts_profile_recommendations_retrieve
      description: ViewSet for managing user recommendations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
    put:
      operationId: accounts_profile_recommendations_update
      description: ViewSet for managing user recommendations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
    patch:
      operationId: accounts_profile_recommendations_partial_update
      description: ViewSet for managing user recommendations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRecommendationRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
    delete:
      operationId: accounts_profile_recommendations_destroy
      description: ViewSet for managing user recommendations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/recommendations/{id}/approve/:
    post:
      operationId: accounts_profile_recommendations_approve_create
      description: Approve a pending recommendation.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Recommendations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
  /accounts/profile/recommendations/{id}/decline/:
    post:
      operationId: accounts_profile_recommendations_decline_create
      description: Decline a pending recommendation.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Recommendations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
  /accounts/profile/recommendations/by_type/:
    get:
      operationId: accounts_profile_recommendations_by_type_list
      description: Get recommendations by type.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRecommendationList'
          description: ''
  /accounts/profile/recommendations/given/:
    get:
      operationId: accounts_profile_recommendations_given_list
      description: Get recommendations given by the user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRecommendationList'
          description: ''
  /accounts/profile/recommendations/pending/:
    get:
      operationId: accounts_profile_recommendations_pending_list
      description: Get pending recommendations for the user to approve.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRecommendationList'
          description: ''
  /accounts/profile/recommendations/received/:
    get:
      operationId: accounts_profile_recommendations_received_list
      description: Get recommendations received by the user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRecommendationList'
          description: ''
  /accounts/profile/recommendations/request_recommendation/:
    post:
      operationId: accounts_profile_recommendations_request_recommendation_create
      description: Request a recommendation from another user.
      tags:
      - Recommendations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecommendationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
          description: ''
  /accounts/profile/recommendations/stats/:
    get:
      operationId: accounts_profile_recommendations_stats_retrieve
      description: Get recommendation statistics.
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/profile/recommendations/types/:
    get:
      operationId: accounts_profile_recommendations_types_retrieve
      description: Get available recommendation types.
      tags:
      - Recommendations
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                types: list
          description: ''
  /accounts/profile/resumes/:
    get:
      operationId: accounts_profile_resumes_list
      description: List user resumes with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResumeList'
          description: ''
    post:
      operationId: accounts_profile_resumes_create
      description: Create a new resume.
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/:
    get:
      operationId: accounts_profile_resumes_retrieve
      description: ViewSet for managing user resumes with PDF generation and templates.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
    put:
      operationId: accounts_profile_resumes_update
      description: Update a resume.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
    patch:
      operationId: accounts_profile_resumes_partial_update
      description: ViewSet for managing user resumes with PDF generation and templates.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResumeRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
    delete:
      operationId: accounts_profile_resumes_destroy
      description: Delete a resume.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/resumes/{id}/change_template/:
    post:
      operationId: accounts_profile_resumes_change_template_create
      description: Change resume template.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/download/:
    get:
      operationId: accounts_profile_resumes_download_retrieve
      description: Download resume as PDF.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /accounts/profile/resumes/{id}/duplicate/:
    post:
      operationId: accounts_profile_resumes_duplicate_create
      description: Duplicate a resume.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/generate_pdf/:
    post:
      operationId: accounts_profile_resumes_generate_pdf_create
      description: Generate and return resume PDF.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /accounts/profile/resumes/{id}/publish/:
    post:
      operationId: accounts_profile_resumes_publish_create
      description: Publish a resume.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/set_default/:
    post:
      operationId: accounts_profile_resumes_set_default_create
      description: Set resume as default.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/unpublish/:
    post:
      operationId: accounts_profile_resumes_unpublish_create
      description: Unpublish a resume.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/{id}/update_content/:
    post:
      operationId: accounts_profile_resumes_update_content_create
      description: Update resume content.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/auto_generate/:
    post:
      operationId: accounts_profile_resumes_auto_generate_create
      description: Auto-generate resume from profile data.
      tags:
      - Resume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/default/:
    get:
      operationId: accounts_profile_resumes_default_retrieve
      description: Get user's default resume.
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
          description: ''
  /accounts/profile/resumes/drafts/:
    get:
      operationId: accounts_profile_resumes_drafts_list
      description: Get draft resumes.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResumeList'
          description: ''
  /accounts/profile/resumes/published/:
    get:
      operationId: accounts_profile_resumes_published_list
      description: Get published resumes.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResumeList'
          description: ''
  /accounts/profile/resumes/stats/:
    get:
      operationId: accounts_profile_resumes_stats_retrieve
      description: Get resume statistics.
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/profile/resumes/templates/:
    get:
      operationId: accounts_profile_resumes_templates_retrieve
      description: Get available resume templates.
      tags:
      - Resume
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                templates: list
          description: ''
  /accounts/profile/skills/:
    get:
      operationId: accounts_profile_skills_list
      description: List user skills with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillList'
          description: ''
    post:
      operationId: accounts_profile_skills_create
      description: Create a new skill entry.
      tags:
      - Skills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
  /accounts/profile/skills/{id}/:
    get:
      operationId: accounts_profile_skills_retrieve
      description: ViewSet for managing user skills and endorsements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    put:
      operationId: accounts_profile_skills_update
      description: Update a skill entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Skills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    patch:
      operationId: accounts_profile_skills_partial_update
      description: ViewSet for managing user skills and endorsements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSkillRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSkillRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSkillRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    delete:
      operationId: accounts_profile_skills_destroy
      description: Delete a skill entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/skills/{id}/endorse/:
    post:
      operationId: accounts_profile_skills_endorse_create
      description: Endorse a skill.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Skills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillEndorsementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillEndorsementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillEndorsementRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillEndorsement'
          description: ''
  /accounts/profile/skills/{id}/endorsements/:
    get:
      operationId: accounts_profile_skills_endorsements_list
      description: Get endorsements for a specific skill.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillEndorsementList'
          description: ''
  /accounts/profile/skills/{id}/remove-endorsement/:
    delete:
      operationId: accounts_profile_skills_remove_endorsement_destroy
      description: Remove endorsement from a skill.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/skills/by_category/:
    get:
      operationId: accounts_profile_skills_by_category_list
      description: Get skills grouped by category.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillList'
          description: ''
  /accounts/profile/skills/categories/:
    get:
      operationId: accounts_profile_skills_categories_retrieve
      description: Get all skill categories for the user.
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                categories: list
          description: ''
  /accounts/profile/skills/top_skills/:
    get:
      operationId: accounts_profile_skills_top_skills_list
      description: Get user's top skills by endorsement count and level.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Skills
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillList'
          description: ''
  /accounts/profile/tasks/:
    get:
      operationId: accounts_profile_tasks_list
      description: List tasks with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
    post:
      operationId: accounts_profile_tasks_create
      description: ViewSet for managing tasks and task assignments.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/{id}/:
    get:
      operationId: accounts_profile_tasks_retrieve
      description: ViewSet for managing tasks and task assignments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: accounts_profile_tasks_update
      description: ViewSet for managing tasks and task assignments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: accounts_profile_tasks_partial_update
      description: ViewSet for managing tasks and task assignments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: accounts_profile_tasks_destroy
      description: ViewSet for managing tasks and task assignments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/tasks/{id}/add_comment/:
    post:
      operationId: accounts_profile_tasks_add_comment_create
      description: Add a comment to a task.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
          description: ''
  /accounts/profile/tasks/{id}/add_watcher/:
    post:
      operationId: accounts_profile_tasks_add_watcher_create
      description: Add a watcher to a task.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to add as watcher
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/{id}/assign/:
    post:
      operationId: accounts_profile_tasks_assign_create
      description: Assign task to a user.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to assign task to
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/{id}/comments/:
    get:
      operationId: accounts_profile_tasks_comments_list
      description: Get comments for a task.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskCommentList'
          description: ''
  /accounts/profile/tasks/{id}/complete/:
    post:
      operationId: accounts_profile_tasks_complete_create
      description: Mark task as completed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/{id}/remove_watcher/:
    delete:
      operationId: accounts_profile_tasks_remove_watcher_destroy
      description: Remove a watcher from a task.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: User ID to remove as watcher
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/{id}/reopen/:
    post:
      operationId: accounts_profile_tasks_reopen_create
      description: Reopen a completed task.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /accounts/profile/tasks/assigned_to_me/:
    get:
      operationId: accounts_profile_tasks_assigned_to_me_list
      description: Get tasks assigned to the current user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
  /accounts/profile/tasks/created_by_me/:
    get:
      operationId: accounts_profile_tasks_created_by_me_list
      description: Get tasks created by the current user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
  /accounts/profile/tasks/due_today/:
    get:
      operationId: accounts_profile_tasks_due_today_list
      description: Get tasks due today.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
  /accounts/profile/tasks/my_tasks/:
    get:
      operationId: accounts_profile_tasks_my_tasks_list
      description: Get all tasks related to the current user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
  /accounts/profile/tasks/overdue/:
    get:
      operationId: accounts_profile_tasks_overdue_list
      description: Get overdue tasks.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
  /accounts/profile/tasks/statistics/:
    get:
      operationId: accounts_profile_tasks_statistics_retrieve
      description: Get task statistics for the current user.
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                statistics: dict
          description: ''
  /accounts/profile/volunteer/:
    get:
      operationId: accounts_profile_volunteer_list
      description: List user volunteer experiences with filtering and search.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVolunteerList'
          description: ''
    post:
      operationId: accounts_profile_volunteer_create
      description: Create a new volunteer experience entry.
      tags:
      - Volunteer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
          description: ''
  /accounts/profile/volunteer/{id}/:
    get:
      operationId: accounts_profile_volunteer_retrieve
      description: ViewSet for managing user volunteer experiences.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
          description: ''
    put:
      operationId: accounts_profile_volunteer_update
      description: Update a volunteer experience entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Volunteer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VolunteerRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
          description: ''
    patch:
      operationId: accounts_profile_volunteer_partial_update
      description: ViewSet for managing user volunteer experiences.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVolunteerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVolunteerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVolunteerRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
          description: ''
    delete:
      operationId: accounts_profile_volunteer_destroy
      description: Delete a volunteer experience entry.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/profile/volunteer/by_cause/:
    get:
      operationId: accounts_profile_volunteer_by_cause_list
      description: Get volunteer experiences by cause.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVolunteerList'
          description: ''
  /accounts/profile/volunteer/by_organization/:
    get:
      operationId: accounts_profile_volunteer_by_organization_list
      description: Get volunteer experiences by organization.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVolunteerList'
          description: ''
  /accounts/profile/volunteer/current/:
    get:
      operationId: accounts_profile_volunteer_current_list
      description: Get current volunteer positions.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVolunteerList'
          description: ''
  /accounts/profile/volunteer/recent/:
    get:
      operationId: accounts_profile_volunteer_recent_list
      description: Get recent volunteer experiences (last 3 years).
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVolunteerList'
          description: ''
  /accounts/profile/volunteer/stats/:
    get:
      operationId: accounts_profile_volunteer_stats_retrieve
      description: Get volunteer experience statistics.
      tags:
      - Volunteer
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                stats: dict
          description: ''
  /accounts/refresh/:
    post:
      operationId: accounts_refresh_create
      description: Refreshes a JWT access token using a valid refresh token.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
            examples:
              RefreshRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Refresh request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          description: New access token
        '400':
          description: Invalid input
        '401':
          description: Invalid or blacklisted token
  /accounts/register/:
    post:
      operationId: accounts_register_create
      description: Registers a new user and returns JWT tokens and user details.
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              RegisterRequest:
                value:
                  username: janedoe
                  email: jane@example.com
                  password: secure123
                  first_name: Jane
                  last_name: Doe
                summary: Register request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                RegisterResponse:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 2
                      username: janedoe
                      email: jane@example.com
                      first_name: Jane
                      last_name: Doe
                      last_login: null
                      date_joined: '2025-05-16T12:00:00Z'
                  summary: Register response
          description: ''
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /accounts/reset-password/:
    post:
      operationId: accounts_reset_password_create
      description: Resets a user's password using a valid token and UID.
      tags:
      - Password Reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            examples:
              ResetPasswordRequest:
                value:
                  token: abc123
                  uid: 550e8400-e29b-41d4-a716-446655440000
                  password: newsecure123
                summary: Reset password request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid input or token
  /accounts/users/:
    get:
      operationId: accounts_users_list
      description: Comprehensive user management with professional networking features.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
    post:
      operationId: accounts_users_create
      description: Comprehensive user management with professional networking features.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /accounts/users/{id}/:
    get:
      operationId: accounts_users_retrieve
      description: Retrieve user profile with view tracking.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_users_update
      description: Comprehensive user management with professional networking features.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: accounts_users_partial_update
      description: Comprehensive user management with professional networking features.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_users_destroy
      description: Comprehensive user management with professional networking features.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/users/{id}/accept-connection/:
    post:
      operationId: accounts_users_accept_connection_create
      description: Accept a connection request.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - Connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
  /accounts/users/{id}/analytics/:
    get:
      operationId: accounts_users_analytics_retrieve
      description: Get user profile analytics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileAnalytics'
          description: ''
  /accounts/users/{id}/connect/:
    post:
      operationId: accounts_users_connect_create
      description: Send connection request to another user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - User Profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConnectionRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConnectionRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
  /accounts/users/{id}/connections/:
    get:
      operationId: accounts_users_connections_list
      description: Get user's connections.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
  /accounts/users/{id}/decline-connection/:
    post:
      operationId: accounts_users_decline_connection_create
      description: Decline a connection request.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - Connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/users/{id}/disconnect/:
    delete:
      operationId: accounts_users_disconnect_destroy
      description: Remove connection with another user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/users/{id}/endorse_skill/:
    post:
      operationId: accounts_users_endorse_skill_create
      description: Endorse a user's skill.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - Skills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillEndorseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillEndorseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillEndorseRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillEndorsement'
          description: ''
  /accounts/users/{id}/follow/:
    post:
      operationId: accounts_users_follow_create
      description: Follow another user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - User Profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /accounts/users/{id}/followers/:
    get:
      operationId: accounts_users_followers_list
      description: Get user's followers.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
  /accounts/users/{id}/following/:
    get:
      operationId: accounts_users_following_list
      description: Get users that this user is following.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
  /accounts/users/{id}/mark-notification-read/:
    post:
      operationId: accounts_users_mark_notification_read_create
      description: Mark a notification as read.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /accounts/users/{id}/send_message/:
    post:
      operationId: accounts_users_send_message_create
      description: Send a message to another user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - Messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /accounts/users/{id}/unfollow/:
    delete:
      operationId: accounts_users_unfollow_destroy
      description: Unfollow another user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this کاربر.
        required: true
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /accounts/users/change_password/:
    post:
      operationId: accounts_users_change_password_create
      description: Change user password.
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                message: Password changed successfully
          description: ''
  /accounts/users/connection_requests/:
    get:
      operationId: accounts_users_connection_requests_list
      description: Get pending connection requests.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - Connections
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConnectionList'
          description: ''
  /accounts/users/messages/:
    get:
      operationId: accounts_users_messages_list
      description: Get user messages.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - Messages
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageList'
          description: ''
  /accounts/users/notifications/:
    get:
      operationId: accounts_users_notifications_list
      description: Get user notifications.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - Notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
  /accounts/users/search_profiles/:
    get:
      operationId: accounts_users_search_profiles_list
      description: Advanced profile search with filters.
      parameters:
      - in: query
        name: company
        schema:
          type: string
        description: Company filter
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: limit
        schema:
          type: integer
        description: Results per page
      - in: query
        name: location
        schema:
          type: string
        description: Location filter
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: query
        schema:
          type: string
        description: Search query
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: skills
        schema:
          type: string
        description: Comma-separated skills
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - User Profiles
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /accounts/users/suggestions/:
    get:
      operationId: accounts_users_suggestions_list
      description: Get user connection suggestions based on mutual connections, skills,
        etc.
      parameters:
      - in: query
        name: current_company
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_verified
        schema:
          type: boolean
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - away
          - busy
          - deleted
          - do-not-disturb
          - inactive
          - pending
          - suspended
        description: |-
          * `active` - فعال
          * `inactive` - Inactive
          * `away` - Away
          * `busy` - Busy
          * `do-not-disturb` - Do Not Disturb
          * `suspended` - Suspended
          * `pending` - Pending
          * `deleted` - Deleted
          * `archived` - Archived
      tags:
      - User Management
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserBasicList'
          description: ''
  /accounts/users/update_settings/:
    post:
      operationId: accounts_users_update_settings_create
      description: Update user profile settings.
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileSettingsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileSettingsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileSettingsRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /accounts/users/update_status/:
    post:
      operationId: accounts_users_update_status_create
      description: Update user's online status.
      tags:
      - User Profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineStatus'
          description: ''
  /accounts/users/upload_cover_image/:
    post:
      operationId: accounts_users_upload_cover_image_create
      description: Upload cover image.
      tags:
      - User Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CoverImageUploadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CoverImageUploadRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /accounts/users/upload_file/:
    post:
      operationId: accounts_users_upload_file_create
      description: Upload a file (resume, portfolio, etc.).
      tags:
      - Files
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFile'
          description: ''
  /accounts/users/upload_profile_picture/:
    post:
      operationId: accounts_users_upload_profile_picture_create
      description: Upload profile picture.
      tags:
      - User Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfilePictureUploadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfilePictureUploadRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /accounts/verify/:
    post:
      operationId: accounts_verify_create
      description: Verifies if a JWT access token is valid and returns token details.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
            examples:
              VerifyRequest:
                value:
                  access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Verify request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          description: Token is valid
        '400':
          description: Invalid input
        '401':
          description: Invalid or expired token
  /api/bots/:
    get:
      operationId: api_bots_list
      description: ViewSet for viewing chat bots.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/bots/{id}/:
    get:
      operationId: api_bots_retrieve
      description: ViewSet for viewing chat bots.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Bot.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/bots/{id}/start/:
    post:
      operationId: api_bots_start_create
      description: Start conversation with bot.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Bot.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/chat-search/:
    get:
      operationId: api_chat_search_retrieve
      description: Search for chats.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/:
    get:
      operationId: api_chats_list
      description: Get list of chats where the user is a participant
      summary: List user's chats
      parameters:
      - in: query
        name: is_public
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search in chat name/description
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - deleted
          - muted
          - restricted
        description: |-
          * `active` - فعال
          * `archived` - Archived
          * `muted` - Muted
          * `deleted` - Deleted
          * `restricted` - Restricted
      - in: query
        name: type
        schema:
          type: string
        description: Filter by chat type
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatListList'
          description: ''
    post:
      operationId: api_chats_create
      description: Create a new chat and add participants
      summary: Create new chat
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCreate'
          description: ''
  /api/chats/{chat_pk}/calls/:
    get:
      operationId: api_chats_calls_list
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatCall'
          description: ''
    post:
      operationId: api_chats_calls_create
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{call_pk}/end/:
    post:
      operationId: api_chats_calls_end_create
      description: End a call (initiator only).
      parameters:
      - in: path
        name: call_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{call_pk}/join/:
    post:
      operationId: api_chats_calls_join_create
      description: Join an ongoing call.
      parameters:
      - in: path
        name: call_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{call_pk}/leave/:
    post:
      operationId: api_chats_calls_leave_create
      description: Leave a call.
      parameters:
      - in: path
        name: call_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{id}/:
    get:
      operationId: api_chats_calls_retrieve
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    put:
      operationId: api_chats_calls_update
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    patch:
      operationId: api_chats_calls_partial_update
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    delete:
      operationId: api_chats_calls_destroy
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/calls/{id}/end/:
    post:
      operationId: api_chats_calls_end_create_2
      description: End a call (initiator only).
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{id}/join/:
    post:
      operationId: api_chats_calls_join_create_2
      description: Join an ongoing call.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/calls/{id}/leave/:
    post:
      operationId: api_chats_calls_leave_create_2
      description: Leave a call.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/chats/{chat_pk}/export/:
    get:
      operationId: api_chats_export_retrieve
      description: View for exporting chat data.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/{chat_pk}/invite-links/:
    get:
      operationId: api_chats_invite_links_list
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    post:
      operationId: api_chats_invite_links_create
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
  /api/chats/{chat_pk}/invite-links/{id}/:
    get:
      operationId: api_chats_invite_links_retrieve
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    put:
      operationId: api_chats_invite_links_update
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    patch:
      operationId: api_chats_invite_links_partial_update
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    delete:
      operationId: api_chats_invite_links_destroy
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/messages/:
    get:
      operationId: api_chats_messages_list
      description: List messages with permission check.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatMessageList'
          description: ''
    post:
      operationId: api_chats_messages_create
      description: Create a new message.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageCreate'
          description: ''
  /api/chats/{chat_pk}/messages/{message_pk}/reactions/:
    post:
      operationId: api_chats_messages_reactions_create
      description: View for message reactions.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: message_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_chats_messages_reactions_destroy
      description: View for message reactions.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: message_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/messages/{id}/:
    get:
      operationId: api_chats_messages_retrieve
      description: ViewSet for managing chat messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    put:
      operationId: api_chats_messages_update
      description: Handle message update with edit tracking.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    patch:
      operationId: api_chats_messages_partial_update
      description: ViewSet for managing chat messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    delete:
      operationId: api_chats_messages_destroy
      description: Handle message deletion with proper permissions.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/messages/{id}/mark_read/:
    post:
      operationId: api_chats_messages_mark_read_create
      description: Mark message as read.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/chats/{chat_pk}/messages/{id}/react/:
    post:
      operationId: api_chats_messages_react_create
      description: Add or remove reaction to message.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/chats/{chat_pk}/messages/bulk_delete/:
    post:
      operationId: api_chats_messages_bulk_delete_create
      description: Delete multiple messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/chats/{chat_pk}/messages/bulk_mark_read/:
    post:
      operationId: api_chats_messages_bulk_mark_read_create
      description: Mark multiple messages as read.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/chats/{chat_pk}/messages/search/:
    get:
      operationId: api_chats_messages_search_retrieve
      description: View for searching messages in chat.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/{chat_pk}/participants/:
    get:
      operationId: api_chats_participants_list
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatParticipant'
          description: ''
    post:
      operationId: api_chats_participants_create
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
  /api/chats/{chat_pk}/participants/{id}/:
    get:
      operationId: api_chats_participants_retrieve
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    put:
      operationId: api_chats_participants_update
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    patch:
      operationId: api_chats_participants_partial_update
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    delete:
      operationId: api_chats_participants_destroy
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/participants/{id}/ban/:
    post:
      operationId: api_chats_participants_ban_create
      description: Ban participant.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
  /api/chats/{chat_pk}/polls/:
    get:
      operationId: api_chats_polls_list
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatPoll'
          description: ''
    post:
      operationId: api_chats_polls_create
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/chats/{chat_pk}/polls/{id}/:
    get:
      operationId: api_chats_polls_retrieve
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    put:
      operationId: api_chats_polls_update
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    patch:
      operationId: api_chats_polls_partial_update
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    delete:
      operationId: api_chats_polls_destroy
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{chat_pk}/polls/{id}/close/:
    post:
      operationId: api_chats_polls_close_create
      description: Close a poll (creator only).
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/chats/{chat_pk}/polls/{id}/vote/:
    post:
      operationId: api_chats_polls_vote_create
      description: Vote in a poll.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/chats/{chat_pk}/upload-file/:
    post:
      operationId: api_chats_upload_file_create
      description: View for file uploads.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/{chat_pk}/upload-files/:
    post:
      operationId: api_chats_upload_files_create
      description: View for multiple file uploads.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/{chat_pk}/webhooks/:
    get:
      operationId: api_chats_webhooks_retrieve
      description: View for webhooks.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
    post:
      operationId: api_chats_webhooks_create
      description: View for webhooks.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/chats/{id}/:
    get:
      operationId: api_chats_retrieve
      description: Get detailed information about a specific chat
      summary: Get chat details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    put:
      operationId: api_chats_update
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    patch:
      operationId: api_chats_partial_update
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    delete:
      operationId: api_chats_destroy
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/chats/{id}/add_participants/:
    post:
      operationId: api_chats_add_participants_create
      description: Add participants to chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/chats/{id}/generate_invite_link/:
    post:
      operationId: api_chats_generate_invite_link_create
      description: Generate new invite link for chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/chats/{id}/join/:
    post:
      operationId: api_chats_join_create
      description: Join a public chat or use invite link.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/chats/{id}/leave/:
    post:
      operationId: api_chats_leave_create
      description: Leave a chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/chats/{id}/remove_participant/:
    post:
      operationId: api_chats_remove_participant_create
      description: Remove a participant from chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/chats/{id}/search_messages/:
    get:
      operationId: api_chats_search_messages_retrieve
      description: Search messages in chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/files/upload/:
    post:
      operationId: api_files_upload_create
      description: View for file uploads.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/folders/:
    get:
      operationId: api_folders_list
      description: Return folders as simple list instead of paginated response.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatFolder'
          description: ''
    post:
      operationId: api_folders_create
      description: ViewSet for managing chat folders.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
  /api/folders/{id}/:
    get:
      operationId: api_folders_retrieve
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    put:
      operationId: api_folders_update
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    patch:
      operationId: api_folders_partial_update
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    delete:
      operationId: api_folders_destroy
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/folders/{id}/chats/:
    get:
      operationId: api_folders_chats_retrieve
      description: Get chats in this folder.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
  /api/invite-links/{link}/join/:
    post:
      operationId: api_invite_links_join_create
      description: View for joining chat via invite link.
      parameters:
      - in: path
        name: link
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/sticker-sets/:
    get:
      operationId: api_sticker_sets_list
      description: ViewSet for viewing sticker sets.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/sticker-sets/{id}/:
    get:
      operationId: api_sticker_sets_retrieve
      description: ViewSet for viewing sticker sets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/sticker-sets/{id}/install/:
    post:
      operationId: api_sticker_sets_install_create
      description: Install a sticker set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/sticker-sets/{id}/stickers/:
    get:
      operationId: api_sticker_sets_stickers_retrieve
      description: Get stickers in this set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/sticker-sets/{id}/uninstall/:
    post:
      operationId: api_sticker_sets_uninstall_create
      description: Uninstall a sticker set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/themes/:
    get:
      operationId: api_themes_list
      description: ViewSet for viewing chat themes.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatTheme'
          description: ''
  /api/themes/{id}/:
    get:
      operationId: api_themes_retrieve
      description: ViewSet for viewing chat themes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Theme.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatTheme'
          description: ''
  /api/user-data-delete/:
    post:
      operationId: api_user_data_delete_create
      description: View for deleting user data.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/user-data-export/:
    get:
      operationId: api_user_data_export_retrieve
      description: View for exporting user data.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: View for user profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: View for user registration.
      tags:
      - api
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/v1/bots/:
    get:
      operationId: bots_list
      description: ViewSet for viewing chat bots.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - bots
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/v1/bots/{id}/:
    get:
      operationId: bots_retrieve
      description: ViewSet for viewing chat bots.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Bot.
        required: true
      tags:
      - bots
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/v1/bots/{id}/start/:
    post:
      operationId: bots_start_create
      description: Start conversation with bot.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Bot.
        required: true
      tags:
      - bots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatBotRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
          description: ''
  /api/v1/chat-search/:
    get:
      operationId: chat_search_retrieve
      description: Search for chats.
      tags:
      - chat-search
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          description: No response body
  /api/v1/chats/:
    get:
      operationId: chats_list
      description: Get list of chats where the user is a participant
      summary: List user's chats
      parameters:
      - in: query
        name: is_public
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search in chat name/description
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - archived
          - deleted
          - muted
          - restricted
        description: |-
          * `active` - فعال
          * `archived` - Archived
          * `muted` - Muted
          * `deleted` - Deleted
          * `restricted` - Restricted
      - in: query
        name: type
        schema:
          type: string
        description: Filter by chat type
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatListList'
          description: ''
    post:
      operationId: chats_create
      description: Create a new chat and add participants
      summary: Create new chat
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCreate'
          description: ''
  /api/v1/chats/{chat_pk}/calls/:
    get:
      operationId: chats_calls_list
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatCall'
          description: ''
    post:
      operationId: chats_calls_create
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/v1/chats/{chat_pk}/calls/{id}/:
    get:
      operationId: chats_calls_retrieve
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    put:
      operationId: chats_calls_update
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    patch:
      operationId: chats_calls_partial_update
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
    delete:
      operationId: chats_calls_destroy
      description: ViewSet for managing chat calls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{chat_pk}/calls/{id}/end/:
    post:
      operationId: chats_calls_end_create
      description: End a call (initiator only).
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/v1/chats/{chat_pk}/calls/{id}/join/:
    post:
      operationId: chats_calls_join_create
      description: Join an ongoing call.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/v1/chats/{chat_pk}/calls/{id}/leave/:
    post:
      operationId: chats_calls_leave_create
      description: Leave a call.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatCallRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCall'
          description: ''
  /api/v1/chats/{chat_pk}/invite-links/:
    get:
      operationId: chats_invite_links_list
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    post:
      operationId: chats_invite_links_create
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
  /api/v1/chats/{chat_pk}/invite-links/{id}/:
    get:
      operationId: chats_invite_links_retrieve
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    put:
      operationId: chats_invite_links_update
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    patch:
      operationId: chats_invite_links_partial_update
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatInviteLinkRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
          description: ''
    delete:
      operationId: chats_invite_links_destroy
      description: ViewSet for managing chat invite links.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite Link.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{chat_pk}/messages/:
    get:
      operationId: chats_messages_list
      description: List messages with permission check.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatMessageList'
          description: ''
    post:
      operationId: chats_messages_create
      description: Create a new message.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageCreate'
          description: ''
  /api/v1/chats/{chat_pk}/messages/{id}/:
    get:
      operationId: chats_messages_retrieve
      description: ViewSet for managing chat messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    put:
      operationId: chats_messages_update
      description: Handle message update with edit tracking.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    patch:
      operationId: chats_messages_partial_update
      description: ViewSet for managing chat messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    delete:
      operationId: chats_messages_destroy
      description: Handle message deletion with proper permissions.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{chat_pk}/messages/{id}/mark_read/:
    post:
      operationId: chats_messages_mark_read_create
      description: Mark message as read.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/v1/chats/{chat_pk}/messages/{id}/react/:
    post:
      operationId: chats_messages_react_create
      description: Add or remove reaction to message.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat Message.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/v1/chats/{chat_pk}/messages/bulk_delete/:
    post:
      operationId: chats_messages_bulk_delete_create
      description: Delete multiple messages.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/v1/chats/{chat_pk}/messages/bulk_mark_read/:
    post:
      operationId: chats_messages_bulk_mark_read_create
      description: Mark multiple messages as read.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/v1/chats/{chat_pk}/participants/:
    get:
      operationId: chats_participants_list
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatParticipant'
          description: ''
    post:
      operationId: chats_participants_create
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
  /api/v1/chats/{chat_pk}/participants/{id}/:
    get:
      operationId: chats_participants_retrieve
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    put:
      operationId: chats_participants_update
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    patch:
      operationId: chats_participants_partial_update
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
    delete:
      operationId: chats_participants_destroy
      description: ViewSet for managing chat participants.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{chat_pk}/participants/{id}/ban/:
    post:
      operationId: chats_participants_ban_create
      description: Ban participant.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Participant.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
          description: ''
  /api/v1/chats/{chat_pk}/polls/:
    get:
      operationId: chats_polls_list
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatPoll'
          description: ''
    post:
      operationId: chats_polls_create
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/v1/chats/{chat_pk}/polls/{id}/:
    get:
      operationId: chats_polls_retrieve
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    put:
      operationId: chats_polls_update
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    patch:
      operationId: chats_polls_partial_update
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatPollRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
    delete:
      operationId: chats_polls_destroy
      description: ViewSet for managing chat polls.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{chat_pk}/polls/{id}/close/:
    post:
      operationId: chats_polls_close_create
      description: Close a poll (creator only).
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/v1/chats/{chat_pk}/polls/{id}/vote/:
    post:
      operationId: chats_polls_vote_create
      description: Vote in a poll.
      parameters:
      - in: path
        name: chat_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatPollRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPoll'
          description: ''
  /api/v1/chats/{id}/:
    get:
      operationId: chats_retrieve
      description: Get detailed information about a specific chat
      summary: Get chat details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    put:
      operationId: chats_update
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    patch:
      operationId: chats_partial_update
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    delete:
      operationId: chats_destroy
      description: |-
        ViewSet for managing chats.
        Supports creating, listing, updating, and deleting chats.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/chats/{id}/add_participants/:
    post:
      operationId: chats_add_participants_create
      description: Add participants to chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/chats/{id}/generate_invite_link/:
    post:
      operationId: chats_generate_invite_link_create
      description: Generate new invite link for chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/chats/{id}/join/:
    post:
      operationId: chats_join_create
      description: Join a public chat or use invite link.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/chats/{id}/leave/:
    post:
      operationId: chats_leave_create
      description: Leave a chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/chats/{id}/remove_participant/:
    post:
      operationId: chats_remove_participant_create
      description: Remove a participant from chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/chats/{id}/search_messages/:
    get:
      operationId: chats_search_messages_retrieve
      description: Search messages in chat.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Chat.
        required: true
      tags:
      - chats
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/folders/:
    get:
      operationId: folders_list
      description: Return folders as simple list instead of paginated response.
      tags:
      - folders
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatFolder'
          description: ''
    post:
      operationId: folders_create
      description: ViewSet for managing chat folders.
      tags:
      - folders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
  /api/v1/folders/{id}/:
    get:
      operationId: folders_retrieve
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - folders
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    put:
      operationId: folders_update
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - folders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatFolderRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    patch:
      operationId: folders_partial_update
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - folders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatFolderRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
    delete:
      operationId: folders_destroy
      description: ViewSet for managing chat folders.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - folders
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /api/v1/folders/{id}/chats/:
    get:
      operationId: folders_chats_retrieve
      description: Get chats in this folder.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - folders
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFolder'
          description: ''
  /api/v1/sticker-sets/:
    get:
      operationId: sticker_sets_list
      description: ViewSet for viewing sticker sets.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - sticker-sets
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/v1/sticker-sets/{id}/:
    get:
      operationId: sticker_sets_retrieve
      description: ViewSet for viewing sticker sets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - sticker-sets
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/v1/sticker-sets/{id}/install/:
    post:
      operationId: sticker_sets_install_create
      description: Install a sticker set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - sticker-sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/v1/sticker-sets/{id}/stickers/:
    get:
      operationId: sticker_sets_stickers_retrieve
      description: Get stickers in this set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - sticker-sets
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/v1/sticker-sets/{id}/uninstall/:
    post:
      operationId: sticker_sets_uninstall_create
      description: Uninstall a sticker set.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sticker Set.
        required: true
      tags:
      - sticker-sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatStickerSetRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStickerSet'
          description: ''
  /api/v1/themes/:
    get:
      operationId: themes_list
      description: ViewSet for viewing chat themes.
      tags:
      - themes
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatTheme'
          description: ''
  /api/v1/themes/{id}/:
    get:
      operationId: themes_retrieve
      description: ViewSet for viewing chat themes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Chat Theme.
        required: true
      tags:
      - themes
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatTheme'
          description: ''
  /c/actions/:
    get:
      operationId: c_actions_list
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
          description: ''
    post:
      operationId: c_actions_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: ''
  /c/actions/{id}/:
    get:
      operationId: c_actions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this action.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: ''
    put:
      operationId: c_actions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this action.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: ''
    patch:
      operationId: c_actions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this action.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedActionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedActionRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: ''
    delete:
      operationId: c_actions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this action.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /c/comments/:
    get:
      operationId: c_comments_list
      parameters:
      - in: query
        name: content_type
        schema:
          type: integer
      - in: query
        name: object_id
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: c_comments_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /c/comments/{id}/:
    get:
      operationId: c_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: c_comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: c_comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: c_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /c/reacts/:
    get:
      operationId: c_reacts_list
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/React'
          description: ''
    post:
      operationId: c_reacts_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReactRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReactRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/React'
          description: ''
  /c/reacts/{id}/:
    get:
      operationId: c_reacts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this react.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/React'
          description: ''
    put:
      operationId: c_reacts_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this react.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReactRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReactRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/React'
          description: ''
    patch:
      operationId: c_reacts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this react.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReactRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReactRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReactRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/React'
          description: ''
    delete:
      operationId: c_reacts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this react.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /c/tags/:
    get:
      operationId: c_tags_list
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: parent
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
    post:
      operationId: c_tags_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /c/tags/{id}/:
    get:
      operationId: c_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: c_tags_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: c_tags_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTagRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTagRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTagRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: c_tags_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /c/tags/bulk_create/:
    post:
      operationId: c_tags_bulk_create_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /c/views/:
    get:
      operationId: c_views_list
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/View'
          description: ''
    post:
      operationId: c_views_create
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ViewRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
  /c/views/{id}/:
    get:
      operationId: c_views_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this view.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
    put:
      operationId: c_views_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this view.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ViewRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
    patch:
      operationId: c_views_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this view.
        required: true
      tags:
      - c
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedViewRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
    delete:
      operationId: c_views_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this view.
        required: true
      tags:
      - c
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/:
    get:
      operationId: events_list
      description: Get a paginated list of events with filtering and search capabilities.
      summary: List events
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
    post:
      operationId: events_create
      description: Create a new event. Only authenticated users can create events.
      summary: Create event
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
  /events/{id}/:
    get:
      operationId: events_retrieve
      description: Get detailed information about a specific event.
      summary: Get event details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
    put:
      operationId: events_update
      description: Update an existing event. Only organizers and collaborators can
        update events.
      summary: Update event
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
    patch:
      operationId: events_partial_update
      description: ViewSet for managing events with comprehensive security and performance
        optimizations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
    delete:
      operationId: events_destroy
      description: Delete an event. Only organizers can delete events.
      summary: Delete event
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/{id}/analytics/:
    get:
      operationId: events_analytics_retrieve
      description: Get detailed analytics for an event. Only accessible to organizers
        and collaborators.
      summary: Get event analytics
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAnalytics'
          description: ''
  /events/{id}/favorite/:
    post:
      operationId: events_favorite_create
      description: Add or remove event from user's favorites.
      summary: Toggle event favorite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Added to favorites
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: Removed from favorites
          description: ''
  /events/{id}/participants/:
    get:
      operationId: events_participants_list_2
      description: Get all participants for an event. Only accessible to organizers
        and collaborators.
      summary: Get event participants
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParticipantList'
          description: ''
  /events/{id}/register/:
    post:
      operationId: events_register_create
      description: Register the authenticated user for an event.
      summary: Register for event
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
  /events/{id}/sessions/:
    get:
      operationId: events_sessions_list_2
      description: Get all sessions for an event.
      summary: Get event sessions
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionList'
          description: ''
  /events/{id}/unregister/:
    post:
      operationId: events_unregister_create
      description: Cancel registration for an event.
      summary: Unregister from event
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Successfully unregistered
          description: ''
  /events/categories/:
    get:
      operationId: events_categories_list
      description: ViewSet for event categories.
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventCategory'
          description: ''
  /events/categories/{id}/:
    get:
      operationId: events_categories_retrieve
      description: ViewSet for event categories.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Category.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
          description: ''
  /events/categories/{id}/events/:
    get:
      operationId: events_categories_events_list
      description: Get all events in a specific category.
      summary: Get events in category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Category.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventList'
          description: ''
  /events/exhibitors/:
    get:
      operationId: events_exhibitors_list
      description: Get a paginated list of event exhibitors.
      summary: List exhibitors
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exhibitor'
          description: ''
    post:
      operationId: events_exhibitors_create
      description: Create a new exhibitor. Only event organizers can create exhibitors.
      summary: Create exhibitor
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exhibitor'
          description: ''
  /events/exhibitors/{id}/:
    get:
      operationId: events_exhibitors_retrieve
      description: Get detailed information about a specific exhibitor.
      summary: Get exhibitor details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Exhibitor.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exhibitor'
          description: ''
    put:
      operationId: events_exhibitors_update
      description: Update an existing exhibitor.
      summary: Update exhibitor
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Exhibitor.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExhibitorRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exhibitor'
          description: ''
    patch:
      operationId: events_exhibitors_partial_update
      description: ViewSet for managing event exhibitors.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Exhibitor.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExhibitorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExhibitorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExhibitorRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exhibitor'
          description: ''
    delete:
      operationId: events_exhibitors_destroy
      description: Delete an exhibitor.
      summary: Delete exhibitor
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Exhibitor.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/exhibitors/{id}/products/:
    get:
      operationId: events_exhibitors_products_list
      description: Get products showcased by the exhibitor.
      summary: Get exhibitor products
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Exhibitor.
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /events/featured/:
    get:
      operationId: events_featured_list
      description: Get a list of featured events.
      summary: Get featured events
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
  /events/my_events/:
    get:
      operationId: events_my_events_list
      description: Get events organized by or participated in by the authenticated
        user.
      summary: Get user's events
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
  /events/participants/:
    get:
      operationId: events_participants_list
      description: Get a paginated list of event participants.
      summary: List participants
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
          description: ''
    post:
      operationId: events_participants_create
      description: Register for an event.
      summary: Register participant
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
  /events/participants/{id}/:
    get:
      operationId: events_participants_retrieve
      description: Get detailed information about a specific participant.
      summary: Get participant details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
    put:
      operationId: events_participants_update
      description: Update participant information.
      summary: Update participation
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
    patch:
      operationId: events_participants_partial_update
      description: ViewSet for managing event participants.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParticipantRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
    delete:
      operationId: events_participants_destroy
      description: Unregister from an event.
      summary: Unregister
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/participants/{id}/badges/:
    get:
      operationId: events_participants_badges_list
      description: Get badges earned by the participant.
      summary: Get participant badges
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParticipantBadge'
          description: ''
  /events/participants/{id}/check_in/:
    post:
      operationId: events_participants_check_in_create
      description: Check in a participant to the event.
      summary: Check in participant
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Participant.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParticipantRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
          description: ''
  /events/products/:
    get:
      operationId: events_products_list
      description: Get a paginated list of products from exhibitors.
      summary: List products
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: events_products_create
      description: Create a new product. Only exhibitors can create products.
      summary: Create product
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /events/products/{id}/:
    get:
      operationId: events_products_retrieve
      description: Get detailed information about a specific product.
      summary: Get product details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: events_products_update
      description: Update an existing product.
      summary: Update product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: events_products_partial_update
      description: ViewSet for managing exhibitor products.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: events_products_destroy
      description: Delete a product.
      summary: Delete product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/sessions/:
    get:
      operationId: events_sessions_list
      description: Get a paginated list of sessions with filtering capabilities.
      summary: List sessions
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
          description: ''
    post:
      operationId: events_sessions_create
      description: Create a new session. Only event organizers can create sessions.
      summary: Create session
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /events/sessions/{id}/:
    get:
      operationId: events_sessions_retrieve
      description: Get detailed information about a specific session.
      summary: Get session details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Session.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    put:
      operationId: events_sessions_update
      description: Update an existing session. Only event organizers can update sessions.
      summary: Update session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Session.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    patch:
      operationId: events_sessions_partial_update
      description: ViewSet for managing event sessions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Session.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    delete:
      operationId: events_sessions_destroy
      description: Delete a session. Only event organizers can delete sessions.
      summary: Delete session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Session.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /events/sessions/{id}/rate/:
    post:
      operationId: events_sessions_rate_create
      description: Rate a session. Only participants can rate sessions.
      summary: Rate session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Session.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRatingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRatingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRatingRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionRating'
          description: ''
  /events/tags/:
    get:
      operationId: events_tags_list
      description: ViewSet for event tags.
      parameters:
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTag'
          description: ''
  /events/tags/{id}/:
    get:
      operationId: events_tags_retrieve
      description: ViewSet for event tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Tag.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTag'
          description: ''
  /events/tags/{id}/stats/:
    get:
      operationId: events_tags_stats_retrieve
      description: Get usage statistics for event tags.
      summary: Get tag statistics
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Tag.
        required: true
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
  /events/tags/trending/:
    get:
      operationId: events_tags_trending_list
      description: Get trending event tags based on recent usage.
      summary: Get trending tags
      parameters:
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTag'
          description: ''
  /events/trending/:
    get:
      operationId: events_trending_list
      description: Get trending events based on recent activity.
      summary: Get trending events
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
  /feedback/:
    get:
      operationId: feedback_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: feedback_type
        schema:
          type: string
          enum:
          - BUG
          - FEATURE
          - OTHER
          - SUPPORT
        description: |-
          Type of feedback.

          * `BUG` - Bug Report
          * `FEATURE` - Feature Request
          * `SUPPORT` - Support Request
          * `OTHER` - Other
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CLOSED
          - IN_PROGRESS
          - NEW
          - RESOLVED
        description: |-
          Current status of the feedback.

          * `NEW` - New
          * `IN_PROGRESS` - In Progress
          * `RESOLVED` - Resolved
          * `CLOSED` - Closed
      tags:
      - feedback
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
          description: ''
    post:
      operationId: feedback_create
      tags:
      - feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
  /feedback/{id}/:
    get:
      operationId: feedback_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this feedback.
        required: true
      tags:
      - feedback
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    put:
      operationId: feedback_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this feedback.
        required: true
      tags:
      - feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    patch:
      operationId: feedback_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this feedback.
        required: true
      tags:
      - feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    delete:
      operationId: feedback_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this feedback.
        required: true
      tags:
      - feedback
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /logs/logs/:
    get:
      operationId: logs_logs_list
      parameters:
      - in: query
        name: action_type
        schema:
          type: string
          enum:
          - CREATE
          - DELETE
          - LOGIN
          - LOGOUT
          - SYSTEM
          - UPDATE
          - VIEW
        description: |-
          Type of action performed.

          * `LOGIN` - Login
          * `LOGOUT` - Logout
          * `CREATE` - Create
          * `UPDATE` - Update
          * `DELETE` - حذف
          * `VIEW` - مشاهده
          * `SYSTEM` - System
      - in: query
        name: content_type
        schema:
          type: integer
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: ip_address
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - HIGH
          - LOW
          - MED
        description: |-
          Priority level of the action.

          * `LOW` - Low
          * `MED` - Medium
          * `HIGH` - High
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - FAILED
          - SUCCESS
        description: |-
          Status of the action.

          * `SUCCESS` - Success
          * `FAILED` - Failed
      tags:
      - logs
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogList'
          description: ''
  /logs/logs/{id}/:
    get:
      operationId: logs_logs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this audit log.
        required: true
      tags:
      - logs
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLog'
          description: ''
  /notifications/batches/:
    get:
      operationId: notifications_batches_list
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationBatch'
          description: ''
    post:
      operationId: notifications_batches_create
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationBatch'
          description: ''
  /notifications/batches/{id}/:
    get:
      operationId: notifications_batches_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification batch.
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationBatch'
          description: ''
    put:
      operationId: notifications_batches_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification batch.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationBatch'
          description: ''
    patch:
      operationId: notifications_batches_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification batch.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationBatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationBatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationBatchRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationBatch'
          description: ''
    delete:
      operationId: notifications_batches_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification batch.
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /notifications/batches/{id}/send_batch/:
    post:
      operationId: notifications_batches_send_batch_create
      description: Send a batch notification to specified users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification batch.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationBatchRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationBatch'
          description: ''
  /notifications/notifications/:
    get:
      operationId: notifications_notifications_list
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
    post:
      operationId: notifications_notifications_create
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /notifications/notifications/{id}/:
    get:
      operationId: notifications_notifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: notifications_notifications_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: notifications_notifications_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    delete:
      operationId: notifications_notifications_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /notifications/notifications/{id}/mark_read/:
    post:
      operationId: notifications_notifications_mark_read_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /notifications/notifications/mark_all_read/:
    post:
      operationId: notifications_notifications_mark_all_read_create
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /notifications/templates/:
    get:
      operationId: notifications_templates_list
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationTemplate'
          description: ''
    post:
      operationId: notifications_templates_create
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
          description: ''
  /notifications/templates/{id}/:
    get:
      operationId: notifications_templates_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification template.
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
          description: ''
    put:
      operationId: notifications_templates_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification template.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationTemplateRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
          description: ''
    patch:
      operationId: notifications_templates_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification template.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationTemplateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationTemplateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationTemplateRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
          description: ''
    delete:
      operationId: notifications_templates_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification template.
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /payment/callback/:
    get:
      operationId: payment_callback_retrieve
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCallback'
          description: ''
  /payment/gateways/:
    get:
      operationId: payment_gateways_list
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentGatewayConfig'
          description: ''
    post:
      operationId: payment_gateways_create
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayConfig'
          description: ''
  /payment/gateways/{id}/:
    get:
      operationId: payment_gateways_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment gateway config.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayConfig'
          description: ''
    put:
      operationId: payment_gateways_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment gateway config.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentGatewayConfigRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayConfig'
          description: ''
    patch:
      operationId: payment_gateways_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment gateway config.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPaymentGatewayConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPaymentGatewayConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPaymentGatewayConfigRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayConfig'
          description: ''
    delete:
      operationId: payment_gateways_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment gateway config.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /payment/go-to-gateway/:
    post:
      operationId: payment_go_to_gateway_create
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
  /payment/payments/:
    get:
      operationId: payment_payments_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: currency
        schema:
          type: string
          enum:
          - EUR
          - IRR
          - USD
        description: |-
          * `IRR` - ریال
          * `USD` - US Dollar
          * `EUR` - Euro
      - in: query
        name: gateway
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - FAILED
          - PENDING
          - REFUNDED
          - SUCCESS
        description: |-
          * `PENDING` - Pending
          * `SUCCESS` - Success
          * `FAILED` - Failed
          * `REFUNDED` - Refunded
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
          description: ''
    post:
      operationId: payment_payments_create
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
  /payment/payments/{id}/:
    get:
      operationId: payment_payments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    put:
      operationId: payment_payments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    patch:
      operationId: payment_payments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPaymentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPaymentRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    delete:
      operationId: payment_payments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /payment/refunds/:
    get:
      operationId: payment_refunds_list
      parameters:
      - in: query
        name: payment
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - APPROVED
          - PENDING
          - REJECTED
        description: |-
          * `PENDING` - Pending
          * `APPROVED` - Approved
          * `REJECTED` - Rejected
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Refund'
          description: ''
    post:
      operationId: payment_refunds_create
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
  /payment/refunds/{id}/:
    get:
      operationId: payment_refunds_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    put:
      operationId: payment_refunds_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    patch:
      operationId: payment_refunds_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRefundRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRefundRequest'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    delete:
      operationId: payment_refunds_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '204':
          description: No response body
  /payment/refunds/{id}/approve/:
    post:
      operationId: payment_refunds_approve_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
  /payment/transactions/:
    get:
      operationId: payment_transactions_list
      parameters:
      - in: query
        name: payment
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - COMPLETED
          - FAILED
          - INITIATED
        description: |-
          * `INITIATED` - Initiated
          * `COMPLETED` - Completed
          * `FAILED` - Failed
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
          description: ''
  /payment/transactions/{id}/:
    get:
      operationId: payment_transactions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this transaction.
        required: true
      tags:
      - payment
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - en
          - fa
      tags:
      - schema
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: 'JWT Authorization using the Bearer scheme. Example: `Authorization:
            Bearer <token>`'
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    Achievement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        issuer:
          type: string
          maxLength: 200
        date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/AchievementCategoryEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        image:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - date
      - description
      - id
      - title
    AchievementCategoryEnum:
      enum:
      - award
      - recognition
      - publication
      - patent
      - certification
      - other
      type: string
      description: |-
        * `award` - Award
        * `recognition` - Recognition
        * `publication` - Publication
        * `patent` - Patent
        * `certification` - Certification
        * `other` - Other
    AchievementRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        issuer:
          type: string
          maxLength: 200
        date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/AchievementCategoryEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        image:
          type: string
          format: binary
          nullable: true
      required:
      - date
      - description
      - title
    Action:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        action_type:
          type: string
          maxLength: 100
        metadata: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - action_type
      - created_at
      - id
      - user
    ActionRequest:
      type: object
      properties:
        action_type:
          type: string
          minLength: 1
          maxLength: 100
        metadata: {}
      required:
      - action_type
    ActionTypeEnum:
      enum:
      - LOGIN
      - LOGOUT
      - CREATE
      - UPDATE
      - DELETE
      - VIEW
      - SYSTEM
      type: string
      description: |-
        * `LOGIN` - Login
        * `LOGOUT` - Logout
        * `CREATE` - Create
        * `UPDATE` - Update
        * `DELETE` - حذف
        * `VIEW` - مشاهده
        * `SYSTEM` - System
    ActivityLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        activity_type:
          $ref: '#/components/schemas/ActivityTypeEnum'
        description:
          type: string
          maxLength: 200
        ip_address:
          type: string
          nullable: true
        user_agent:
          type: string
        location:
          type: string
          maxLength: 100
        metadata: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - activity_type
      - created_at
      - description
      - id
    ActivityLogRequest:
      type: object
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityTypeEnum'
        description:
          type: string
          minLength: 1
          maxLength: 200
        ip_address:
          type: string
          nullable: true
          minLength: 1
        user_agent:
          type: string
        location:
          type: string
          maxLength: 100
        metadata: {}
      required:
      - activity_type
      - description
    ActivityTypeEnum:
      enum:
      - profile_update
      - connection_request
      - connection_accept
      - endorsement
      - project_update
      - skill_update
      - login
      - password_change
      - profile_view
      - resume_created
      - resume_updated
      - resume_deleted
      - resume_published
      - resume_downloaded
      - resume_generated
      - recommendation_given
      - recommendation_received
      - recommendation_updated
      - recommendation_deleted
      - recommendation_approved
      - recommendation_declined
      - recommendation_requested
      type: string
      description: |-
        * `profile_update` - Profile Update
        * `connection_request` - Connection Request
        * `connection_accept` - Connection Accept
        * `endorsement` - Endorsement
        * `project_update` - Project Update
        * `skill_update` - Skill Update
        * `login` - Login
        * `password_change` - Password Change
        * `profile_view` - Profile View
        * `resume_created` - Resume Created
        * `resume_updated` - Resume Updated
        * `resume_deleted` - Resume Deleted
        * `resume_published` - Resume Published
        * `resume_downloaded` - Resume Downloaded
        * `resume_generated` - Resume Generated
        * `recommendation_given` - Recommendation Given
        * `recommendation_received` - Recommendation Received
        * `recommendation_updated` - Recommendation Updated
        * `recommendation_deleted` - Recommendation Deleted
        * `recommendation_approved` - Recommendation Approved
        * `recommendation_declined` - Recommendation Declined
        * `recommendation_requested` - Recommendation Requested
    AttendanceStatusEnum:
      enum:
      - not_attended
      - checked_in
      - attended
      - left_early
      type: string
      description: |-
        * `not_attended` - Not Attended
        * `checked_in` - Checked In
        * `attended` - Attended
        * `left_early` - Left Early
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        action_type:
          allOf:
          - $ref: '#/components/schemas/ActionTypeEnum'
          readOnly: true
          description: |-
            Type of action performed.

            * `LOGIN` - Login
            * `LOGOUT` - Logout
            * `CREATE` - Create
            * `UPDATE` - Update
            * `DELETE` - حذف
            * `VIEW` - مشاهده
            * `SYSTEM` - System
        status:
          allOf:
          - $ref: '#/components/schemas/AuditLogStatusEnum'
          readOnly: true
          description: |-
            Status of the action.

            * `SUCCESS` - Success
            * `FAILED` - Failed
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityCe3Enum'
          readOnly: true
          description: |-
            Priority level of the action.

            * `LOW` - Low
            * `MED` - Medium
            * `HIGH` - High
        ip_address:
          type: string
          readOnly: true
          nullable: true
          description: IP address of the client.
        user_agent:
          type: string
          readOnly: true
          description: User agent of the client (browser/server details).
        content_type:
          type: string
          readOnly: true
        object_id:
          type: integer
          readOnly: true
          nullable: true
          description: ID of the object affected.
        object_repr:
          type: string
          readOnly: true
          description: String representation of the affected object.
        changes:
          readOnly: true
          description: Changes made (before and after) in JSON format.
        metadata:
          readOnly: true
          description: Additional metadata (e.g., request URL, method).
        created_at:
          type: string
          format: date-time
          readOnly: true
        error_message:
          type: string
          readOnly: true
          description: Error message if the action failed.
      required:
      - action_type
      - changes
      - content_type
      - created_at
      - error_message
      - id
      - ip_address
      - metadata
      - object_id
      - object_repr
      - priority
      - status
      - user
      - user_agent
    AuditLogStatusEnum:
      enum:
      - SUCCESS
      - FAILED
      type: string
      description: |-
        * `SUCCESS` - Success
        * `FAILED` - Failed
    Certification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        issuer:
          type: string
          maxLength: 200
        issue_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
          nullable: true
        credential_id:
          type: string
          maxLength: 100
        credential_url:
          type: string
          format: uri
          maxLength: 200
        description:
          type: string
        skills: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - issue_date
      - issuer
      - name
      - updated_at
    CertificationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        issuer:
          type: string
          minLength: 1
          maxLength: 200
        issue_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
          nullable: true
        credential_id:
          type: string
          maxLength: 100
        credential_url:
          type: string
          format: uri
          maxLength: 200
        description:
          type: string
        skills: {}
      required:
      - issue_date
      - issuer
      - name
    Chat:
      type: object
      description: Comprehensive chat serializer with optimized queries.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        description:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 70
        photo:
          type: string
          format: uri
          nullable: true
        photo_small:
          type: string
          format: uri
          nullable: true
        creator:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        status:
          $ref: '#/components/schemas/Status270Enum'
        is_public:
          type: boolean
        is_verified:
          type: boolean
        is_scam:
          type: boolean
        is_fake:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        slow_mode_delay:
          allOf:
          - $ref: '#/components/schemas/SlowModeDelayEnum'
          minimum: 0
          maximum: 9223372036854775807
        has_protected_content:
          type: boolean
        has_aggressive_anti_spam_enabled:
          type: boolean
        auto_delete_timer:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        invite_link:
          type: string
          nullable: true
          maxLength: 100
        is_encrypted:
          type: boolean
        linked_project:
          type: string
          format: uuid
          nullable: true
        linked_task:
          type: string
          format: uuid
          nullable: true
        linked_network:
          type: integer
          nullable: true
        ai_enabled:
          type: boolean
        has_calls_enabled:
          type: boolean
        has_video_calls_enabled:
          type: boolean
        has_group_calls_enabled:
          type: boolean
        participants:
          type: string
          readOnly: true
        participant_count:
          type: string
          readOnly: true
        online_count:
          type: string
          readOnly: true
        messages_count:
          type: integer
          readOnly: true
        last_message:
          allOf:
          - $ref: '#/components/schemas/ChatMessage'
          readOnly: true
        pinned_message:
          allOf:
          - $ref: '#/components/schemas/ChatMessage'
          readOnly: true
        unread_count:
          type: string
          readOnly: true
        user_participant:
          type: string
          readOnly: true
        can_send_message:
          type: string
          readOnly: true
        is_member:
          type: string
          readOnly: true
        invite_link_info:
          type: string
          readOnly: true
        theme: {}
        wallpaper:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_send_message
      - created_at
      - creator
      - id
      - invite_link_info
      - is_member
      - last_message
      - messages_count
      - online_count
      - participant_count
      - participants
      - pinned_message
      - unread_count
      - updated_at
      - user_participant
    ChatAttachment:
      type: object
      description: Comprehensive attachment serializer with security validations.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/ChatAttachmentTypeEnum'
        file:
          type: string
          format: uri
        file_url:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
        thumbnail_url:
          type: string
          readOnly: true
        file_name:
          type: string
          maxLength: 255
        file_size:
          type: integer
          readOnly: true
        file_size_display:
          type: string
          readOnly: true
        mime_type:
          type: string
          maxLength: 100
        width:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        height:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        caption:
          type: string
          maxLength: 1024
        title:
          type: string
          maxLength: 255
        performer:
          type: string
          maxLength: 255
        is_encrypted:
          type: boolean
        is_safe:
          type: string
          readOnly: true
        download_count:
          type: integer
          readOnly: true
          default: 0
        checksum:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - checksum
      - created_at
      - download_count
      - file
      - file_size
      - file_size_display
      - file_url
      - id
      - is_safe
      - thumbnail_url
      - type
    ChatAttachmentRequest:
      type: object
      description: Comprehensive attachment serializer with security validations.
      properties:
        type:
          $ref: '#/components/schemas/ChatAttachmentTypeEnum'
        file:
          type: string
          format: binary
        thumbnail:
          type: string
          format: binary
          nullable: true
        file_name:
          type: string
          maxLength: 255
        mime_type:
          type: string
          maxLength: 100
        width:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        height:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        caption:
          type: string
          maxLength: 1024
        title:
          type: string
          maxLength: 255
        performer:
          type: string
          maxLength: 255
        is_encrypted:
          type: boolean
      required:
      - file
      - type
    ChatAttachmentTypeEnum:
      enum:
      - photo
      - video
      - audio
      - voice
      - video_note
      - document
      - sticker
      - animation
      type: string
      description: |-
        * `photo` - Photo
        * `video` - Video
        * `audio` - Audio
        * `voice` - Voice Note
        * `video_note` - Video Note
        * `document` - Document
        * `sticker` - Sticker
        * `animation` - GIF/Animation
    ChatBot:
      type: object
      description: Serializer for chat bots with security validations.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        description:
          type: string
          maxLength: 512
        about:
          type: string
          maxLength: 120
        bot_pic:
          type: string
          format: uri
          nullable: true
        commands: {}
        commands_count:
          type: string
          readOnly: true
        inline_placeholder:
          type: string
          maxLength: 64
        is_inline:
          type: boolean
        can_join_groups:
          type: boolean
        can_read_all_group_messages:
          type: boolean
        supports_inline_queries:
          type: boolean
        webhook_url:
          type: string
          format: uri
          maxLength: 200
        messages_sent:
          type: integer
          readOnly: true
        users_count:
          type: integer
          readOnly: true
        is_verified:
          type: boolean
        is_premium:
          type: boolean
        is_active:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - commands_count
      - created_at
      - is_active
      - messages_sent
      - user
      - users_count
    ChatBotRequest:
      type: object
      description: Serializer for chat bots with security validations.
      properties:
        description:
          type: string
          maxLength: 512
        about:
          type: string
          maxLength: 120
        bot_pic:
          type: string
          format: binary
          nullable: true
        commands: {}
        inline_placeholder:
          type: string
          maxLength: 64
        is_inline:
          type: boolean
        can_join_groups:
          type: boolean
        can_read_all_group_messages:
          type: boolean
        supports_inline_queries:
          type: boolean
        webhook_url:
          type: string
          format: uri
          maxLength: 200
        is_verified:
          type: boolean
        is_premium:
          type: boolean
    ChatCall:
      type: object
      description: Serializer for chat calls with participant management.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/ChatCallTypeEnum'
        status:
          $ref: '#/components/schemas/ChatCallStatusEnum'
        initiator:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        participants:
          type: string
          readOnly: true
        participants_count:
          type: string
          readOnly: true
        max_participants:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        start_time:
          type: string
          format: date-time
          readOnly: true
        answer_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        end_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        duration:
          type: integer
          readOnly: true
        duration_display:
          type: string
          readOnly: true
        quality_rating:
          type: number
          format: double
          maximum: 5.0
          minimum: 1.0
          nullable: true
        is_recorded:
          type: boolean
        recording_file:
          type: string
          format: uri
          nullable: true
        is_video_disabled:
          type: boolean
        is_screen_sharing:
          type: boolean
        can_join:
          type: string
          readOnly: true
      required:
      - answer_time
      - can_join
      - duration
      - duration_display
      - end_time
      - id
      - initiator
      - participants
      - participants_count
      - start_time
    ChatCallRequest:
      type: object
      description: Serializer for chat calls with participant management.
      properties:
        type:
          $ref: '#/components/schemas/ChatCallTypeEnum'
        status:
          $ref: '#/components/schemas/ChatCallStatusEnum'
        max_participants:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        quality_rating:
          type: number
          format: double
          maximum: 5.0
          minimum: 1.0
          nullable: true
        is_recorded:
          type: boolean
        recording_file:
          type: string
          format: binary
          nullable: true
        is_video_disabled:
          type: boolean
        is_screen_sharing:
          type: boolean
    ChatCallStatusEnum:
      enum:
      - ringing
      - ongoing
      - active
      - ended
      - missed
      - declined
      - failed
      type: string
      description: |-
        * `ringing` - Ringing
        * `ongoing` - Ongoing
        * `active` - فعال
        * `ended` - Ended
        * `missed` - Missed
        * `declined` - Declined
        * `failed` - Failed
    ChatCallTypeEnum:
      enum:
      - voice
      - video
      - group_voice
      - group_video
      - live_stream
      type: string
      description: |-
        * `voice` - Voice Call
        * `video` - Video Call
        * `group_voice` - Group Voice Call
        * `group_video` - Group Video Call
        * `live_stream` - Live Stream
    ChatCreate:
      type: object
      description: Secure serializer for creating chats with validation.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        description:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 70
        photo:
          type: string
          format: uri
          nullable: true
        is_public:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        linked_project:
          type: string
          format: uuid
          nullable: true
        linked_task:
          type: string
          format: uuid
          nullable: true
        linked_network:
          type: integer
          nullable: true
        ai_enabled:
          type: boolean
        has_calls_enabled:
          type: boolean
        slow_mode_delay:
          allOf:
          - $ref: '#/components/schemas/SlowModeDelayEnum'
          minimum: 0
          maximum: 9223372036854775807
        auto_delete_timer:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
      required:
      - id
    ChatCreateRequest:
      type: object
      description: Secure serializer for creating chats with validation.
      properties:
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        description:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 70
        photo:
          type: string
          format: binary
          nullable: true
        is_public:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        participants:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of user IDs to add as participants
        linked_project:
          type: string
          format: uuid
          nullable: true
        linked_task:
          type: string
          format: uuid
          nullable: true
        linked_network:
          type: integer
          nullable: true
        ai_enabled:
          type: boolean
        has_calls_enabled:
          type: boolean
        slow_mode_delay:
          allOf:
          - $ref: '#/components/schemas/SlowModeDelayEnum'
          minimum: 0
          maximum: 9223372036854775807
        auto_delete_timer:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
    ChatFolder:
      type: object
      description: Serializer for chat folders with validation.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        emoji:
          type: string
          maxLength: 10
        chats:
          type: array
          items:
            type: string
            format: uuid
        chats_count:
          type: string
          readOnly: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        include_private:
          type: boolean
        include_groups:
          type: boolean
        include_channels:
          type: boolean
        include_bots:
          type: boolean
        include_muted:
          type: boolean
        include_read:
          type: boolean
        include_archived:
          type: boolean
        contacts:
          type: array
          items:
            type: integer
        exclude_contacts:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - chats_count
      - created_at
      - id
      - name
    ChatFolderRequest:
      type: object
      description: Serializer for chat folders with validation.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        emoji:
          type: string
          maxLength: 10
        chats:
          type: array
          items:
            type: string
            format: uuid
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        include_private:
          type: boolean
        include_groups:
          type: boolean
        include_channels:
          type: boolean
        include_bots:
          type: boolean
        include_muted:
          type: boolean
        include_read:
          type: boolean
        include_archived:
          type: boolean
        contacts:
          type: array
          items:
            type: integer
        exclude_contacts:
          type: array
          items:
            type: integer
      required:
      - name
    ChatInviteLink:
      type: object
      description: Secure invite link serializer with access control.
      properties:
        id:
          type: integer
          readOnly: true
        link:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 32
        creator:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        expire_date:
          type: string
          format: date-time
          nullable: true
        member_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        creates_join_request:
          type: boolean
        is_primary:
          type: boolean
        is_revoked:
          type: boolean
        usage_count:
          type: integer
          readOnly: true
        pending_join_request_count:
          type: integer
          readOnly: true
        is_valid:
          type: string
          readOnly: true
        usage_stats:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - creator
      - id
      - is_valid
      - link
      - pending_join_request_count
      - usage_count
      - usage_stats
    ChatInviteLinkRequest:
      type: object
      description: Secure invite link serializer with access control.
      properties:
        name:
          type: string
          maxLength: 32
        expire_date:
          type: string
          format: date-time
          nullable: true
        member_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        creates_join_request:
          type: boolean
        is_primary:
          type: boolean
        is_revoked:
          type: boolean
    ChatList:
      type: object
      description: Optimized serializer for chat lists with minimal data.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        photo:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/Status270Enum'
        is_public:
          type: boolean
        is_verified:
          type: boolean
        is_muted:
          type: string
          readOnly: true
        participant_count:
          type: integer
          readOnly: true
        last_message:
          type: string
          readOnly: true
        last_activity:
          type: string
          format: date-time
          readOnly: true
        unread_count:
          type: string
          readOnly: true
        is_member:
          type: string
          readOnly: true
      required:
      - id
      - is_member
      - is_muted
      - last_activity
      - last_message
      - participant_count
      - unread_count
    ChatMessage:
      type: object
      description: Comprehensive message serializer with performance optimizations.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        type:
          $ref: '#/components/schemas/Type106Enum'
        content:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/ChatMessageStatusEnum'
          readOnly: true
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/ChatAttachment'
          readOnly: true
        reply_to:
          type: string
          readOnly: true
        forward_from:
          type: string
          readOnly: true
        has_media:
          type: boolean
        is_forwarded:
          type: boolean
        is_pinned:
          type: boolean
        is_silent:
          type: boolean
        is_scheduled:
          type: boolean
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        reactions: {}
        reactions_summary:
          type: string
          readOnly: true
        views_count:
          type: integer
          readOnly: true
        forwards_count:
          type: integer
          readOnly: true
        replies_count:
          type: integer
          readOnly: true
        is_edited:
          type: string
          readOnly: true
        edit_date:
          type: string
          format: date-time
          nullable: true
        can_edit:
          type: string
          readOnly: true
        can_delete:
          type: string
          readOnly: true
        read_by:
          type: string
          readOnly: true
        mentions:
          readOnly: true
        poll_data: {}
        location_data: {}
        contact_data: {}
        call_data: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - attachments
      - can_delete
      - can_edit
      - created_at
      - forward_from
      - forwards_count
      - id
      - is_edited
      - mentions
      - reactions_summary
      - read_by
      - replies_count
      - reply_to
      - sender
      - status
      - updated_at
      - views_count
    ChatMessageRequest:
      type: object
      description: Comprehensive message serializer with performance optimizations.
      properties:
        type:
          $ref: '#/components/schemas/Type106Enum'
        content:
          type: string
        has_media:
          type: boolean
        is_forwarded:
          type: boolean
        is_pinned:
          type: boolean
        is_silent:
          type: boolean
        is_scheduled:
          type: boolean
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        reactions: {}
        edit_date:
          type: string
          format: date-time
          nullable: true
        poll_data: {}
        location_data: {}
        contact_data: {}
        call_data: {}
    ChatMessageStatusEnum:
      enum:
      - sending
      - sent
      - received
      - read
      - edited
      - deleted
      - failed
      - scheduled
      type: string
      description: |-
        * `sending` - Sending
        * `sent` - Sent
        * `received` - Received
        * `read` - Read
        * `edited` - Edited
        * `deleted` - Deleted
        * `failed` - Failed
        * `scheduled` - Scheduled
    ChatParticipant:
      type: object
      description: Participant serializer with comprehensive permission handling.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        role:
          $ref: '#/components/schemas/ChatParticipantRoleEnum'
        status:
          $ref: '#/components/schemas/ChatParticipantStatusEnum'
        custom_title:
          type: string
          maxLength: 16
        is_admin:
          type: string
          readOnly: true
        is_moderator:
          type: string
          readOnly: true
        can_send_messages:
          type: boolean
        can_send_media:
          type: boolean
        can_send_stickers:
          type: boolean
        can_send_polls:
          type: boolean
        can_add_web_page_previews:
          type: boolean
        can_change_info:
          type: boolean
        can_invite_users:
          type: boolean
        can_pin_messages:
          type: boolean
        can_delete_messages:
          type: boolean
        can_ban_users:
          type: boolean
        can_restrict_members:
          type: boolean
        can_promote_members:
          type: boolean
        can_manage_calls:
          type: boolean
        is_anonymous:
          type: boolean
        notification_level:
          $ref: '#/components/schemas/NotificationLevelEnum'
        folder:
          type: string
          maxLength: 50
        unread_count:
          type: integer
          readOnly: true
        unread_mentions_count:
          type: integer
          readOnly: true
        is_typing:
          type: string
          readOnly: true
        is_muted:
          type: string
          readOnly: true
        is_banned:
          type: string
          readOnly: true
        is_restricted:
          type: string
          readOnly: true
        can_manage:
          type: string
          readOnly: true
        joined_at:
          type: string
          format: date-time
          readOnly: true
        last_read_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_activity_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - can_manage
      - is_admin
      - is_banned
      - is_moderator
      - is_muted
      - is_restricted
      - is_typing
      - joined_at
      - last_activity_at
      - last_read_at
      - unread_count
      - unread_mentions_count
      - user
    ChatParticipantRequest:
      type: object
      description: Participant serializer with comprehensive permission handling.
      properties:
        role:
          $ref: '#/components/schemas/ChatParticipantRoleEnum'
        status:
          $ref: '#/components/schemas/ChatParticipantStatusEnum'
        custom_title:
          type: string
          maxLength: 16
        can_send_messages:
          type: boolean
        can_send_media:
          type: boolean
        can_send_stickers:
          type: boolean
        can_send_polls:
          type: boolean
        can_add_web_page_previews:
          type: boolean
        can_change_info:
          type: boolean
        can_invite_users:
          type: boolean
        can_pin_messages:
          type: boolean
        can_delete_messages:
          type: boolean
        can_ban_users:
          type: boolean
        can_restrict_members:
          type: boolean
        can_promote_members:
          type: boolean
        can_manage_calls:
          type: boolean
        is_anonymous:
          type: boolean
        notification_level:
          $ref: '#/components/schemas/NotificationLevelEnum'
        folder:
          type: string
          maxLength: 50
    ChatParticipantRoleEnum:
      enum:
      - owner
      - admin
      - moderator
      - member
      - restricted
      - guest
      - bot
      type: string
      description: |-
        * `owner` - Owner
        * `admin` - Administrator
        * `moderator` - Moderator
        * `member` - Member
        * `restricted` - Restricted
        * `guest` - Guest
        * `bot` - Bot
    ChatParticipantStatusEnum:
      enum:
      - active
      - left
      - kicked
      - banned
      - restricted
      type: string
      description: |-
        * `active` - فعال
        * `left` - Left
        * `kicked` - Kicked
        * `banned` - Banned
        * `restricted` - Restricted
    ChatPoll:
      type: object
      description: Comprehensive poll serializer with voting logic.
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: string
          maxLength: 300
        type:
          $ref: '#/components/schemas/ChatPollTypeEnum'
        is_anonymous:
          type: boolean
        allows_multiple_answers:
          type: boolean
        is_closed:
          type: boolean
        correct_option_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        explanation:
          type: string
          maxLength: 200
        open_period:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        close_date:
          type: string
          format: date-time
          nullable: true
        total_voter_count:
          type: integer
          readOnly: true
        options:
          type: string
          readOnly: true
        user_vote:
          type: string
          readOnly: true
        results:
          type: string
          readOnly: true
        can_vote:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_vote
      - created_at
      - id
      - options
      - question
      - results
      - total_voter_count
      - user_vote
    ChatPollRequest:
      type: object
      description: Comprehensive poll serializer with voting logic.
      properties:
        question:
          type: string
          minLength: 1
          maxLength: 300
        type:
          $ref: '#/components/schemas/ChatPollTypeEnum'
        is_anonymous:
          type: boolean
        allows_multiple_answers:
          type: boolean
        is_closed:
          type: boolean
        correct_option_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        explanation:
          type: string
          maxLength: 200
        open_period:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        close_date:
          type: string
          format: date-time
          nullable: true
      required:
      - question
    ChatPollTypeEnum:
      enum:
      - regular
      - quiz
      type: string
      description: |-
        * `regular` - Regular Poll
        * `quiz` - Quiz
    ChatRequest:
      type: object
      description: Comprehensive chat serializer with optimized queries.
      properties:
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        description:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 70
        photo:
          type: string
          format: binary
          nullable: true
        photo_small:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status270Enum'
        is_public:
          type: boolean
        is_verified:
          type: boolean
        is_scam:
          type: boolean
        is_fake:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        slow_mode_delay:
          allOf:
          - $ref: '#/components/schemas/SlowModeDelayEnum'
          minimum: 0
          maximum: 9223372036854775807
        has_protected_content:
          type: boolean
        has_aggressive_anti_spam_enabled:
          type: boolean
        auto_delete_timer:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        invite_link:
          type: string
          nullable: true
          maxLength: 100
        is_encrypted:
          type: boolean
        linked_project:
          type: string
          format: uuid
          nullable: true
        linked_task:
          type: string
          format: uuid
          nullable: true
        linked_network:
          type: integer
          nullable: true
        ai_enabled:
          type: boolean
        has_calls_enabled:
          type: boolean
        has_video_calls_enabled:
          type: boolean
        has_group_calls_enabled:
          type: boolean
        theme: {}
        wallpaper:
          type: string
          format: binary
          nullable: true
    ChatStickerSet:
      type: object
      description: Sticker set serializer with installation tracking.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 64
        title:
          type: string
          maxLength: 64
        type:
          $ref: '#/components/schemas/ChatStickerSetTypeEnum'
        creator:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        thumb:
          type: string
          format: uri
          nullable: true
        is_official:
          type: boolean
        is_masks:
          type: boolean
        is_premium:
          type: boolean
        install_count:
          type: integer
          readOnly: true
        stickers_count:
          type: string
          readOnly: true
        is_installed:
          type: string
          readOnly: true
        preview_stickers:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - creator
      - id
      - install_count
      - is_installed
      - name
      - preview_stickers
      - stickers_count
      - title
    ChatStickerSetRequest:
      type: object
      description: Sticker set serializer with installation tracking.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 64
        title:
          type: string
          minLength: 1
          maxLength: 64
        type:
          $ref: '#/components/schemas/ChatStickerSetTypeEnum'
        thumb:
          type: string
          format: binary
          nullable: true
        is_official:
          type: boolean
        is_masks:
          type: boolean
        is_premium:
          type: boolean
      required:
      - name
      - title
    ChatStickerSetTypeEnum:
      enum:
      - static
      - animated
      - video
      type: string
      description: |-
        * `static` - Static
        * `animated` - Animated
        * `video` - Video
    ChatTheme:
      type: object
      description: Chat theme serializer with validation.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        title:
          type: string
          maxLength: 100
        accent_color:
          type: string
          maxLength: 7
        background_color:
          type: string
          maxLength: 7
        text_color:
          type: string
          maxLength: 7
        background_image:
          type: string
          format: uri
          nullable: true
        pattern_image:
          type: string
          format: uri
          nullable: true
        is_dark:
          type: boolean
        is_premium:
          type: boolean
        is_default:
          type: boolean
        is_using:
          type: string
          readOnly: true
        settings: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - accent_color
      - created_at
      - id
      - is_using
      - name
      - title
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        parent:
          type: integer
          nullable: true
        text:
          type: string
        media:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content_type
      - created_at
      - id
      - object_id
      - parent
      - text
      - updated_at
      - user
    CommentRequest:
      type: object
      properties:
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        parent:
          type: integer
          nullable: true
        text:
          type: string
          minLength: 1
        media:
          type: string
          format: binary
          nullable: true
      required:
      - content_type
      - object_id
      - parent
      - text
    Connection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        from_user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        to_user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        status:
          $ref: '#/components/schemas/ConnectionStatusEnum'
        message:
          type: string
          maxLength: 300
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - from_user
      - id
      - to_user
      - updated_at
    ConnectionRequestRequest:
      type: object
      properties:
        to_user:
          type: integer
        message:
          type: string
          maxLength: 300
      required:
      - to_user
    ConnectionStatusEnum:
      enum:
      - pending
      - accepted
      - declined
      - blocked
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `declined` - Declined
        * `blocked` - Blocked
    CoverImageUploadRequest:
      type: object
      properties:
        cover_image:
          type: string
          format: binary
      required:
      - cover_image
    CurrencyEnum:
      enum:
      - IRR
      - USD
      - EUR
      type: string
      description: |-
        * `IRR` - ریال
        * `USD` - US Dollar
        * `EUR` - Euro
    DateFormatEnum:
      enum:
      - MM/DD/YYYY
      - DD/MM/YYYY
      - YYYY-MM-DD
      type: string
      description: |-
        * `MM/DD/YYYY` - MM/DD/YYYY
        * `DD/MM/YYYY` - DD/MM/YYYY
        * `YYYY-MM-DD` - YYYY-MM-DD
    Education:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        institution:
          type: string
          maxLength: 200
        degree:
          type: string
          maxLength: 100
        field_of_study:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        gpa:
          type: string
          maxLength: 10
        description:
          type: string
        achievements: {}
        activities: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - degree
      - field_of_study
      - id
      - institution
      - start_date
      - updated_at
    EducationRequest:
      type: object
      properties:
        institution:
          type: string
          minLength: 1
          maxLength: 200
        degree:
          type: string
          minLength: 1
          maxLength: 100
        field_of_study:
          type: string
          minLength: 1
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        gpa:
          type: string
          maxLength: 10
        description:
          type: string
        achievements: {}
        activities: {}
      required:
      - degree
      - field_of_study
      - institution
      - start_date
    EventAnalytics:
      type: object
      description: Serializer for event analytics with computed metrics.
      properties:
        id:
          type: integer
          readOnly: true
        total_registrations:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        confirmed_registrations:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        cancelled_registrations:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        waitlist_registrations:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        total_attendance:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        attendance_rate:
          type: number
          format: double
        no_show_rate:
          type: number
          format: double
        early_departure_rate:
          type: number
          format: double
        avg_session_attendance:
          type: number
          format: double
          title: Average Session Attendance
        session_completion_rate:
          type: number
          format: double
        networking_connections:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        chat_messages:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        total_sessions:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        avg_session_rating:
          type: number
          format: double
          title: Average Session Rating
        total_exhibitors:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        total_products:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        total_revenue:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        avg_ticket_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Average Ticket Price
        sponsorship_revenue:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        top_countries: {}
        top_cities: {}
        device_breakdown: {}
        browser_breakdown: {}
        peak_attendance_time:
          type: string
          format: date-time
          nullable: true
        avg_session_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          title: Average Session Duration
          description: in minutes
        overall_satisfaction:
          type: number
          format: double
        nps_score:
          type: number
          format: double
        recommendation_rate:
          type: number
          format: double
        last_calculated:
          type: string
          format: date-time
          readOnly: true
        engagement_rate:
          type: string
          readOnly: true
        popular_sessions:
          type: string
          readOnly: true
      required:
      - engagement_rate
      - id
      - last_calculated
      - popular_sessions
    EventBadge:
      type: object
      description: Serializer for event badges.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Badge Name
          maxLength: 100
        description:
          type: string
          title: توضیحات
        icon:
          type: string
          format: uri
          nullable: true
        icon_url:
          type: string
          nullable: true
          description: Get badge icon URL.
          readOnly: true
        color:
          type: string
          maxLength: 7
        criteria: {}
        points_required:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - icon_url
      - id
      - name
    EventCategory:
      type: object
      description: Serializer for event categories with hierarchical support.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: نام
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          title: توضیحات
        icon:
          type: string
          description: FontAwesome icon class
          maxLength: 50
        color:
          type: string
          maxLength: 7
        is_active:
          type: boolean
        parent:
          type: integer
          nullable: true
        parent_name:
          type: string
          readOnly: true
        level:
          type: integer
          readOnly: true
        children:
          type: string
          readOnly: true
        event_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - children
      - created_at
      - event_count
      - id
      - level
      - name
      - parent_name
      - slug
    EventCreateUpdate:
      type: object
      description: Serializer for creating and updating events with comprehensive
        validation.
      properties:
        name:
          type: string
          title: Event Name
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
          description: Plain text for search
        type:
          allOf:
          - $ref: '#/components/schemas/Type410Enum'
          title: Event Type
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        timezone:
          type: string
          maxLength: 50
        location:
          type: string
          title: مکان
          maxLength: 200
        venue_name:
          type: string
          maxLength: 200
        address:
          type: string
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: uri
          nullable: true
        banner:
          type: string
          format: uri
          nullable: true
        venue_map:
          type: string
          format: uri
          nullable: true
        is_free:
          type: boolean
        currency:
          type: string
          maxLength: 3
        registration_start:
          type: string
          format: date-time
          nullable: true
        registration_end:
          type: string
          format: date-time
          nullable: true
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
      required:
      - end_date
      - name
      - start_date
    EventCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating events with comprehensive
        validation.
      properties:
        name:
          type: string
          minLength: 1
          title: Event Name
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
          description: Plain text for search
        type:
          allOf:
          - $ref: '#/components/schemas/Type410Enum'
          title: Event Type
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        timezone:
          type: string
          minLength: 1
          maxLength: 50
        location:
          type: string
          title: مکان
          maxLength: 200
        venue_name:
          type: string
          maxLength: 200
        address:
          type: string
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: binary
          nullable: true
        banner:
          type: string
          format: binary
          nullable: true
        venue_map:
          type: string
          format: binary
          nullable: true
        is_free:
          type: boolean
        currency:
          type: string
          minLength: 1
          maxLength: 3
        registration_start:
          type: string
          format: date-time
          nullable: true
        registration_end:
          type: string
          format: date-time
          nullable: true
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        category_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of category IDs
        tag_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of tag IDs
        co_organizer_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of co-organizer user IDs
      required:
      - end_date
      - name
      - start_date
    EventDetail:
      type: object
      description: Comprehensive serializer for event detail views.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          title: Event Name
          maxLength: 300
        slug:
          type: string
          maxLength: 300
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
          description: Plain text for search
        type:
          allOf:
          - $ref: '#/components/schemas/Type410Enum'
          title: Event Type
        status:
          allOf:
          - $ref: '#/components/schemas/StatusD8dEnum'
          title: وضعیت
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        timezone:
          type: string
          maxLength: 50
        location:
          type: string
          title: مکان
          maxLength: 200
        venue_name:
          type: string
          maxLength: 200
        address:
          type: string
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        logo_url:
          type: string
          nullable: true
          description: Get event logo URL.
          readOnly: true
        banner_url:
          type: string
          nullable: true
          description: Get event banner URL.
          readOnly: true
        venue_map_url:
          type: string
          nullable: true
          description: Get venue map URL.
          readOnly: true
        organizer:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        co_organizers:
          type: array
          items:
            $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/EventCategory'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EventTag'
          readOnly: true
        is_free:
          type: boolean
        currency:
          type: string
          maxLength: 3
        registration_start:
          type: string
          format: date-time
          nullable: true
        registration_end:
          type: string
          format: date-time
          nullable: true
        is_featured:
          type: boolean
        is_favorited:
          type: boolean
          description: Check if current user has favorited this event.
          readOnly: true
        registration_status:
          type: string
          description: Get registration status for the event.
          readOnly: true
        can_edit:
          type: boolean
          description: Check if current user can edit this event.
          readOnly: true
        can_moderate:
          type: boolean
          description: Check if current user can moderate this event.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        participant_count:
          type: integer
          description: Get current participant count.
          readOnly: true
        spots_remaining:
          type: number
          format: double
          description: Get remaining spots for registration.
          readOnly: true
      required:
      - banner_url
      - can_edit
      - can_moderate
      - categories
      - co_organizers
      - created_at
      - end_date
      - id
      - is_favorited
      - logo_url
      - name
      - organizer
      - participant_count
      - registration_status
      - slug
      - spots_remaining
      - start_date
      - tags
      - updated_at
      - venue_map_url
    EventList:
      type: object
      description: Optimized serializer for event list views.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          title: Event Name
          maxLength: 300
        slug:
          type: string
          maxLength: 300
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        type:
          allOf:
          - $ref: '#/components/schemas/Type410Enum'
          title: Event Type
        status:
          allOf:
          - $ref: '#/components/schemas/StatusD8dEnum'
          title: وضعیت
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        timezone:
          type: string
          maxLength: 50
        logo_url:
          type: string
          readOnly: true
        banner_url:
          type: string
          readOnly: true
        organizer:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/EventCategory'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EventTag'
          readOnly: true
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        participant_count:
          type: string
          readOnly: true
        is_free:
          type: boolean
        currency:
          type: string
          maxLength: 3
        is_featured:
          type: boolean
        is_favorited:
          type: string
          readOnly: true
        registration_status:
          type: string
          readOnly: true
        upcoming_session:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - banner_url
      - categories
      - created_at
      - end_date
      - id
      - is_favorited
      - logo_url
      - name
      - organizer
      - participant_count
      - registration_status
      - slug
      - start_date
      - tags
      - upcoming_session
    EventTag:
      type: object
      description: Serializer for event tags.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: نام
          maxLength: 50
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          title: توضیحات
        color:
          type: string
          maxLength: 7
        event_count:
          type: string
          readOnly: true
        trending_score:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - event_count
      - id
      - name
      - slug
      - trending_score
    Exhibitor:
      type: object
      description: Comprehensive serializer for exhibitors.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        event:
          type: string
          format: uuid
        company_name:
          type: string
          maxLength: 200
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        banner:
          type: string
          format: uri
          nullable: true
        gallery: {}
        logo_url:
          type: string
          nullable: true
          description: Get exhibitor logo URL.
          readOnly: true
        banner_url:
          type: string
          nullable: true
          description: Get exhibitor banner URL.
          readOnly: true
        booth_number:
          type: string
          maxLength: 50
        booth_size:
          type: string
          maxLength: 50
        booth_location:
          type: string
          maxLength: 100
        booth_map_coordinates: {}
        website:
          type: string
          format: uri
          maxLength: 200
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_links: {}
        primary_contact:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        representatives:
          type: array
          items:
            type: integer
        sponsorship_tier:
          $ref: '#/components/schemas/SponsorshipTierEnum'
        sponsorship_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sponsorship_benefits: {}
        status:
          allOf:
          - $ref: '#/components/schemas/ExhibitorStatusEnum'
          title: وضعیت
        view_count:
          type: integer
          readOnly: true
        connection_count:
          type: integer
          readOnly: true
        lead_count:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductMinimal'
          readOnly: true
        product_count:
          type: integer
          description: Get count of exhibitor's products.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        approved_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - approved_at
      - banner_url
      - company_name
      - connection_count
      - created_at
      - event
      - id
      - lead_count
      - logo_url
      - primary_contact
      - product_count
      - products
      - slug
      - updated_at
      - view_count
    ExhibitorRequest:
      type: object
      description: Comprehensive serializer for exhibitors.
      properties:
        event:
          type: string
          format: uuid
        company_name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        logo:
          type: string
          format: binary
          nullable: true
        banner:
          type: string
          format: binary
          nullable: true
        gallery: {}
        booth_number:
          type: string
          maxLength: 50
        booth_size:
          type: string
          maxLength: 50
        booth_location:
          type: string
          maxLength: 100
        booth_map_coordinates: {}
        website:
          type: string
          format: uri
          maxLength: 200
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_links: {}
        representatives:
          type: array
          items:
            type: integer
        sponsorship_tier:
          $ref: '#/components/schemas/SponsorshipTierEnum'
        sponsorship_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sponsorship_benefits: {}
        status:
          allOf:
          - $ref: '#/components/schemas/ExhibitorStatusEnum'
          title: وضعیت
      required:
      - company_name
      - event
    ExhibitorStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      - cancelled
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
        * `cancelled` - Cancelled
    Experience:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        company:
          type: string
          maxLength: 100
        company_url:
          type: string
          format: uri
          maxLength: 200
        location:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        achievements: {}
        type:
          $ref: '#/components/schemas/ExperienceTypeEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - company
      - created_at
      - id
      - start_date
      - title
      - updated_at
    ExperienceRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        company:
          type: string
          minLength: 1
          maxLength: 100
        company_url:
          type: string
          format: uri
          maxLength: 200
        location:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        achievements: {}
        type:
          $ref: '#/components/schemas/ExperienceTypeEnum'
      required:
      - company
      - start_date
      - title
    ExperienceTypeEnum:
      enum:
      - work
      - internship
      - volunteer
      - freelance
      type: string
      description: |-
        * `work` - Work
        * `internship` - Internship
        * `volunteer` - Volunteer
        * `freelance` - Freelance
    Feedback:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        feedback_type:
          allOf:
          - $ref: '#/components/schemas/FeedbackTypeEnum'
          description: |-
            Type of feedback.

            * `BUG` - Bug Report
            * `FEATURE` - Feature Request
            * `SUPPORT` - Support Request
            * `OTHER` - Other
        status:
          allOf:
          - $ref: '#/components/schemas/FeedbackStatusEnum'
          readOnly: true
          description: |-
            Current status of the feedback.

            * `NEW` - New
            * `IN_PROGRESS` - In Progress
            * `RESOLVED` - Resolved
            * `CLOSED` - Closed
        title:
          type: string
          description: Short title or summary of the feedback.
          maxLength: 255
        description:
          type: string
          description: Detailed description of the feedback.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        metadata:
          readOnly: true
          description: Additional metadata (e.g., browser info, page URL).
      required:
      - created_at
      - description
      - id
      - metadata
      - status
      - title
      - updated_at
      - user
    FeedbackRequest:
      type: object
      properties:
        feedback_type:
          allOf:
          - $ref: '#/components/schemas/FeedbackTypeEnum'
          description: |-
            Type of feedback.

            * `BUG` - Bug Report
            * `FEATURE` - Feature Request
            * `SUPPORT` - Support Request
            * `OTHER` - Other
        title:
          type: string
          minLength: 1
          description: Short title or summary of the feedback.
          maxLength: 255
        description:
          type: string
          minLength: 1
          description: Detailed description of the feedback.
      required:
      - description
      - title
    FeedbackStatusEnum:
      enum:
      - NEW
      - IN_PROGRESS
      - RESOLVED
      - CLOSED
      type: string
      description: |-
        * `NEW` - New
        * `IN_PROGRESS` - In Progress
        * `RESOLVED` - Resolved
        * `CLOSED` - Closed
    FeedbackTypeEnum:
      enum:
      - BUG
      - FEATURE
      - SUPPORT
      - OTHER
      type: string
      description: |-
        * `BUG` - Bug Report
        * `FEATURE` - Feature Request
        * `SUPPORT` - Support Request
        * `OTHER` - Other
    FileTypeEnum:
      enum:
      - resume
      - portfolio
      - certificate
      - document
      - other
      type: string
      description: |-
        * `resume` - Resume
        * `portfolio` - Portfolio
        * `certificate` - Certificate
        * `document` - Document
        * `other` - Other
    FileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        name:
          type: string
          minLength: 1
          maxLength: 200
        file_type:
          $ref: '#/components/schemas/FileTypeEnum'
        description:
          type: string
        is_public:
          type: boolean
      required:
      - file
      - name
    Follow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        following:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - follower
      - following
      - id
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          description: Email address to send password reset link
      required:
      - email
    Language:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        code:
          type: string
          maxLength: 10
        proficiency:
          $ref: '#/components/schemas/ProficiencyEnum'
        certifications: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - code
      - created_at
      - id
      - name
      - proficiency
    LanguageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        code:
          type: string
          minLength: 1
          maxLength: 10
        proficiency:
          $ref: '#/components/schemas/ProficiencyEnum'
        certifications: {}
      required:
      - code
      - name
      - proficiency
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Username to authenticate with
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
          description: Password for authentication
          maxLength: 128
      required:
      - password
      - username
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        subject:
          type: string
          maxLength: 200
        content:
          type: string
        status:
          $ref: '#/components/schemas/MessageStatusEnum'
        attachment:
          type: string
          format: uri
          nullable: true
        parent:
          type: string
          format: uuid
          nullable: true
        replies:
          type: string
          readOnly: true
        read_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - recipient
      - replies
      - sender
    MessageCreate:
      type: object
      description: Secure message creation serializer with comprehensive validation.
      properties:
        type:
          $ref: '#/components/schemas/Type106Enum'
        content:
          type: string
        is_silent:
          type: boolean
        is_scheduled:
          type: boolean
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        poll_data: {}
        location_data: {}
        contact_data: {}
    MessageCreateRequest:
      type: object
      description: Secure message creation serializer with comprehensive validation.
      properties:
        type:
          $ref: '#/components/schemas/Type106Enum'
        content:
          type: string
        reply_to_id:
          type: string
          format: uuid
          writeOnly: true
        mention_user_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of user IDs to mention
        is_silent:
          type: boolean
        is_scheduled:
          type: boolean
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        poll_data: {}
        location_data: {}
        contact_data: {}
        attachment_files:
          type: array
          items:
            type: string
            format: binary
          writeOnly: true
          description: List of files to attach (max 10)
          maxItems: 10
    MessageRequest:
      type: object
      properties:
        subject:
          type: string
          maxLength: 200
        content:
          type: string
          minLength: 1
        status:
          $ref: '#/components/schemas/MessageStatusEnum'
        attachment:
          type: string
          format: binary
          nullable: true
        parent:
          type: string
          format: uuid
          nullable: true
        read_at:
          type: string
          format: date-time
          nullable: true
      required:
      - content
    MessageStatusEnum:
      enum:
      - sent
      - delivered
      - read
      type: string
      description: |-
        * `sent` - Sent
        * `delivered` - Delivered
        * `read` - Read
    Network:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        industry:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        website:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: uri
          nullable: true
        is_verified:
          type: boolean
        is_public:
          type: boolean
        member_count:
          type: integer
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        admins:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - admins
      - created_at
      - created_by
      - id
      - member_count
      - name
      - updated_at
    NetworkMembership:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        network:
          allOf:
          - $ref: '#/components/schemas/Network'
          readOnly: true
        status:
          $ref: '#/components/schemas/NetworkMembershipStatusEnum'
        role:
          type: string
          maxLength: 50
        joined_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - joined_at
      - network
      - updated_at
      - user
    NetworkMembershipStatusEnum:
      enum:
      - pending
      - active
      - inactive
      - banned
      type: string
      description: |-
        * `pending` - Pending
        * `active` - فعال
        * `inactive` - Inactive
        * `banned` - Banned
    NetworkRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        industry:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        website:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: binary
          nullable: true
        is_verified:
          type: boolean
        is_public:
          type: boolean
      required:
      - name
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        title:
          type: string
          maxLength: 200
        message:
          type: string
        data: {}
        is_read:
          type: boolean
        read_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - message
      - notification_type
      - sender
      - title
    NotificationBatch:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        batch_id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the batch.
        description:
          type: string
          description: Description of the batch (e.g., 'Welcome campaign').
          maxLength: 255
        created_by:
          type: integer
          nullable: true
          description: User who initiated the batch.
        created_at:
          type: string
          format: date-time
          readOnly: true
        notification_count:
          type: integer
          readOnly: true
      required:
      - batch_id
      - created_at
      - description
      - id
      - notification_count
    NotificationBatchRequest:
      type: object
      properties:
        description:
          type: string
          minLength: 1
          description: Description of the batch (e.g., 'Welcome campaign').
          maxLength: 255
        created_by:
          type: integer
          nullable: true
          description: User who initiated the batch.
      required:
      - description
    NotificationLevelEnum:
      enum:
      - all
      - mentions
      - disabled
      type: string
      description: |-
        * `all` - All Messages
        * `mentions` - Mentions Only
        * `disabled` - Disabled
    NotificationRequest:
      type: object
      properties:
        template:
          type: integer
          nullable: true
          description: Optional template used for this notification.
        message:
          type: string
          minLength: 1
          description: Rendered notification message.
        subject:
          type: string
          description: Subject for email notifications.
          maxLength: 255
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityCe3Enum'
          description: |-
            Priority level of the notification.

            * `LOW` - Low
            * `MED` - Medium
            * `HIGH` - High
        channels:
          description: List of delivery channels (e.g., ['IN_APP', 'EMAIL']).
        category:
          type: string
          description: Category for grouping notifications (e.g., 'system', 'marketing').
          maxLength: 50
        metadata:
          description: 'Custom metadata (e.g., {''link'': ''/dashboard'', ''action'':
            ''view''}).'
        is_read:
          type: boolean
          description: Whether the notification has been read (in-app).
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: Optional expiration date for the notification.
      required:
      - message
    NotificationTemplate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Unique name for the template (e.g., 'welcome_message').
          maxLength: 100
        category:
          type: string
          description: Category for grouping templates (e.g., 'system', 'marketing').
          maxLength: 50
        subject:
          type: string
          description: Subject for email notifications.
          maxLength: 255
        message:
          type: string
          description: Template message with placeholders (e.g., {username}).
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - message
      - name
      - updated_at
    NotificationTemplateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Unique name for the template (e.g., 'welcome_message').
          maxLength: 100
        category:
          type: string
          description: Category for grouping templates (e.g., 'system', 'marketing').
          maxLength: 50
        subject:
          type: string
          description: Subject for email notifications.
          maxLength: 255
        message:
          type: string
          minLength: 1
          description: Template message with placeholders (e.g., {username}).
      required:
      - message
      - name
    NotificationTypeEnum:
      enum:
      - connection_request
      - connection_accepted
      - skill_endorsement
      - profile_view
      - message
      - recommendation
      - recommendation_received
      - recommendation_approved
      - recommendation_declined
      - recommendation_request
      - task_assigned
      - task_completed
      - project_invitation
      - network_invitation
      type: string
      description: |-
        * `connection_request` - Connection Request
        * `connection_accepted` - Connection Accepted
        * `skill_endorsement` - Skill Endorsement
        * `profile_view` - Profile View
        * `message` - New Message
        * `recommendation` - Recommendation
        * `recommendation_received` - Recommendation Received
        * `recommendation_approved` - Recommendation Approved
        * `recommendation_declined` - Recommendation Declined
        * `recommendation_request` - Recommendation Request
        * `task_assigned` - Task Assigned
        * `task_completed` - Task Completed
        * `project_invitation` - Project Invitation
        * `network_invitation` - Network Invitation
    OnlineStatus:
      type: object
      properties:
        is_online:
          type: boolean
        last_seen:
          type: string
          format: date-time
          readOnly: true
      required:
      - is_online
      - last_seen
    PaginatedAchievementList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
    PaginatedAuditLogList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
    PaginatedCertificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
    PaginatedChatListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatList'
    PaginatedChatMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
    PaginatedConnectionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
    PaginatedEducationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Education'
    PaginatedEventListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EventList'
    PaginatedExperienceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
    PaginatedLanguageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Language'
    PaginatedMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PaginatedNetworkList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Network'
    PaginatedNetworkMembershipList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/NetworkMembership'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedParticipantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
    PaginatedProjectImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectImage'
    PaginatedProjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedPublicationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Publication'
    PaginatedRecommendationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
    PaginatedResumeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Resume'
    PaginatedSessionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    PaginatedSkillEndorsementList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SkillEndorsement'
    PaginatedSkillList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
    PaginatedTaskCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'
    PaginatedTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    PaginatedUserBasicList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedVolunteerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Volunteer'
    Participant:
      type: object
      description: Comprehensive serializer for event participants.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        event:
          type: string
          format: uuid
        event_title:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/ParticipantRoleEnum'
        registration_status:
          $ref: '#/components/schemas/RegistrationStatusEnum'
        attendance_status:
          $ref: '#/components/schemas/AttendanceStatusEnum'
        registration_data: {}
        check_in_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        check_out_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        notes:
          type: string
        badges:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Get participant's earned badges.
          readOnly: true
        sessions_count:
          type: integer
          description: Get count of sessions participant is registered for.
          readOnly: true
        attendance_rate:
          type: number
          format: double
          description: Calculate participant's attendance rate.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - attendance_rate
      - badges
      - check_in_time
      - check_out_time
      - event
      - event_title
      - id
      - sessions_count
      - updated_at
      - user
    ParticipantBadge:
      type: object
      description: Serializer for participant badges.
      properties:
        id:
          type: integer
          readOnly: true
        participant:
          type: integer
        participant_name:
          type: string
          description: Get participant's display name.
          readOnly: true
        badge:
          allOf:
          - $ref: '#/components/schemas/EventBadge'
          readOnly: true
        earned_at:
          type: string
          format: date-time
          readOnly: true
        reason:
          type: string
      required:
      - badge
      - earned_at
      - id
      - participant
      - participant_name
    ParticipantRequest:
      type: object
      description: Comprehensive serializer for event participants.
      properties:
        event:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/ParticipantRoleEnum'
        registration_status:
          $ref: '#/components/schemas/RegistrationStatusEnum'
        attendance_status:
          $ref: '#/components/schemas/AttendanceStatusEnum'
        registration_data: {}
        notes:
          type: string
      required:
      - event
    ParticipantRoleEnum:
      enum:
      - attendee
      - speaker
      - moderator
      - organizer
      - co_organizer
      - sponsor
      - exhibitor
      - volunteer
      - media
      - vip
      type: string
      description: |-
        * `attendee` - Attendee
        * `speaker` - Speaker
        * `moderator` - Moderator
        * `organizer` - Organizer
        * `co_organizer` - Co-organizer
        * `sponsor` - Sponsor
        * `exhibitor` - Exhibitor
        * `volunteer` - Volunteer
        * `media` - Media
        * `vip` - VIP
    PasswordChangeRequest:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 8
        confirm_password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - confirm_password
      - new_password
      - old_password
    PatchedAchievementRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        issuer:
          type: string
          maxLength: 200
        date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/AchievementCategoryEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        image:
          type: string
          format: binary
          nullable: true
    PatchedActionRequest:
      type: object
      properties:
        action_type:
          type: string
          minLength: 1
          maxLength: 100
        metadata: {}
    PatchedCertificationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        issuer:
          type: string
          minLength: 1
          maxLength: 200
        issue_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
          nullable: true
        credential_id:
          type: string
          maxLength: 100
        credential_url:
          type: string
          format: uri
          maxLength: 200
        description:
          type: string
        skills: {}
    PatchedChatCallRequest:
      type: object
      description: Serializer for chat calls with participant management.
      properties:
        type:
          $ref: '#/components/schemas/ChatCallTypeEnum'
        status:
          $ref: '#/components/schemas/ChatCallStatusEnum'
        max_participants:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        quality_rating:
          type: number
          format: double
          maximum: 5.0
          minimum: 1.0
          nullable: true
        is_recorded:
          type: boolean
        recording_file:
          type: string
          format: binary
          nullable: true
        is_video_disabled:
          type: boolean
        is_screen_sharing:
          type: boolean
    PatchedChatFolderRequest:
      type: object
      description: Serializer for chat folders with validation.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        emoji:
          type: string
          maxLength: 10
        chats:
          type: array
          items:
            type: string
            format: uuid
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        include_private:
          type: boolean
        include_groups:
          type: boolean
        include_channels:
          type: boolean
        include_bots:
          type: boolean
        include_muted:
          type: boolean
        include_read:
          type: boolean
        include_archived:
          type: boolean
        contacts:
          type: array
          items:
            type: integer
        exclude_contacts:
          type: array
          items:
            type: integer
    PatchedChatInviteLinkRequest:
      type: object
      description: Secure invite link serializer with access control.
      properties:
        name:
          type: string
          maxLength: 32
        expire_date:
          type: string
          format: date-time
          nullable: true
        member_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        creates_join_request:
          type: boolean
        is_primary:
          type: boolean
        is_revoked:
          type: boolean
    PatchedChatMessageRequest:
      type: object
      description: Comprehensive message serializer with performance optimizations.
      properties:
        type:
          $ref: '#/components/schemas/Type106Enum'
        content:
          type: string
        has_media:
          type: boolean
        is_forwarded:
          type: boolean
        is_pinned:
          type: boolean
        is_silent:
          type: boolean
        is_scheduled:
          type: boolean
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        reactions: {}
        edit_date:
          type: string
          format: date-time
          nullable: true
        poll_data: {}
        location_data: {}
        contact_data: {}
        call_data: {}
    PatchedChatParticipantRequest:
      type: object
      description: Participant serializer with comprehensive permission handling.
      properties:
        role:
          $ref: '#/components/schemas/ChatParticipantRoleEnum'
        status:
          $ref: '#/components/schemas/ChatParticipantStatusEnum'
        custom_title:
          type: string
          maxLength: 16
        can_send_messages:
          type: boolean
        can_send_media:
          type: boolean
        can_send_stickers:
          type: boolean
        can_send_polls:
          type: boolean
        can_add_web_page_previews:
          type: boolean
        can_change_info:
          type: boolean
        can_invite_users:
          type: boolean
        can_pin_messages:
          type: boolean
        can_delete_messages:
          type: boolean
        can_ban_users:
          type: boolean
        can_restrict_members:
          type: boolean
        can_promote_members:
          type: boolean
        can_manage_calls:
          type: boolean
        is_anonymous:
          type: boolean
        notification_level:
          $ref: '#/components/schemas/NotificationLevelEnum'
        folder:
          type: string
          maxLength: 50
    PatchedChatPollRequest:
      type: object
      description: Comprehensive poll serializer with voting logic.
      properties:
        question:
          type: string
          minLength: 1
          maxLength: 300
        type:
          $ref: '#/components/schemas/ChatPollTypeEnum'
        is_anonymous:
          type: boolean
        allows_multiple_answers:
          type: boolean
        is_closed:
          type: boolean
        correct_option_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        explanation:
          type: string
          maxLength: 200
        open_period:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        close_date:
          type: string
          format: date-time
          nullable: true
    PatchedChatRequest:
      type: object
      description: Comprehensive chat serializer with optimized queries.
      properties:
        type:
          $ref: '#/components/schemas/TypeEc7Enum'
        name:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 32
        description:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 70
        photo:
          type: string
          format: binary
          nullable: true
        photo_small:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status270Enum'
        is_public:
          type: boolean
        is_verified:
          type: boolean
        is_scam:
          type: boolean
        is_fake:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        slow_mode_delay:
          allOf:
          - $ref: '#/components/schemas/SlowModeDelayEnum'
          minimum: 0
          maximum: 9223372036854775807
        has_protected_content:
          type: boolean
        has_aggressive_anti_spam_enabled:
          type: boolean
        auto_delete_timer:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        invite_link:
          type: string
          nullable: true
          maxLength: 100
        is_encrypted:
          type: boolean
        linked_project:
          type: string
          format: uuid
          nullable: true
        linked_task:
          type: string
          format: uuid
          nullable: true
        linked_network:
          type: integer
          nullable: true
        ai_enabled:
          type: boolean
        has_calls_enabled:
          type: boolean
        has_video_calls_enabled:
          type: boolean
        has_group_calls_enabled:
          type: boolean
        theme: {}
        wallpaper:
          type: string
          format: binary
          nullable: true
    PatchedCommentRequest:
      type: object
      properties:
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        parent:
          type: integer
          nullable: true
        text:
          type: string
          minLength: 1
        media:
          type: string
          format: binary
          nullable: true
    PatchedEducationRequest:
      type: object
      properties:
        institution:
          type: string
          minLength: 1
          maxLength: 200
        degree:
          type: string
          minLength: 1
          maxLength: 100
        field_of_study:
          type: string
          minLength: 1
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        gpa:
          type: string
          maxLength: 10
        description:
          type: string
        achievements: {}
        activities: {}
    PatchedEventCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating events with comprehensive
        validation.
      properties:
        name:
          type: string
          minLength: 1
          title: Event Name
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
          description: Plain text for search
        type:
          allOf:
          - $ref: '#/components/schemas/Type410Enum'
          title: Event Type
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        timezone:
          type: string
          minLength: 1
          maxLength: 50
        location:
          type: string
          title: مکان
          maxLength: 200
        venue_name:
          type: string
          maxLength: 200
        address:
          type: string
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: binary
          nullable: true
        banner:
          type: string
          format: binary
          nullable: true
        venue_map:
          type: string
          format: binary
          nullable: true
        is_free:
          type: boolean
        currency:
          type: string
          minLength: 1
          maxLength: 3
        registration_start:
          type: string
          format: date-time
          nullable: true
        registration_end:
          type: string
          format: date-time
          nullable: true
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        category_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of category IDs
        tag_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of tag IDs
        co_organizer_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of co-organizer user IDs
    PatchedExhibitorRequest:
      type: object
      description: Comprehensive serializer for exhibitors.
      properties:
        event:
          type: string
          format: uuid
        company_name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        logo:
          type: string
          format: binary
          nullable: true
        banner:
          type: string
          format: binary
          nullable: true
        gallery: {}
        booth_number:
          type: string
          maxLength: 50
        booth_size:
          type: string
          maxLength: 50
        booth_location:
          type: string
          maxLength: 100
        booth_map_coordinates: {}
        website:
          type: string
          format: uri
          maxLength: 200
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_links: {}
        representatives:
          type: array
          items:
            type: integer
        sponsorship_tier:
          $ref: '#/components/schemas/SponsorshipTierEnum'
        sponsorship_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sponsorship_benefits: {}
        status:
          allOf:
          - $ref: '#/components/schemas/ExhibitorStatusEnum'
          title: وضعیت
    PatchedExperienceRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        company:
          type: string
          minLength: 1
          maxLength: 100
        company_url:
          type: string
          format: uri
          maxLength: 200
        location:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        achievements: {}
        type:
          $ref: '#/components/schemas/ExperienceTypeEnum'
    PatchedFeedbackRequest:
      type: object
      properties:
        feedback_type:
          allOf:
          - $ref: '#/components/schemas/FeedbackTypeEnum'
          description: |-
            Type of feedback.

            * `BUG` - Bug Report
            * `FEATURE` - Feature Request
            * `SUPPORT` - Support Request
            * `OTHER` - Other
        title:
          type: string
          minLength: 1
          description: Short title or summary of the feedback.
          maxLength: 255
        description:
          type: string
          minLength: 1
          description: Detailed description of the feedback.
    PatchedLanguageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        code:
          type: string
          minLength: 1
          maxLength: 10
        proficiency:
          $ref: '#/components/schemas/ProficiencyEnum'
        certifications: {}
    PatchedNetworkRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        industry:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        website:
          type: string
          format: uri
          maxLength: 200
        logo:
          type: string
          format: binary
          nullable: true
        is_verified:
          type: boolean
        is_public:
          type: boolean
    PatchedNotificationBatchRequest:
      type: object
      properties:
        description:
          type: string
          minLength: 1
          description: Description of the batch (e.g., 'Welcome campaign').
          maxLength: 255
        created_by:
          type: integer
          nullable: true
          description: User who initiated the batch.
    PatchedNotificationRequest:
      type: object
      properties:
        template:
          type: integer
          nullable: true
          description: Optional template used for this notification.
        message:
          type: string
          minLength: 1
          description: Rendered notification message.
        subject:
          type: string
          description: Subject for email notifications.
          maxLength: 255
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityCe3Enum'
          description: |-
            Priority level of the notification.

            * `LOW` - Low
            * `MED` - Medium
            * `HIGH` - High
        channels:
          description: List of delivery channels (e.g., ['IN_APP', 'EMAIL']).
        category:
          type: string
          description: Category for grouping notifications (e.g., 'system', 'marketing').
          maxLength: 50
        metadata:
          description: 'Custom metadata (e.g., {''link'': ''/dashboard'', ''action'':
            ''view''}).'
        is_read:
          type: boolean
          description: Whether the notification has been read (in-app).
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: Optional expiration date for the notification.
    PatchedNotificationTemplateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Unique name for the template (e.g., 'welcome_message').
          maxLength: 100
        category:
          type: string
          description: Category for grouping templates (e.g., 'system', 'marketing').
          maxLength: 50
        subject:
          type: string
          description: Subject for email notifications.
          maxLength: 255
        message:
          type: string
          minLength: 1
          description: Template message with placeholders (e.g., {username}).
    PatchedParticipantRequest:
      type: object
      description: Comprehensive serializer for event participants.
      properties:
        event:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/ParticipantRoleEnum'
        registration_status:
          $ref: '#/components/schemas/RegistrationStatusEnum'
        attendance_status:
          $ref: '#/components/schemas/AttendanceStatusEnum'
        registration_data: {}
        notes:
          type: string
    PatchedPaymentGatewayConfigRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        callback_url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
        is_active:
          type: boolean
    PatchedPaymentRequest:
      type: object
      properties:
        gateway:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        content_type:
          type: integer
          nullable: true
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        metadata: {}
    PatchedProductRequest:
      type: object
      description: Comprehensive serializer for products.
      properties:
        exhibitor:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          title: Product Name
          maxLength: 200
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        image:
          type: string
          format: binary
          nullable: true
          title: Product Image
        gallery: {}
        category:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          minLength: 1
          maxLength: 3
        availability:
          type: string
          maxLength: 100
        features: {}
        specifications: {}
        website:
          type: string
          format: uri
          title: Product Website
          maxLength: 200
        demo_url:
          type: string
          format: uri
          maxLength: 200
        documentation_url:
          type: string
          format: uri
          maxLength: 200
        brochure:
          type: string
          format: binary
          nullable: true
    PatchedProjectRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        thumbnail:
          type: string
          format: binary
          nullable: true
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        url:
          type: string
          format: uri
          maxLength: 200
        github_url:
          type: string
          format: uri
          maxLength: 200
        technologies: {}
        role:
          type: string
          maxLength: 100
        team_size:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/ProjectCategoryEnum'
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
    PatchedPublicationRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 300
        description:
          type: string
        publisher:
          type: string
          minLength: 1
          maxLength: 200
        publication_date:
          type: string
          format: date
        url:
          type: string
          format: uri
          maxLength: 200
        authors: {}
        category:
          $ref: '#/components/schemas/PublicationCategoryEnum'
        tags: {}
    PatchedReactRequest:
      type: object
      properties:
        reaction_type:
          allOf:
          - $ref: '#/components/schemas/ReactionTypeEnum'
          default: LIKE
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
    PatchedRecommendationRequest:
      type: object
      properties:
        relationship_type:
          $ref: '#/components/schemas/RelationshipTypeEnum'
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        skills_highlighted: {}
        is_public:
          type: boolean
        is_featured:
          type: boolean
    PatchedRefundRequest:
      type: object
      properties:
        payment:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        reason:
          type: string
          minLength: 1
    PatchedResumeRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        template:
          type: string
          minLength: 1
          maxLength: 50
        content: {}
        file:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/ResumeStatusEnum'
        is_default:
          type: boolean
    PatchedSessionRequest:
      type: object
      description: Comprehensive serializer for sessions with speaker management.
      properties:
        event:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        type:
          allOf:
          - $ref: '#/components/schemas/SessionTypeEnum'
          title: نوع
        status:
          allOf:
          - $ref: '#/components/schemas/SessionStatusEnum'
          title: وضعیت
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        speaker_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of speaker user IDs
        is_featured:
          type: boolean
        location:
          type: string
          title: مکان
          maxLength: 100
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        recording_url:
          type: string
          format: uri
          maxLength: 200
        materials:
          description: Links to slides, documents, etc.
    PatchedSkillRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        category:
          type: string
          minLength: 1
          maxLength: 50
        level:
          type: integer
          maximum: 5
          minimum: 1
          description: Skill level from 1 (Beginner) to 5 (Expert)
        years_of_experience:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        last_used:
          type: string
          format: date
          nullable: true
    PatchedTagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        parent:
          type: integer
          nullable: true
    PatchedTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        actual_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        tags: {}
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          title: آدرس ایمیل
          maxLength: 254
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
        headline:
          type: string
          title: Professional headline
          description: Professional headline or title
          maxLength: 220
        current_position:
          type: string
          maxLength: 100
        current_company:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        timezone:
          type: string
          maxLength: 50
        status:
          $ref: '#/components/schemas/Status50cEnum'
        is_online:
          type: boolean
        bio:
          type: string
          title: Biography
          description: Short user biography or description.
          maxLength: 500
        date_of_birth:
          type: string
          format: date
          nullable: true
          description: Optional date of birth.
        profile_picture:
          type: string
          format: binary
          nullable: true
          description: Optional profile picture.
        phone_number:
          type: string
          nullable: true
          description: Optional phone number in international format (e.g., +1234567890).
          maxLength: 15
        is_verified:
          type: boolean
          title: Email verified
          description: Indicates if the user's email has been verified.
    PatchedViewRequest:
      type: object
      properties:
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
    PatchedVolunteerRequest:
      type: object
      properties:
        organization:
          type: string
          minLength: 1
          maxLength: 200
        role:
          type: string
          minLength: 1
          maxLength: 100
        cause:
          type: string
          minLength: 1
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        hours_contributed:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
    Payment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        gateway:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        status:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        transaction_id:
          type: string
          readOnly: true
        qr_code:
          type: string
          format: uri
          readOnly: true
        content_type:
          type: integer
          nullable: true
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        metadata: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - gateway
      - id
      - qr_code
      - status
      - transaction_id
      - updated_at
      - user
    PaymentCallback:
      type: object
      properties:
        tracking_code:
          type: string
      required:
      - tracking_code
    PaymentGatewayConfig:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        callback_url:
          type: string
          format: uri
          maxLength: 200
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - callback_url
      - created_at
      - id
      - name
    PaymentGatewayConfigRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        callback_url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
        is_active:
          type: boolean
      required:
      - callback_url
      - name
    PaymentRequest:
      type: object
      properties:
        gateway:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        content_type:
          type: integer
          nullable: true
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        metadata: {}
      required:
      - amount
      - gateway
    PaymentStatusEnum:
      enum:
      - PENDING
      - SUCCESS
      - FAILED
      - REFUNDED
      type: string
      description: |-
        * `PENDING` - Pending
        * `SUCCESS` - Success
        * `FAILED` - Failed
        * `REFUNDED` - Refunded
    PlatformEnum:
      enum:
      - linkedin
      - github
      - twitter
      - instagram
      - facebook
      - youtube
      - website
      - custom
      type: string
      description: |-
        * `linkedin` - LinkedIn
        * `github` - GitHub
        * `twitter` - Twitter
        * `instagram` - Instagram
        * `facebook` - Facebook
        * `youtube` - YouTube
        * `website` - Website
        * `custom` - Custom
    PriorityCe3Enum:
      enum:
      - LOW
      - MED
      - HIGH
      type: string
      description: |-
        * `LOW` - Low
        * `MED` - Medium
        * `HIGH` - High
    Product:
      type: object
      description: Comprehensive serializer for products.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        exhibitor:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        exhibitor_name:
          type: string
          readOnly: true
        name:
          type: string
          title: Product Name
          maxLength: 200
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        image:
          type: string
          format: uri
          nullable: true
          title: Product Image
        image_url:
          type: string
          nullable: true
          description: Get product image URL.
          readOnly: true
        gallery: {}
        category:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          maxLength: 3
        price_display:
          type: string
          description: Get formatted price display.
          readOnly: true
        availability:
          type: string
          maxLength: 100
        features: {}
        specifications: {}
        website:
          type: string
          format: uri
          title: Product Website
          maxLength: 200
        demo_url:
          type: string
          format: uri
          maxLength: 200
        documentation_url:
          type: string
          format: uri
          maxLength: 200
        brochure:
          type: string
          format: uri
          nullable: true
        view_count:
          type: integer
          readOnly: true
        favorite_count:
          type: integer
          readOnly: true
        inquiry_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - event
      - exhibitor
      - exhibitor_name
      - favorite_count
      - id
      - image_url
      - inquiry_count
      - name
      - price_display
      - slug
      - updated_at
      - view_count
    ProductMinimal:
      type: object
      description: Minimal product serializer for performance.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          title: Product Name
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        price_display:
          type: string
          description: Get formatted price display.
          readOnly: true
        currency:
          type: string
          maxLength: 3
        image_url:
          type: string
          nullable: true
          description: Get product image URL.
          readOnly: true
        category:
          type: string
          maxLength: 100
        availability:
          type: string
          maxLength: 100
      required:
      - id
      - image_url
      - name
      - price_display
    ProductMinimalRequest:
      type: object
      description: Minimal product serializer for performance.
      properties:
        name:
          type: string
          minLength: 1
          title: Product Name
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          minLength: 1
          maxLength: 3
        category:
          type: string
          maxLength: 100
        availability:
          type: string
          maxLength: 100
      required:
      - name
    ProductRequest:
      type: object
      description: Comprehensive serializer for products.
      properties:
        exhibitor:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          title: Product Name
          maxLength: 200
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        raw_description:
          type: string
        image:
          type: string
          format: binary
          nullable: true
          title: Product Image
        gallery: {}
        category:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          minLength: 1
          maxLength: 3
        availability:
          type: string
          maxLength: 100
        features: {}
        specifications: {}
        website:
          type: string
          format: uri
          title: Product Website
          maxLength: 200
        demo_url:
          type: string
          format: uri
          maxLength: 200
        documentation_url:
          type: string
          format: uri
          maxLength: 200
        brochure:
          type: string
          format: binary
          nullable: true
      required:
      - event
      - exhibitor
      - name
    ProficiencyEnum:
      enum:
      - native
      - fluent
      - conversational
      - basic
      type: string
      description: |-
        * `native` - Native
        * `fluent` - Fluent
        * `conversational` - Conversational
        * `basic` - Basic
    ProfileAnalytics:
      type: object
      properties:
        profile_views_data:
          type: object
          additionalProperties: {}
        connection_growth:
          type: object
          additionalProperties: {}
        skill_endorsements_data:
          type: object
          additionalProperties: {}
        search_appearances_data:
          type: object
          additionalProperties: {}
        top_viewers:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
        recent_activities:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
      required:
      - connection_growth
      - profile_views_data
      - recent_activities
      - search_appearances_data
      - skill_endorsements_data
      - top_viewers
    ProfilePictureUploadRequest:
      type: object
      properties:
        profile_picture:
          type: string
          format: binary
      required:
      - profile_picture
    ProfileSettingsRequest:
      type: object
      properties:
        profile_visibility:
          $ref: '#/components/schemas/ProfileVisibilityEnum'
        show_contact_info:
          type: boolean
        show_experience:
          type: boolean
        show_education:
          type: boolean
        show_skills:
          type: boolean
        show_projects:
          type: boolean
        show_achievements:
          type: boolean
        show_publications:
          type: boolean
        show_volunteer:
          type: boolean
        allow_endorsements:
          type: boolean
        allow_messages:
          type: boolean
        allow_connections:
          type: boolean
        show_last_seen:
          type: boolean
        searchable:
          type: boolean
        email_notifications:
          type: object
          additionalProperties: {}
        push_notifications:
          type: object
          additionalProperties: {}
      required:
      - allow_connections
      - allow_endorsements
      - allow_messages
      - email_notifications
      - profile_visibility
      - push_notifications
      - searchable
      - show_achievements
      - show_contact_info
      - show_education
      - show_experience
      - show_last_seen
      - show_projects
      - show_publications
      - show_skills
      - show_volunteer
    ProfileStats:
      type: object
      properties:
        profile_views:
          type: integer
          readOnly: true
        profile_views_this_week:
          type: integer
          readOnly: true
        profile_views_this_month:
          type: integer
          readOnly: true
        connections_count:
          type: integer
          readOnly: true
        endorsements_count:
          type: integer
          readOnly: true
        project_views:
          type: integer
          readOnly: true
        search_appearances:
          type: integer
          readOnly: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
      required:
      - connections_count
      - endorsements_count
      - last_updated
      - profile_views
      - profile_views_this_month
      - profile_views_this_week
      - project_views
      - search_appearances
    ProfileVisibilityEnum:
      enum:
      - public
      - private
      - connections-only
      type: string
      description: |-
        * `public` - Public
        * `private` - Private
        * `connections-only` - Connections Only
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        thumbnail:
          type: string
          format: uri
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProjectImage'
          readOnly: true
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        url:
          type: string
          format: uri
          maxLength: 200
        github_url:
          type: string
          format: uri
          maxLength: 200
        technologies: {}
        role:
          type: string
          maxLength: 100
        team_size:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/ProjectCategoryEnum'
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description
      - id
      - images
      - start_date
      - title
      - updated_at
    ProjectCategoryEnum:
      enum:
      - personal
      - professional
      - academic
      - open-source
      type: string
      description: |-
        * `personal` - Personal
        * `professional` - Professional
        * `academic` - Academic
        * `open-source` - Open Source
    ProjectImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
        caption:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - id
      - image
    ProjectImageRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
        caption:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - image
    ProjectRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        thumbnail:
          type: string
          format: binary
          nullable: true
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        url:
          type: string
          format: uri
          maxLength: 200
        github_url:
          type: string
          format: uri
          maxLength: 200
        technologies: {}
        role:
          type: string
          maxLength: 100
        team_size:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/ProjectCategoryEnum'
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
      required:
      - description
      - start_date
      - title
    ProjectStatusEnum:
      enum:
      - completed
      - in-progress
      - on-hold
      - cancelled
      type: string
      description: |-
        * `completed` - Completed
        * `in-progress` - In Progress
        * `on-hold` - On Hold
        * `cancelled` - Cancelled
    Publication:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 300
        description:
          type: string
        publisher:
          type: string
          maxLength: 200
        publication_date:
          type: string
          format: date
        url:
          type: string
          format: uri
          maxLength: 200
        authors: {}
        category:
          $ref: '#/components/schemas/PublicationCategoryEnum'
        tags: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - publication_date
      - publisher
      - title
    PublicationCategoryEnum:
      enum:
      - article
      - book
      - research
      - blog
      - whitepaper
      - other
      type: string
      description: |-
        * `article` - Article
        * `book` - Book
        * `research` - Research
        * `blog` - Blog
        * `whitepaper` - Whitepaper
        * `other` - Other
    PublicationRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 300
        description:
          type: string
        publisher:
          type: string
          minLength: 1
          maxLength: 200
        publication_date:
          type: string
          format: date
        url:
          type: string
          format: uri
          maxLength: 200
        authors: {}
        category:
          $ref: '#/components/schemas/PublicationCategoryEnum'
        tags: {}
      required:
      - publication_date
      - publisher
      - title
    RatingEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
    React:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        reaction_type:
          allOf:
          - $ref: '#/components/schemas/ReactionTypeEnum'
          default: LIKE
        content_type:
          type: string
          readOnly: true
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content_type
      - created_at
      - id
      - object_id
      - user
    ReactRequest:
      type: object
      properties:
        reaction_type:
          allOf:
          - $ref: '#/components/schemas/ReactionTypeEnum'
          default: LIKE
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - object_id
    ReactionTypeEnum:
      enum:
      - LIKE
      - LOVE
      - HAHA
      - WOW
      - SAD
      - ANGRY
      type: string
      description: |-
        * `LIKE` - Like
        * `LOVE` - Love
        * `HAHA` - Haha
        * `WOW` - Wow
        * `SAD` - Sad
        * `ANGRY` - Angry
    Recommendation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        recommender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        recommendee:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        relationship_type:
          $ref: '#/components/schemas/RelationshipTypeEnum'
        title:
          type: string
          maxLength: 200
        content:
          type: string
        skills_highlighted: {}
        is_public:
          type: boolean
        is_featured:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - recommendee
      - recommender
      - relationship_type
      - title
      - updated_at
    RecommendationRequest:
      type: object
      properties:
        relationship_type:
          $ref: '#/components/schemas/RelationshipTypeEnum'
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        skills_highlighted: {}
        is_public:
          type: boolean
        is_featured:
          type: boolean
      required:
      - content
      - relationship_type
      - title
    RefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
          description: JWT refresh token to get a new access token
      required:
      - refresh
    Refund:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: integer
        user:
          type: string
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        reason:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/RefundStatusEnum'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - payment
      - reason
      - status
      - updated_at
      - user
    RefundRequest:
      type: object
      properties:
        payment:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,2})?$
        reason:
          type: string
          minLength: 1
      required:
      - amount
      - payment
      - reason
    RefundStatusEnum:
      enum:
      - PENDING
      - APPROVED
      - REJECTED
      type: string
      description: |-
        * `PENDING` - Pending
        * `APPROVED` - Approved
        * `REJECTED` - Rejected
    Register:
      type: object
      properties:
        username:
          type: string
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: آدرس ایمیل
          maxLength: 254
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
        headline:
          type: string
          title: Professional headline
          description: Professional headline or title
          maxLength: 220
        current_position:
          type: string
          maxLength: 100
        current_company:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
      required:
      - email
      - username
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          title: آدرس ایمیل
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: Password must be at least 8 characters
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
        headline:
          type: string
          title: Professional headline
          description: Professional headline or title
          maxLength: 220
        current_position:
          type: string
          maxLength: 100
        current_company:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
      required:
      - email
      - password
      - username
    RegistrationStatusEnum:
      enum:
      - pending
      - confirmed
      - cancelled
      - waitlist
      - rejected
      - no_show
      - attended
      type: string
      description: |-
        * `pending` - Pending
        * `confirmed` - Confirmed
        * `cancelled` - Cancelled
        * `waitlist` - Waitlist
        * `rejected` - Rejected
        * `no_show` - No Show
        * `attended` - Attended
    RelationshipTypeEnum:
      enum:
      - colleague
      - manager
      - direct_report
      - client
      - mentor
      - other
      type: string
      description: |-
        * `colleague` - Colleague
        * `manager` - Manager
        * `direct_report` - Direct Report
        * `client` - Client
        * `mentor` - Mentor
        * `other` - Other
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
          description: Password reset token
        uid:
          type: string
          minLength: 1
          description: User identifier for password reset
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: New password (minimum 8 characters)
      required:
      - password
      - token
      - uid
    Resume:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        template:
          type: string
          maxLength: 50
        content: {}
        file:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/ResumeStatusEnum'
        is_default:
          type: boolean
        download_count:
          type: integer
          readOnly: true
        last_downloaded:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - download_count
      - id
      - last_downloaded
      - title
      - updated_at
    ResumeRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        template:
          type: string
          minLength: 1
          maxLength: 50
        content: {}
        file:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/ResumeStatusEnum'
        is_default:
          type: boolean
      required:
      - title
    ResumeStatusEnum:
      enum:
      - draft
      - active
      - archived
      type: string
      description: |-
        * `draft` - Draft
        * `active` - فعال
        * `archived` - Archived
    Session:
      type: object
      description: Comprehensive serializer for sessions with speaker management.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        event:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        type:
          allOf:
          - $ref: '#/components/schemas/SessionTypeEnum'
          title: نوع
        status:
          allOf:
          - $ref: '#/components/schemas/SessionStatusEnum'
          title: وضعیت
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        participant_count:
          type: integer
          description: Get current participant count for session.
          readOnly: true
        duration_display:
          type: string
          description: Get human-readable duration.
          readOnly: true
        is_live:
          type: boolean
          description: Check if session is currently live.
          readOnly: true
        can_attend:
          type: boolean
          description: Check if user can attend this session.
          readOnly: true
        user_attendance_status:
          type: string
          readOnly: true
        is_featured:
          type: boolean
        rating_avg:
          type: number
          format: double
          readOnly: true
          title: Average Rating
        location:
          type: string
          title: مکان
          maxLength: 100
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        recording_url:
          type: string
          format: uri
          maxLength: 200
        materials:
          description: Links to slides, documents, etc.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_attend
      - created_at
      - duration_display
      - end_time
      - event
      - id
      - is_live
      - participant_count
      - rating_avg
      - speakers
      - start_time
      - title
      - updated_at
      - user_attendance_status
    SessionRating:
      type: object
      description: Serializer for session ratings with validation.
      properties:
        id:
          type: integer
          readOnly: true
        session:
          type: string
          format: uuid
        session_title:
          type: string
          readOnly: true
        participant:
          type: integer
        participant_name:
          type: string
          description: Get participant's display name.
          readOnly: true
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: 0
          maximum: 9223372036854775807
        review:
          type: string
        helpful_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - participant
      - participant_name
      - session
      - session_title
      - updated_at
    SessionRatingRequest:
      type: object
      description: Serializer for session ratings with validation.
      properties:
        session:
          type: string
          format: uuid
        participant:
          type: integer
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: 0
          maximum: 9223372036854775807
        review:
          type: string
        helpful_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - participant
      - session
    SessionRequest:
      type: object
      description: Comprehensive serializer for sessions with speaker management.
      properties:
        event:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 300
        description:
          title: توضیحات
          description: Lexical JSON for rich text
        type:
          allOf:
          - $ref: '#/components/schemas/SessionTypeEnum'
          title: نوع
        status:
          allOf:
          - $ref: '#/components/schemas/SessionStatusEnum'
          title: وضعیت
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        speaker_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          description: List of speaker user IDs
        is_featured:
          type: boolean
        location:
          type: string
          title: مکان
          maxLength: 100
        virtual_link:
          type: string
          format: uri
          maxLength: 200
        recording_url:
          type: string
          format: uri
          maxLength: 200
        materials:
          description: Links to slides, documents, etc.
      required:
      - end_time
      - event
      - start_time
      - title
    SessionStatusEnum:
      enum:
      - scheduled
      - live
      - completed
      - cancelled
      - postponed
      type: string
      description: |-
        * `scheduled` - Scheduled
        * `live` - Live
        * `completed` - Completed
        * `cancelled` - Cancelled
        * `postponed` - Postponed
    SessionTypeEnum:
      enum:
      - keynote
      - presentation
      - workshop
      - panel
      - roundtable
      - break
      - lunch
      - networking
      - q_and_a
      - demo
      type: string
      description: |-
        * `keynote` - Keynote
        * `presentation` - Presentation
        * `workshop` - Workshop
        * `panel` - Panel Discussion
        * `roundtable` - Roundtable
        * `break` - Break
        * `lunch` - Lunch
        * `networking` - Networking
        * `q_and_a` - Q&A Session
        * `demo` - Demo
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        category:
          type: string
          maxLength: 50
        level:
          type: integer
          maximum: 5
          minimum: 1
          description: Skill level from 1 (Beginner) to 5 (Expert)
        years_of_experience:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        is_endorsed:
          type: boolean
          readOnly: true
        endorsements:
          type: array
          items:
            $ref: '#/components/schemas/SkillEndorsement'
          readOnly: true
        endorsement_count:
          type: integer
          readOnly: true
        last_used:
          type: string
          format: date
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - created_at
      - endorsement_count
      - endorsements
      - id
      - is_endorsed
      - level
      - name
      - updated_at
    SkillEndorseRequest:
      type: object
      properties:
        skill_id:
          type: string
          format: uuid
        message:
          type: string
          maxLength: 500
      required:
      - skill_id
    SkillEndorsement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        endorser:
          type: integer
          readOnly: true
        endorser_name:
          type: string
          readOnly: true
        endorser_avatar:
          type: string
          format: uri
          readOnly: true
        endorser_title:
          type: string
          readOnly: true
        message:
          type: string
          maxLength: 500
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - endorser
      - endorser_avatar
      - endorser_name
      - endorser_title
      - id
    SkillEndorsementRequest:
      type: object
      properties:
        message:
          type: string
          maxLength: 500
    SkillRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        category:
          type: string
          minLength: 1
          maxLength: 50
        level:
          type: integer
          maximum: 5
          minimum: 1
          description: Skill level from 1 (Beginner) to 5 (Expert)
        years_of_experience:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        last_used:
          type: string
          format: date
          nullable: true
      required:
      - category
      - level
      - name
    SlowModeDelayEnum:
      enum:
      - 0
      - 10
      - 30
      - 60
      - 300
      - 900
      - 3600
      type: integer
      description: |-
        * `0` - Disabled
        * `10` - 10 seconds
        * `30` - 30 seconds
        * `60` - 1 minute
        * `300` - 5 minutes
        * `900` - 15 minutes
        * `3600` - 1 hour
    SocialLink:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        title:
          type: string
          maxLength: 100
        is_visible:
          type: boolean
      required:
      - id
      - platform
      - url
    SocialLinkRequest:
      type: object
      properties:
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
        title:
          type: string
          maxLength: 100
        is_visible:
          type: boolean
      required:
      - platform
      - url
    SponsorshipTierEnum:
      enum:
      - title
      - platinum
      - gold
      - silver
      - bronze
      - supporter
      - none
      type: string
      description: |-
        * `title` - Title Sponsor
        * `platinum` - Platinum
        * `gold` - Gold
        * `silver` - Silver
        * `bronze` - Bronze
        * `supporter` - Supporter
        * `none` - هیچ
    Status270Enum:
      enum:
      - active
      - archived
      - muted
      - deleted
      - restricted
      type: string
      description: |-
        * `active` - فعال
        * `archived` - Archived
        * `muted` - Muted
        * `deleted` - Deleted
        * `restricted` - Restricted
    Status50cEnum:
      enum:
      - active
      - inactive
      - away
      - busy
      - do-not-disturb
      - suspended
      - pending
      - deleted
      - archived
      type: string
      description: |-
        * `active` - فعال
        * `inactive` - Inactive
        * `away` - Away
        * `busy` - Busy
        * `do-not-disturb` - Do Not Disturb
        * `suspended` - Suspended
        * `pending` - Pending
        * `deleted` - Deleted
        * `archived` - Archived
    StatusD8dEnum:
      enum:
      - draft
      - published
      - scheduled
      - live
      - completed
      - cancelled
      - postponed
      - archived
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
        * `scheduled` - Scheduled
        * `live` - Live
        * `completed` - Completed
        * `cancelled` - Cancelled
        * `postponed` - Postponed
        * `archived` - Archived
    StatusUpdateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status50cEnum'
      required:
      - status
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - name
      - parent
      - slug
    TagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        parent:
          type: integer
          nullable: true
      required:
      - name
      - parent
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        assignee:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          readOnly: true
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        actual_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        tags: {}
        watchers:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
          readOnly: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - assignee
      - comments
      - created_at
      - created_by
      - id
      - project
      - title
      - updated_at
      - watchers
    TaskComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - user
    TaskCommentRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 1
      required:
      - content
    TaskPriorityEnum:
      enum:
      - low
      - medium
      - high
      - urgent
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
        * `urgent` - Urgent
    TaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        actual_hours:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        tags: {}
      required:
      - title
    TaskStatusEnum:
      enum:
      - todo
      - in_progress
      - review
      - completed
      - cancelled
      type: string
      description: |-
        * `todo` - To Do
        * `in_progress` - In Progress
        * `review` - Under Review
        * `completed` - Completed
        * `cancelled` - Cancelled
    ThemeEnum:
      enum:
      - light
      - dark
      - system
      type: string
      description: |-
        * `light` - Light
        * `dark` - Dark
        * `system` - System
    TimeFormatEnum:
      enum:
      - 12h
      - 24h
      type: string
      description: |-
        * `12h` - 12h
        * `24h` - 24h
    TokenResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT access token
        refresh:
          type: string
          description: JWT refresh token
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          description: User details
      required:
      - access
      - refresh
      - user
    Transaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/TransactionStatusEnum'
          readOnly: true
        bank_response:
          readOnly: true
        error_message:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - bank_response
      - created_at
      - error_message
      - id
      - payment
      - status
    TransactionStatusEnum:
      enum:
      - INITIATED
      - COMPLETED
      - FAILED
      type: string
      description: |-
        * `INITIATED` - Initiated
        * `COMPLETED` - Completed
        * `FAILED` - Failed
    Type106Enum:
      enum:
      - text
      - photo
      - video
      - audio
      - voice
      - video_note
      - document
      - sticker
      - animation
      - poll
      - quiz
      - location
      - venue
      - contact
      - game
      - invoice
      - payment
      - dice
      - system
      - service
      - call
      - story
      type: string
      description: |-
        * `text` - متن
        * `photo` - Photo
        * `video` - Video
        * `audio` - Audio
        * `voice` - Voice Note
        * `video_note` - Video Note
        * `document` - Document
        * `sticker` - Sticker
        * `animation` - GIF/Animation
        * `poll` - Poll
        * `quiz` - Quiz
        * `location` - مکان
        * `venue` - Venue
        * `contact` - Contact
        * `game` - Game
        * `invoice` - Invoice
        * `payment` - Payment
        * `dice` - Dice
        * `system` - System Message
        * `service` - Service Message
        * `call` - Call
        * `story` - Story
    Type410Enum:
      enum:
      - conference
      - workshop
      - seminar
      - webinar
      - meetup
      - fair
      - exhibition
      - hybrid
      - virtual
      - networking
      type: string
      description: |-
        * `conference` - Conference
        * `workshop` - Workshop
        * `seminar` - Seminar
        * `webinar` - Webinar
        * `meetup` - Meetup
        * `fair` - Fair
        * `exhibition` - Exhibition
        * `hybrid` - Hybrid
        * `virtual` - Virtual
        * `networking` - Networking
    TypeEc7Enum:
      enum:
      - private
      - group
      - supergroup
      - channel
      - secret
      - bot
      - forum
      type: string
      description: |-
        * `private` - Private Chat
        * `group` - Group Chat
        * `supergroup` - Supergroup
        * `channel` - Channel
        * `secret` - Secret Chat
        * `bot` - Bot Chat
        * `forum` - Forum
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: آدرس ایمیل
          maxLength: 254
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
        full_name:
          type: string
          readOnly: true
        headline:
          type: string
          title: Professional headline
          description: Professional headline or title
          maxLength: 220
        current_position:
          type: string
          maxLength: 100
        current_company:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        timezone:
          type: string
          maxLength: 50
        status:
          $ref: '#/components/schemas/Status50cEnum'
        is_online:
          type: boolean
        bio:
          type: string
          title: Biography
          description: Short user biography or description.
          maxLength: 500
        date_of_birth:
          type: string
          format: date
          nullable: true
          description: Optional date of birth.
        profile_picture:
          type: string
          format: uri
          nullable: true
          description: Optional profile picture.
        phone_number:
          type: string
          nullable: true
          description: Optional phone number in international format (e.g., +1234567890).
          maxLength: 15
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          title: آخرین ورود
        date_joined:
          type: string
          format: date-time
          readOnly: true
          title: تاریخ پیوستن
        is_verified:
          type: boolean
          title: Email verified
          description: Indicates if the user's email has been verified.
        last_activity:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Timestamp of the user's last activity.
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        connections_count:
          type: string
          readOnly: true
        followers_count:
          type: string
          readOnly: true
        following_count:
          type: string
          readOnly: true
      required:
      - connections_count
      - date_joined
      - email
      - followers_count
      - following_count
      - full_name
      - id
      - last_activity
      - last_login
      - profile
      - username
    UserBasic:
      type: object
      description: Lightweight user serializer for lists and references.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
        first_name:
          type: string
          readOnly: true
          title: نام
        last_name:
          type: string
          readOnly: true
          title: نام خانوادگی
        full_name:
          type: string
          readOnly: true
        headline:
          type: string
          readOnly: true
          title: Professional headline
          description: Professional headline or title
        current_position:
          type: string
          readOnly: true
        current_company:
          type: string
          readOnly: true
        profile_picture:
          type: string
          format: uri
          readOnly: true
          nullable: true
          description: Optional profile picture.
        is_online:
          type: boolean
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status50cEnum'
          readOnly: true
      required:
      - current_company
      - current_position
      - first_name
      - full_name
      - headline
      - id
      - is_online
      - last_name
      - profile_picture
      - status
      - username
    UserBasicRequest:
      type: object
      description: |-
        Optimized basic user serializer for chat contexts.
        Includes caching and minimal fields for performance.
      properties:
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
    UserFile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        file:
          type: string
          format: uri
        name:
          type: string
          maxLength: 200
        file_type:
          $ref: '#/components/schemas/FileTypeEnum'
        description:
          type: string
        is_public:
          type: boolean
        size:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - file
      - id
      - name
      - size
    UserFileRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        name:
          type: string
          minLength: 1
          maxLength: 200
        file_type:
          $ref: '#/components/schemas/FileTypeEnum'
        description:
          type: string
        is_public:
          type: boolean
      required:
      - file
      - name
    UserMinimal:
      type: object
      description: Minimal user serializer for performance optimization.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        full_name:
          type: string
          description: Get user's full name or username as fallback.
          readOnly: true
        avatar_url:
          type: string
          nullable: true
          description: Get user's avatar URL.
          readOnly: true
      required:
      - avatar_url
      - full_name
      - id
      - username
    UserMinimalRequest:
      type: object
      description: Minimal user serializer for performance optimization.
      properties:
        username:
          type: string
          minLength: 1
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    UserProfile:
      type: object
      properties:
        display_name:
          type: string
          maxLength: 100
        cover_image:
          type: string
          format: uri
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 200
        interests: {}
        profile_visibility:
          $ref: '#/components/schemas/ProfileVisibilityEnum'
        show_contact_info:
          type: boolean
        show_experience:
          type: boolean
        show_education:
          type: boolean
        show_skills:
          type: boolean
        show_projects:
          type: boolean
        show_achievements:
          type: boolean
        show_publications:
          type: boolean
        show_volunteer:
          type: boolean
        allow_endorsements:
          type: boolean
        allow_messages:
          type: boolean
        allow_connections:
          type: boolean
        show_last_seen:
          type: boolean
        searchable:
          type: boolean
        email_notifications:
          description: Email notification preferences
        push_notifications:
          description: Push notification preferences
        theme:
          $ref: '#/components/schemas/ThemeEnum'
        language:
          type: string
          maxLength: 10
        date_format:
          $ref: '#/components/schemas/DateFormatEnum'
        time_format:
          $ref: '#/components/schemas/TimeFormatEnum'
        two_factor_enabled:
          type: boolean
        login_alerts:
          type: boolean
        data_processing:
          type: boolean
        analytics_tracking:
          type: boolean
        personalized_ads:
          type: boolean
        third_party_sharing:
          type: boolean
        location_tracking:
          type: boolean
        activity_tracking:
          type: boolean
        social_links:
          type: array
          items:
            $ref: '#/components/schemas/SocialLink'
          readOnly: true
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
          readOnly: true
        educations:
          type: array
          items:
            $ref: '#/components/schemas/Education'
          readOnly: true
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
          readOnly: true
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
          readOnly: true
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
          readOnly: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
          readOnly: true
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
          readOnly: true
        publications:
          type: array
          items:
            $ref: '#/components/schemas/Publication'
          readOnly: true
        volunteer_work:
          type: array
          items:
            $ref: '#/components/schemas/Volunteer'
          readOnly: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/UserFile'
          readOnly: true
        activity_logs:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
          readOnly: true
        stats:
          allOf:
          - $ref: '#/components/schemas/ProfileStats'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - achievements
      - activity_logs
      - certifications
      - created_at
      - educations
      - experiences
      - files
      - languages
      - projects
      - publications
      - skills
      - social_links
      - stats
      - updated_at
      - volunteer_work
    UserProfileRequest:
      type: object
      properties:
        display_name:
          type: string
          maxLength: 100
        cover_image:
          type: string
          format: binary
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 200
        interests: {}
        profile_visibility:
          $ref: '#/components/schemas/ProfileVisibilityEnum'
        show_contact_info:
          type: boolean
        show_experience:
          type: boolean
        show_education:
          type: boolean
        show_skills:
          type: boolean
        show_projects:
          type: boolean
        show_achievements:
          type: boolean
        show_publications:
          type: boolean
        show_volunteer:
          type: boolean
        allow_endorsements:
          type: boolean
        allow_messages:
          type: boolean
        allow_connections:
          type: boolean
        show_last_seen:
          type: boolean
        searchable:
          type: boolean
        email_notifications:
          description: Email notification preferences
        push_notifications:
          description: Push notification preferences
        theme:
          $ref: '#/components/schemas/ThemeEnum'
        language:
          type: string
          minLength: 1
          maxLength: 10
        date_format:
          $ref: '#/components/schemas/DateFormatEnum'
        time_format:
          $ref: '#/components/schemas/TimeFormatEnum'
        two_factor_enabled:
          type: boolean
        login_alerts:
          type: boolean
        data_processing:
          type: boolean
        analytics_tracking:
          type: boolean
        personalized_ads:
          type: boolean
        third_party_sharing:
          type: boolean
        location_tracking:
          type: boolean
        activity_tracking:
          type: boolean
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: نام کاربری
          description: الزامی. 150 کاراکتر یا کمتر. فقط شامل حروف، اعداد، و علامات
            @/./+/-/_
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          title: آدرس ایمیل
          maxLength: 254
        first_name:
          type: string
          title: نام
          maxLength: 150
        last_name:
          type: string
          title: نام خانوادگی
          maxLength: 150
        headline:
          type: string
          title: Professional headline
          description: Professional headline or title
          maxLength: 220
        current_position:
          type: string
          maxLength: 100
        current_company:
          type: string
          maxLength: 100
        location:
          type: string
          maxLength: 100
        timezone:
          type: string
          maxLength: 50
        status:
          $ref: '#/components/schemas/Status50cEnum'
        is_online:
          type: boolean
        bio:
          type: string
          title: Biography
          description: Short user biography or description.
          maxLength: 500
        date_of_birth:
          type: string
          format: date
          nullable: true
          description: Optional date of birth.
        profile_picture:
          type: string
          format: binary
          nullable: true
          description: Optional profile picture.
        phone_number:
          type: string
          nullable: true
          description: Optional phone number in international format (e.g., +1234567890).
          maxLength: 15
        is_verified:
          type: boolean
          title: Email verified
          description: Indicates if the user's email has been verified.
      required:
      - email
      - username
    VerifyRequest:
      type: object
      properties:
        access:
          type: string
          minLength: 1
          description: JWT access token to verify
      required:
      - access
    View:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        content_type:
          type: string
          readOnly: true
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content_type
      - created_at
      - id
      - object_id
      - user
    ViewRequest:
      type: object
      properties:
        object_id:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - object_id
    VisibilityEnum:
      enum:
      - public
      - private
      - invite_only
      - members_only
      type: string
      description: |-
        * `public` - Public
        * `private` - Private
        * `invite_only` - Invite Only
        * `members_only` - Members Only
    Volunteer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        organization:
          type: string
          maxLength: 200
        role:
          type: string
          maxLength: 100
        cause:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        hours_contributed:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - cause
      - created_at
      - id
      - organization
      - role
      - start_date
    VolunteerRequest:
      type: object
      properties:
        organization:
          type: string
          minLength: 1
          maxLength: 200
        role:
          type: string
          minLength: 1
          maxLength: 100
        cause:
          type: string
          minLength: 1
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        is_current:
          type: boolean
        description:
          type: string
        skills: {}
        hours_contributed:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
      required:
      - cause
      - organization
      - role
      - start_date
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
