# Generated by Django 5.2.1 on 2025-08-15 08:55

import uuid

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0002_userprofile_bio_userprofile_current_position_and_more"),
        ("blog", "0001_initial"),
        ("chats", "0005_chatpoll_chat_alter_chat_last_message_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EventBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Badge Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="event_badges/",
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6366f1", max_length=7, verbose_name="Color"
                    ),
                ),
                (
                    "points_required",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Points Required"
                    ),
                ),
                (
                    "criteria",
                    models.JSONField(blank=True, default=dict, verbose_name="Criteria"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Event Badge",
                "verbose_name_plural": "Event Badges",
                "ordering": ["points_required", "name"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=300, verbose_name="Event Name")),
                (
                    "slug",
                    models.SlugField(max_length=300, unique=True, verbose_name="Slug"),
                ),
                (
                    "description",
                    models.JSONField(
                        default=dict,
                        help_text="Lexical JSON for rich text",
                        verbose_name="Description",
                    ),
                ),
                (
                    "raw_description",
                    models.TextField(
                        blank=True,
                        help_text="Plain text for search",
                        verbose_name="Raw Description",
                    ),
                ),
                (
                    "excerpt",
                    models.TextField(
                        blank=True, max_length=500, verbose_name="Excerpt"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("conference", "Conference"),
                            ("workshop", "Workshop"),
                            ("seminar", "Seminar"),
                            ("webinar", "Webinar"),
                            ("meetup", "Meetup"),
                            ("fair", "Fair"),
                            ("exhibition", "Exhibition"),
                            ("hybrid", "Hybrid"),
                            ("virtual", "Virtual"),
                            ("networking", "Networking"),
                        ],
                        default="conference",
                        max_length=20,
                        verbose_name="Event Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("scheduled", "Scheduled"),
                            ("live", "Live"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("postponed", "Postponed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("invite_only", "Invite Only"),
                            ("members_only", "Members Only"),
                        ],
                        default="public",
                        max_length=20,
                        verbose_name="Visibility",
                    ),
                ),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "registration_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Registration Start"
                    ),
                ),
                (
                    "registration_end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Registration End"
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", max_length=50, verbose_name="Timezone"
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Location"
                    ),
                ),
                ("address", models.TextField(blank=True, verbose_name="Address")),
                (
                    "city",
                    models.CharField(blank=True, max_length=100, verbose_name="City"),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Country"
                    ),
                ),
                (
                    "venue_name",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Venue Name"
                    ),
                ),
                (
                    "venue_map",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="event_maps/",
                        verbose_name="Venue Map",
                    ),
                ),
                (
                    "virtual_link",
                    models.URLField(blank=True, verbose_name="Virtual Link"),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="event_logos/",
                        verbose_name="Logo",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="event_banners/",
                        verbose_name="Banner",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Array of image URLs",
                        verbose_name="Gallery",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "max_tickets_per_user",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Max Tickets Per User",
                    ),
                ),
                (
                    "registration_required",
                    models.BooleanField(
                        default=True, verbose_name="Registration Required"
                    ),
                ),
                (
                    "approval_required",
                    models.BooleanField(
                        default=False, verbose_name="Approval Required"
                    ),
                ),
                (
                    "waitlist_enabled",
                    models.BooleanField(default=True, verbose_name="Waitlist Enabled"),
                ),
                ("is_free", models.BooleanField(default=True, verbose_name="Is Free")),
                (
                    "currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "ticket_types",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Ticket Types"
                    ),
                ),
                (
                    "discount_codes",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Discount Codes"
                    ),
                ),
                (
                    "allow_comments",
                    models.BooleanField(default=True, verbose_name="Allow Comments"),
                ),
                (
                    "allow_reviews",
                    models.BooleanField(default=True, verbose_name="Allow Reviews"),
                ),
                (
                    "enable_networking",
                    models.BooleanField(default=True, verbose_name="Enable Networking"),
                ),
                (
                    "enable_chat",
                    models.BooleanField(default=True, verbose_name="Enable Chat"),
                ),
                (
                    "enable_qr_checkin",
                    models.BooleanField(
                        default=True, verbose_name="Enable QR Check-in"
                    ),
                ),
                (
                    "enable_live_streaming",
                    models.BooleanField(
                        default=False, verbose_name="Enable Live Streaming"
                    ),
                ),
                (
                    "ai_recommendations_enabled",
                    models.BooleanField(
                        default=False, verbose_name="AI Recommendations"
                    ),
                ),
                (
                    "ai_metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="AI Metadata"
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=60, verbose_name="SEO Title"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True, max_length=160, verbose_name="SEO Description"
                    ),
                ),
                (
                    "seo_keywords",
                    models.JSONField(
                        blank=True, default=list, verbose_name="SEO Keywords"
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(blank=True, verbose_name="Canonical URL"),
                ),
                (
                    "custom_theme",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Custom Theme"
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Custom Fields"
                    ),
                ),
                (
                    "branding",
                    models.JSONField(blank=True, default=dict, verbose_name="Branding"),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="View Count"
                    ),
                ),
                (
                    "registration_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Registration Count"
                    ),
                ),
                (
                    "attendance_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Attendance Count"
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        default=0.0, editable=False, verbose_name="Engagement Score"
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", max_length=10, verbose_name="Primary Language"
                    ),
                ),
                (
                    "languages",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Supported Languages"
                    ),
                ),
                (
                    "translations",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Translations"
                    ),
                ),
                (
                    "content_hash",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=64,
                        verbose_name="Content Hash",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "is_trending",
                    models.BooleanField(default=False, verbose_name="Is Trending"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Is Verified"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Published At"
                    ),
                ),
                (
                    "co_organizers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="events_coorganized",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Co-organizers",
                    ),
                ),
                (
                    "linked_blog",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blog.blogpost",
                        verbose_name="Announcement Blog",
                    ),
                ),
                (
                    "linked_chat",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="chats.chat",
                        verbose_name="Event Chat",
                    ),
                ),
                (
                    "linked_network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.network",
                        verbose_name="Linked Network",
                    ),
                ),
                (
                    "linked_project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.project",
                        verbose_name="Linked Project",
                    ),
                ),
                (
                    "linked_task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.task",
                        verbose_name="Linked Task",
                    ),
                ),
                (
                    "moderators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="events_moderated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Moderators",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events_organized",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Organizer",
                    ),
                ),
                (
                    "speakers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="events_spoken",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Speakers",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["-start_date"],
                "permissions": [
                    ("can_moderate_event", "Can moderate events"),
                    ("can_feature_event", "Can feature events"),
                    ("can_verify_event", "Can verify events"),
                ],
            },
        ),
        migrations.CreateModel(
            name="EventAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_registrations",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Registrations"
                    ),
                ),
                (
                    "confirmed_registrations",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Confirmed Registrations"
                    ),
                ),
                (
                    "cancelled_registrations",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Cancelled Registrations"
                    ),
                ),
                (
                    "waitlist_registrations",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Waitlist Registrations"
                    ),
                ),
                (
                    "total_attendance",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Attendance"
                    ),
                ),
                (
                    "attendance_rate",
                    models.FloatField(default=0.0, verbose_name="Attendance Rate"),
                ),
                (
                    "no_show_rate",
                    models.FloatField(default=0.0, verbose_name="No Show Rate"),
                ),
                (
                    "early_departure_rate",
                    models.FloatField(default=0.0, verbose_name="Early Departure Rate"),
                ),
                (
                    "avg_session_attendance",
                    models.FloatField(
                        default=0.0, verbose_name="Average Session Attendance"
                    ),
                ),
                (
                    "session_completion_rate",
                    models.FloatField(
                        default=0.0, verbose_name="Session Completion Rate"
                    ),
                ),
                (
                    "networking_connections",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Networking Connections"
                    ),
                ),
                (
                    "chat_messages",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Chat Messages"
                    ),
                ),
                (
                    "total_sessions",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Sessions"
                    ),
                ),
                (
                    "avg_session_rating",
                    models.FloatField(
                        default=0.0, verbose_name="Average Session Rating"
                    ),
                ),
                (
                    "total_exhibitors",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Exhibitors"
                    ),
                ),
                (
                    "total_products",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Products"
                    ),
                ),
                (
                    "total_revenue",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        verbose_name="Total Revenue",
                    ),
                ),
                (
                    "avg_ticket_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Average Ticket Price",
                    ),
                ),
                (
                    "sponsorship_revenue",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        verbose_name="Sponsorship Revenue",
                    ),
                ),
                (
                    "top_countries",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Top Countries"
                    ),
                ),
                (
                    "top_cities",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Top Cities"
                    ),
                ),
                (
                    "device_breakdown",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Device Breakdown"
                    ),
                ),
                (
                    "browser_breakdown",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Browser Breakdown"
                    ),
                ),
                (
                    "peak_attendance_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Peak Attendance Time"
                    ),
                ),
                (
                    "avg_session_duration",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="in minutes",
                        verbose_name="Average Session Duration",
                    ),
                ),
                (
                    "overall_satisfaction",
                    models.FloatField(default=0.0, verbose_name="Overall Satisfaction"),
                ),
                ("nps_score", models.FloatField(default=0.0, verbose_name="NPS Score")),
                (
                    "recommendation_rate",
                    models.FloatField(default=0.0, verbose_name="Recommendation Rate"),
                ),
                (
                    "last_calculated",
                    models.DateTimeField(auto_now=True, verbose_name="Last Calculated"),
                ),
                (
                    "event",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Analytics",
                "verbose_name_plural": "Event Analytics",
            },
        ),
        migrations.CreateModel(
            name="EventAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("presentation", "Presentation"),
                            ("brochure", "Brochure"),
                            ("link", "Link"),
                        ],
                        default="document",
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="event_attachments/",
                        verbose_name="File",
                    ),
                ),
                ("url", models.URLField(blank=True, verbose_name="URL")),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="attachment_thumbnails/",
                        verbose_name="Thumbnail",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        default=0, help_text="in bytes", verbose_name="File Size"
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="MIME Type"
                    ),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Download Count"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(default=True, verbose_name="Is Public"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_uploaded_attachments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Attachment",
                "verbose_name_plural": "Event Attachments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Name"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="FontAwesome icon class",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6366f1", max_length=7, verbose_name="Color"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="events.eventcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Category",
                "verbose_name_plural": "Event Categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="EventCategoryRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(default=False, verbose_name="Is Primary"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventcategory",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="events.event"
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Category Relation",
                "verbose_name_plural": "Event Category Relations",
            },
        ),
        migrations.CreateModel(
            name="EventFavorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_favorites",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Favorite",
                "verbose_name_plural": "Event Favorites",
            },
        ),
        migrations.CreateModel(
            name="EventModerationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("approve", "Approve"),
                            ("reject", "Reject"),
                            ("suspend", "Suspend"),
                            ("feature", "Feature"),
                            ("unfeature", "Remove Feature"),
                            ("verify", "Verify"),
                            ("unverify", "Remove Verification"),
                            ("delete", "Delete"),
                            ("restore", "Restore"),
                        ],
                        max_length=20,
                        verbose_name="Action",
                    ),
                ),
                ("reason", models.TextField(blank=True, verbose_name="Reason")),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="moderation_logs",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "moderator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_moderation_actions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Moderator",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Moderation Log",
                "verbose_name_plural": "Event Moderation Logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EventTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="Name"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6b7280", max_length=7, verbose_name="Color"
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Usage Count"
                    ),
                ),
                (
                    "is_trending",
                    models.BooleanField(default=False, verbose_name="Is Trending"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Event Tag",
                "verbose_name_plural": "Event Tags",
                "ordering": ["-usage_count", "name"],
                "indexes": [
                    models.Index(fields=["slug"], name="events_even_slug_1f33ba_idx"),
                    models.Index(
                        fields=["-usage_count"], name="events_even_usage_c_bb5791_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EventTagRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="events.event"
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventtag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Tag Relation",
                "verbose_name_plural": "Event Tag Relations",
            },
        ),
        migrations.CreateModel(
            name="EventView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="Session Key"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP Address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                (
                    "duration",
                    models.PositiveIntegerField(
                        default=0, help_text="in seconds", verbose_name="Duration"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_views",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event View",
                "verbose_name_plural": "Event Views",
            },
        ),
        migrations.CreateModel(
            name="Exhibitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "company_name",
                    models.CharField(max_length=200, verbose_name="Company Name"),
                ),
                ("slug", models.SlugField(max_length=200, verbose_name="Slug")),
                (
                    "description",
                    models.JSONField(
                        default=dict,
                        help_text="Lexical JSON for rich text",
                        verbose_name="Description",
                    ),
                ),
                (
                    "raw_description",
                    models.TextField(blank=True, verbose_name="Raw Description"),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="exhibitor_logos/",
                        verbose_name="Logo",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="exhibitor_banners/",
                        verbose_name="Banner",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(blank=True, default=list, verbose_name="Gallery"),
                ),
                (
                    "booth_number",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Booth Number"
                    ),
                ),
                (
                    "booth_size",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Booth Size"
                    ),
                ),
                (
                    "booth_location",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Booth Location"
                    ),
                ),
                (
                    "booth_map_coordinates",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Booth Map Coordinates"
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="Website")),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Contact Email"
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Contact Phone"
                    ),
                ),
                (
                    "social_links",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Social Links"
                    ),
                ),
                (
                    "sponsorship_tier",
                    models.CharField(
                        choices=[
                            ("title", "Title Sponsor"),
                            ("platinum", "Platinum"),
                            ("gold", "Gold"),
                            ("silver", "Silver"),
                            ("bronze", "Bronze"),
                            ("supporter", "Supporter"),
                            ("none", "None"),
                        ],
                        default="none",
                        max_length=20,
                        verbose_name="Sponsorship Tier",
                    ),
                ),
                (
                    "sponsorship_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Sponsorship Amount",
                    ),
                ),
                (
                    "sponsorship_benefits",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Sponsorship Benefits"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="View Count"
                    ),
                ),
                (
                    "connection_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Connection Count"
                    ),
                ),
                (
                    "lead_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Lead Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approved At"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitors",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "primary_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_exhibitor_contacts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Primary Contact",
                    ),
                ),
                (
                    "representatives",
                    models.ManyToManyField(
                        blank=True,
                        related_name="exhibitor_representations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Representatives",
                    ),
                ),
            ],
            options={
                "verbose_name": "Exhibitor",
                "verbose_name_plural": "Exhibitors",
            },
        ),
        migrations.CreateModel(
            name="Participant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("attendee", "Attendee"),
                            ("speaker", "Speaker"),
                            ("moderator", "Moderator"),
                            ("organizer", "Organizer"),
                            ("co_organizer", "Co-organizer"),
                            ("sponsor", "Sponsor"),
                            ("exhibitor", "Exhibitor"),
                            ("volunteer", "Volunteer"),
                            ("media", "Media"),
                            ("vip", "VIP"),
                        ],
                        default="attendee",
                        max_length=20,
                        verbose_name="Role",
                    ),
                ),
                (
                    "registration_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("waitlist", "Waitlist"),
                            ("rejected", "Rejected"),
                            ("no_show", "No Show"),
                            ("attended", "Attended"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Registration Status",
                    ),
                ),
                (
                    "attendance_status",
                    models.CharField(
                        choices=[
                            ("not_attended", "Not Attended"),
                            ("checked_in", "Checked In"),
                            ("attended", "Attended"),
                            ("left_early", "Left Early"),
                        ],
                        default="not_attended",
                        max_length=20,
                        verbose_name="Attendance Status",
                    ),
                ),
                (
                    "ticket_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Ticket Type"
                    ),
                ),
                (
                    "ticket_code",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        unique=True,
                        verbose_name="Ticket Code",
                    ),
                ),
                (
                    "ticket_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Ticket Price",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        default="pending", max_length=20, verbose_name="Payment Status"
                    ),
                ),
                (
                    "bio",
                    models.TextField(blank=True, max_length=500, verbose_name="Bio"),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Company"
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Job Title"
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="Website")),
                (
                    "social_links",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Social Links"
                    ),
                ),
                (
                    "is_public_profile",
                    models.BooleanField(default=False, verbose_name="Public Profile"),
                ),
                (
                    "allow_networking",
                    models.BooleanField(default=True, verbose_name="Allow Networking"),
                ),
                (
                    "allow_messages",
                    models.BooleanField(default=True, verbose_name="Allow Messages"),
                ),
                (
                    "points",
                    models.PositiveIntegerField(default=0, verbose_name="Points"),
                ),
                ("level", models.PositiveIntegerField(default=1, verbose_name="Level")),
                (
                    "badges",
                    models.JSONField(blank=True, default=list, verbose_name="Badges"),
                ),
                (
                    "interests",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Interests"
                    ),
                ),
                (
                    "dietary_requirements",
                    models.TextField(blank=True, verbose_name="Dietary Requirements"),
                ),
                (
                    "accessibility_needs",
                    models.TextField(blank=True, verbose_name="Accessibility Needs"),
                ),
                (
                    "session_preferences",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Session Preferences"
                    ),
                ),
                (
                    "check_in_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Check-in Time"
                    ),
                ),
                (
                    "check_out_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Check-out Time"
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Activity"
                    ),
                ),
                (
                    "total_session_time",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="in minutes",
                        verbose_name="Total Session Time",
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(default=0.0, verbose_name="Engagement Score"),
                ),
                (
                    "registration_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Registration Data"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "registered_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Registered At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_participations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Participant",
                "verbose_name_plural": "Participants",
            },
        ),
        migrations.CreateModel(
            name="ParticipantBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "earned_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Earned At"),
                ),
                ("reason", models.TextField(blank=True, verbose_name="Reason")),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventbadge",
                        verbose_name="Badge",
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="earned_badges",
                        to="events.participant",
                        verbose_name="Participant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Participant Badge",
                "verbose_name_plural": "Participant Badges",
                "ordering": ["-earned_at"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Product Name")),
                ("slug", models.SlugField(max_length=200, verbose_name="Slug")),
                (
                    "description",
                    models.JSONField(
                        default=dict,
                        help_text="Lexical JSON for rich text",
                        verbose_name="Description",
                    ),
                ),
                (
                    "raw_description",
                    models.TextField(blank=True, verbose_name="Raw Description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="product_images/",
                        verbose_name="Product Image",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(blank=True, default=list, verbose_name="Gallery"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Category"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Price",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "availability",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Availability"
                    ),
                ),
                (
                    "features",
                    models.JSONField(blank=True, default=list, verbose_name="Features"),
                ),
                (
                    "specifications",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Specifications"
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, verbose_name="Product Website"),
                ),
                ("demo_url", models.URLField(blank=True, verbose_name="Demo URL")),
                (
                    "documentation_url",
                    models.URLField(blank=True, verbose_name="Documentation URL"),
                ),
                (
                    "brochure",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="product_brochures/",
                        verbose_name="Brochure",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="View Count"
                    ),
                ),
                (
                    "favorite_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Favorite Count"
                    ),
                ),
                (
                    "inquiry_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Inquiry Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="events.exhibitor",
                        verbose_name="Exhibitor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
            },
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=300, verbose_name="Title")),
                ("slug", models.SlugField(max_length=300, verbose_name="Slug")),
                (
                    "description",
                    models.JSONField(
                        default=dict,
                        help_text="Lexical JSON for rich text",
                        verbose_name="Description",
                    ),
                ),
                (
                    "raw_description",
                    models.TextField(blank=True, verbose_name="Raw Description"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("keynote", "Keynote"),
                            ("presentation", "Presentation"),
                            ("workshop", "Workshop"),
                            ("panel", "Panel Discussion"),
                            ("roundtable", "Roundtable"),
                            ("break", "Break"),
                            ("lunch", "Lunch"),
                            ("networking", "Networking"),
                            ("q_and_a", "Q&A Session"),
                            ("demo", "Demo"),
                        ],
                        default="presentation",
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("live", "Live"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("postponed", "Postponed"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("start_time", models.DateTimeField(verbose_name="Start Time")),
                ("end_time", models.DateTimeField(verbose_name="End Time")),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", max_length=50, verbose_name="Timezone"
                    ),
                ),
                (
                    "track",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 'Business Track', 'Tech Track'",
                        max_length=100,
                        verbose_name="Track",
                    ),
                ),
                (
                    "room",
                    models.CharField(blank=True, max_length=100, verbose_name="Room"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Location"
                    ),
                ),
                (
                    "virtual_link",
                    models.URLField(blank=True, verbose_name="Virtual Link"),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "is_paid",
                    models.BooleanField(
                        default=False, verbose_name="Requires Paid Ticket"
                    ),
                ),
                (
                    "is_recorded",
                    models.BooleanField(default=False, verbose_name="Is Recorded"),
                ),
                (
                    "is_live_streamed",
                    models.BooleanField(default=False, verbose_name="Is Live Streamed"),
                ),
                (
                    "requires_registration",
                    models.BooleanField(
                        default=False, verbose_name="Requires Registration"
                    ),
                ),
                (
                    "materials",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Links to slides, documents, etc.",
                        verbose_name="Materials",
                    ),
                ),
                (
                    "recording_url",
                    models.URLField(blank=True, verbose_name="Recording URL"),
                ),
                (
                    "attendee_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Attendee Count"
                    ),
                ),
                (
                    "rating_avg",
                    models.FloatField(
                        default=0.0, editable=False, verbose_name="Average Rating"
                    ),
                ),
                (
                    "rating_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Rating Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "moderator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions_moderated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Moderator",
                    ),
                ),
                (
                    "speakers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sessions_spoken",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Speakers",
                    ),
                ),
            ],
            options={
                "verbose_name": "Session",
                "verbose_name_plural": "Sessions",
                "ordering": ["start_time"],
            },
        ),
        migrations.AddField(
            model_name="participant",
            name="sessions_attended",
            field=models.ManyToManyField(
                blank=True,
                related_name="attendees",
                to="events.session",
                verbose_name="Sessions Attended",
            ),
        ),
        migrations.CreateModel(
            name="SessionRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        default=5,
                        verbose_name="Rating",
                    ),
                ),
                ("review", models.TextField(blank=True, verbose_name="Review")),
                (
                    "helpful_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Helpful Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_ratings",
                        to="events.participant",
                        verbose_name="Participant",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="events.session",
                        verbose_name="Session",
                    ),
                ),
            ],
            options={
                "verbose_name": "Session Rating",
                "verbose_name_plural": "Session Ratings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["slug", "status"], name="events_even_slug_9c4f17_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["organizer", "start_date"],
                name="events_even_organiz_2f8b81_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["status", "visibility"], name="events_even_status_0bf48b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start_date", "end_date"], name="events_even_start_d_7e0d92_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["city", "country"], name="events_even_city_8bb2fa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["type", "status"], name="events_even_type_d69bee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["-created_at"], name="events_even_created_7af6de_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["is_featured", "is_trending"],
                name="events_even_is_feat_b1c4fd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eventattachment",
            index=models.Index(
                fields=["type", "is_public"], name="events_even_type_9e3f86_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventattachment",
            index=models.Index(
                fields=["-created_at"], name="events_even_created_ea34f7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventcategory",
            index=models.Index(
                fields=["slug", "is_active"], name="events_even_slug_da7ece_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventcategoryrelation",
            unique_together={("event", "category")},
        ),
        migrations.AlterUniqueTogether(
            name="eventfavorite",
            unique_together={("user", "event")},
        ),
        migrations.AddIndex(
            model_name="eventmoderationlog",
            index=models.Index(
                fields=["event", "-created_at"], name="events_even_event_i_ff5013_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventmoderationlog",
            index=models.Index(
                fields=["moderator", "-created_at"],
                name="events_even_moderat_d008c4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eventmoderationlog",
            index=models.Index(
                fields=["action", "-created_at"], name="events_even_action_616529_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventtagrelation",
            unique_together={("event", "tag")},
        ),
        migrations.AddIndex(
            model_name="eventview",
            index=models.Index(
                fields=["event", "created_at"], name="events_even_event_i_550a40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventview",
            index=models.Index(
                fields=["user", "created_at"], name="events_even_user_id_e60377_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exhibitor",
            index=models.Index(
                fields=["event", "company_name"], name="events_exhi_event_i_dd3847_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exhibitor",
            index=models.Index(
                fields=["status", "sponsorship_tier"],
                name="events_exhi_status_5cd415_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="exhibitor",
            index=models.Index(
                fields=["booth_number"], name="events_exhi_booth_n_f0757f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="exhibitor",
            unique_together={("event", "company_name"), ("event", "slug")},
        ),
        migrations.AlterUniqueTogether(
            name="participantbadge",
            unique_together={("participant", "badge")},
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["event", "category"], name="events_prod_event_i_0d6b36_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["exhibitor", "name"], name="events_prod_exhibit_c078b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["price", "currency"], name="events_prod_price_8181d9_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="product",
            unique_together={("event", "slug"), ("exhibitor", "slug")},
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(
                fields=["event", "start_time"], name="events_sess_event_i_3b9525_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(
                fields=["track", "room"], name="events_sess_track_78e4b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(
                fields=["status", "start_time"], name="events_sess_status_b9365e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(
                fields=["type", "start_time"], name="events_sess_type_ad15b4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="session",
            unique_together={("event", "slug")},
        ),
        migrations.AddIndex(
            model_name="participant",
            index=models.Index(
                fields=["event", "role"], name="events_part_event_i_e63553_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="participant",
            index=models.Index(
                fields=["registration_status", "attendance_status"],
                name="events_part_registr_c04ddd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="participant",
            index=models.Index(
                fields=["user", "registered_at"], name="events_part_user_id_9f2303_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="participant",
            index=models.Index(
                fields=["ticket_code"], name="events_part_ticket__8614d7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="participant",
            unique_together={("user", "event")},
        ),
        migrations.AlterUniqueTogether(
            name="sessionrating",
            unique_together={("session", "participant")},
        ),
    ]
