# Generated by Django 5.2.1 on 2025-08-23 11:42

import uuid

import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=200)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("progress", "Progress"),
                            ("performance", "Performance"),
                            ("social", "Social"),
                            ("streak", "Streak"),
                            ("exploration", "Exploration"),
                            ("mastery", "Mastery"),
                            ("challenge", "Challenge"),
                        ],
                        db_index=True,
                        default="progress",
                        max_length=50,
                    ),
                ),
                ("icon_name", models.CharField(blank=True, max_length=50)),
                ("icon_url", models.URLField(blank=True, max_length=500)),
                ("badge_color", models.CharField(default="#FFD700", max_length=7)),
                ("xp_reward", models.PositiveIntegerField(default=100)),
                ("bonus_rewards", models.JSONField(blank=True, default=dict)),
                ("criteria", models.JSONField(default=dict)),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("uncommon", "Uncommon"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        db_index=True,
                        default="common",
                        max_length=20,
                    ),
                ),
                ("is_secret", models.BooleanField(default=False)),
                ("is_repeatable", models.BooleanField(default=False)),
                ("unlock_count", models.PositiveIntegerField(default=0)),
                ("available_from", models.DateTimeField(blank=True, null=True)),
                ("available_until", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        related_name="unlocked_achievements",
                        to="course.achievement",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Achievement",
                "verbose_name_plural": "Achievements",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
                ("short_description", models.CharField(blank=True, max_length=500)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("A1", "A1"),
                            ("A2", "A2"),
                            ("B1", "B1"),
                            ("B2", "B2"),
                            ("C1", "C1"),
                            ("C2", "C2"),
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        db_index=True,
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General Language"),
                            ("business", "Business"),
                            ("academic", "Academic"),
                            ("conversational", "Conversational"),
                            ("technical", "Technical"),
                            ("cultural", "Cultural"),
                            ("exam_prep", "Exam Preparation"),
                        ],
                        db_index=True,
                        default="general",
                        max_length=50,
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("skills_focused", models.JSONField(blank=True, default=list)),
                ("learning_objectives", models.JSONField(blank=True, default=list)),
                ("is_certified", models.BooleanField(default=False)),
                (
                    "certification_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, default=0.0, max_digits=10
                    ),
                ),
                (
                    "course_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, default=0.0, max_digits=10
                    ),
                ),
                ("is_free", models.BooleanField(default=True)),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True, null=True, upload_to="course_thumbnails/"
                    ),
                ),
                (
                    "banner_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="course_banners/"
                    ),
                ),
                ("intro_video_url", models.URLField(blank=True, max_length=500)),
                (
                    "enrollment_count",
                    models.PositiveBigIntegerField(db_index=True, default=0),
                ),
                (
                    "completion_count",
                    models.PositiveBigIntegerField(db_index=True, default=0),
                ),
                (
                    "average_rating",
                    models.FloatField(
                        db_index=True,
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_ratings", models.PositiveIntegerField(default=0)),
                ("is_published", models.BooleanField(db_index=True, default=False)),
                ("is_featured", models.BooleanField(db_index=True, default=False)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "difficulty_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "ai_generated_content_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "co_instructors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="courses_co_taught",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="courses_taught",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True, related_name="dependent_courses", to="course.course"
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Course",
                "verbose_name_plural": "Courses",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("valid_from", models.DateTimeField(blank=True, null=True)),
                ("expiration_date", models.DateTimeField(blank=True, null=True)),
                (
                    "verification_code",
                    models.CharField(db_index=True, max_length=50, unique=True),
                ),
                ("verification_url", models.URLField(blank=True, max_length=500)),
                ("final_score", models.FloatField(db_index=True)),
                ("completion_time_hours", models.PositiveIntegerField(default=0)),
                ("grade", models.CharField(blank=True, max_length=5)),
                (
                    "certificate_template",
                    models.CharField(default="standard", max_length=100),
                ),
                ("issuer_name", models.CharField(blank=True, max_length=200)),
                ("issuer_signature_url", models.URLField(blank=True, max_length=500)),
                (
                    "pdf_file",
                    models.FileField(blank=True, null=True, upload_to="certificates/"),
                ),
                ("pdf_url", models.URLField(blank=True, max_length=500)),
                ("is_revoked", models.BooleanField(default=False)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("revocation_reason", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to="course.course",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificate",
                "verbose_name_plural": "Certificates",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Dialect",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("region", models.CharField(blank=True, max_length=100)),
                ("description", models.TextField(blank=True)),
                ("speakers_count", models.BigIntegerField(blank=True, default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Dialect",
                "verbose_name_plural": "Dialects",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="course",
            name="target_dialect",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="target_courses",
                to="course.dialect",
            ),
        ),
        migrations.CreateModel(
            name="DiscussionThread",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                (
                    "thread_type",
                    models.CharField(
                        choices=[
                            ("general", "General Discussion"),
                            ("question", "Question"),
                            ("study_group", "Study Group"),
                            ("announcement", "Announcement"),
                            ("feedback", "Feedback"),
                        ],
                        db_index=True,
                        default="general",
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("object_id", models.UUIDField()),
                ("posts_count", models.PositiveIntegerField(db_index=True, default=0)),
                ("views_count", models.PositiveIntegerField(default=0)),
                ("participants_count", models.PositiveIntegerField(default=0)),
                ("last_post_at", models.DateTimeField(blank=True, null=True)),
                ("is_pinned", models.BooleanField(db_index=True, default=False)),
                ("is_locked", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("restricted", "Restricted"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("is_moderated", models.BooleanField(default=False)),
                ("reported_count", models.PositiveIntegerField(default=0)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discussion_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_post_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "moderators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="moderated_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subscribers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="subscribed_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discussion Thread",
                "verbose_name_plural": "Discussion Threads",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DiscussionPost",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("content", models.TextField()),
                (
                    "content_format",
                    models.CharField(
                        choices=[
                            ("markdown", "Markdown"),
                            ("html", "HTML"),
                            ("plain", "Plain Text"),
                        ],
                        default="markdown",
                        max_length=20,
                    ),
                ),
                ("attachments", models.JSONField(blank=True, default=list)),
                ("likes", models.PositiveIntegerField(db_index=True, default=0)),
                ("dislikes", models.PositiveIntegerField(default=0)),
                ("replies_count", models.PositiveIntegerField(default=0)),
                ("is_edited", models.BooleanField(default=False)),
                ("edit_history", models.JSONField(blank=True, default=list)),
                ("original_content", models.TextField(blank=True)),
                ("is_flagged", models.BooleanField(default=False)),
                ("flagged_count", models.PositiveIntegerField(default=0)),
                ("is_approved", models.BooleanField(default=True)),
                ("is_solution", models.BooleanField(default=False)),
                ("helpful_votes", models.PositiveIntegerField(default=0)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discussion_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "moderated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="course.discussionpost",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="course.discussionthread",
                    ),
                ),
            ],
            options={
                "verbose_name": "Discussion Post",
                "verbose_name_plural": "Discussion Posts",
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("object_id", models.UUIDField()),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("content", "Content Feedback"),
                            ("bug", "Bug Report"),
                            ("suggestion", "Suggestion"),
                            ("difficulty", "Difficulty Feedback"),
                            ("translation", "Translation Issue"),
                            ("accessibility", "Accessibility Issue"),
                        ],
                        db_index=True,
                        default="content",
                        max_length=50,
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("suggestions", models.TextField(blank=True)),
                ("categories", models.JSONField(blank=True, default=list)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_review", "In Review"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("duplicate", "Duplicate"),
                        ],
                        db_index=True,
                        default="open",
                        max_length=20,
                    ),
                ),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("is_helpful", models.BooleanField(db_index=True, default=True)),
                ("helpful_votes", models.PositiveIntegerField(default=0)),
                ("unhelpful_votes", models.PositiveIntegerField(default=0)),
                ("reported_count", models.PositiveIntegerField(default=0)),
                ("is_moderated", models.BooleanField(default=False)),
                ("user_progress_context", models.JSONField(blank=True, default=dict)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_feedback_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback",
                "verbose_name_plural": "Feedbacks",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        max_length=10,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z]{2,3}(-[a-zA-Z]{2,3})?$"
                            )
                        ],
                    ),
                ),
                ("native_name", models.CharField(blank=True, max_length=100)),
                ("flag_emoji", models.CharField(blank=True, max_length=10)),
                ("is_rtl", models.BooleanField(default=False)),
                ("script", models.CharField(blank=True, max_length=50)),
                (
                    "difficulty_rating",
                    models.IntegerField(
                        db_index=True,
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("speakers_count", models.BigIntegerField(blank=True, default=0)),
                ("learning_resources_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Language",
                "verbose_name_plural": "Languages",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dialect",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dialects",
                to="course.language",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="base_language",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="base_courses",
                to="course.language",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="target_language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="target_courses",
                to="course.language",
            ),
        ),
        migrations.CreateModel(
            name="LeaderboardEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "leaderboard_type",
                    models.CharField(
                        choices=[
                            ("global", "Global"),
                            ("course", "Course"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("friends", "Friends"),
                        ],
                        db_index=True,
                        default="global",
                        max_length=20,
                    ),
                ),
                ("total_xp", models.PositiveBigIntegerField(db_index=True, default=0)),
                ("current_rank", models.PositiveIntegerField(db_index=True, default=0)),
                ("previous_rank", models.PositiveIntegerField(default=0)),
                ("rank_change", models.IntegerField(default=0)),
                ("achievements_count", models.PositiveIntegerField(default=0)),
                ("courses_completed", models.PositiveIntegerField(default=0)),
                ("lessons_completed", models.PositiveIntegerField(default=0)),
                ("current_streak", models.PositiveIntegerField(default=0)),
                ("longest_streak", models.PositiveIntegerField(default=0)),
                ("period_start", models.DateTimeField(blank=True, null=True)),
                ("period_end", models.DateTimeField(blank=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("last_activity", models.DateTimeField(blank=True, null=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaderboard",
                        to="course.course",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaderboard_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Leaderboard Entry",
                "verbose_name_plural": "Leaderboard Entries",
                "ordering": ["-total_xp"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                ("order", models.PositiveIntegerField(db_index=True, default=1)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("grammar", "Grammar"),
                            ("vocabulary", "Vocabulary"),
                            ("conversation", "Conversation"),
                            ("pronunciation", "Pronunciation"),
                            ("listening", "Listening"),
                            ("reading", "Reading"),
                            ("writing", "Writing"),
                            ("culture", "Culture"),
                            ("review", "Review"),
                            ("assessment", "Assessment"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("learning_objectives", models.JSONField(blank=True, default=list)),
                ("estimated_time_minutes", models.PositiveIntegerField(default=0)),
                (
                    "difficulty",
                    models.IntegerField(
                        db_index=True,
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("unlock_xp_required", models.PositiveIntegerField(default=0)),
                ("completion_xp_reward", models.PositiveIntegerField(default=50)),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True, null=True, upload_to="lesson_thumbnails/"
                    ),
                ),
                ("intro_audio_url", models.URLField(blank=True, max_length=500)),
                ("ai_difficulty_adjustment", models.BooleanField(default=True)),
                ("adaptive_content", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_lessons",
                    models.ManyToManyField(
                        blank=True, related_name="unlocked_lessons", to="course.lesson"
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson",
                "verbose_name_plural": "Lessons",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GrammarRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("category", models.CharField(db_index=True, max_length=100)),
                ("explanation", models.TextField()),
                ("formula_pattern", models.CharField(blank=True, max_length=500)),
                ("examples", models.JSONField(blank=True, default=list)),
                ("exceptions", models.JSONField(blank=True, default=list)),
                ("common_mistakes", models.JSONField(blank=True, default=list)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("A1", "A1"),
                            ("A2", "A2"),
                            ("B1", "B1"),
                            ("B2", "B2"),
                            ("C1", "C1"),
                            ("C2", "C2"),
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        db_index=True,
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "diagram_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="grammar_diagrams/"
                    ),
                ),
                ("example_audio_url", models.URLField(blank=True, max_length=500)),
                (
                    "usage_frequency",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("practice_exercises_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_rules",
                    models.ManyToManyField(blank=True, to="course.grammarrule"),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grammar_rules",
                        to="course.language",
                    ),
                ),
                (
                    "lessons",
                    models.ManyToManyField(
                        blank=True, related_name="grammar_rules", to="course.lesson"
                    ),
                ),
            ],
            options={
                "verbose_name": "Grammar Rule",
                "verbose_name_plural": "Grammar Rules",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                ("order", models.PositiveIntegerField(db_index=True, default=1)),
                ("description", models.TextField(blank=True)),
                ("objectives", models.JSONField(blank=True, default=list)),
                ("estimated_time_minutes", models.PositiveIntegerField(default=0)),
                ("is_mandatory", models.BooleanField(default=True)),
                ("unlock_xp_required", models.PositiveIntegerField(default=0)),
                ("completion_xp_reward", models.PositiveIntegerField(default=100)),
                ("icon_name", models.CharField(blank=True, max_length=50)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="course.course",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True, related_name="dependent_modules", to="course.module"
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Module",
                "verbose_name_plural": "Modules",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="lesson",
            name="module",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="course.module",
            ),
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("quiz", "Quiz"),
                            ("exam", "Exam"),
                            ("practice", "Practice"),
                            ("placement", "Placement Test"),
                            ("progress", "Progress Check"),
                            ("final", "Final Assessment"),
                            ("diagnostic", "Diagnostic Test"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("instructions", models.TextField(blank=True)),
                ("total_points", models.PositiveIntegerField(default=0)),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        default=70,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("grade_boundaries", models.JSONField(blank=True, default=dict)),
                ("time_limit_minutes", models.PositiveIntegerField(default=0)),
                ("show_timer", models.BooleanField(default=True)),
                ("attempts_allowed", models.PositiveIntegerField(default=3)),
                ("is_adaptive", models.BooleanField(default=False)),
                ("randomize_questions", models.BooleanField(default=True)),
                ("randomize_options", models.BooleanField(default=True)),
                ("show_answers_after", models.BooleanField(default=True)),
                ("show_score_immediately", models.BooleanField(default=True)),
                ("allow_review_before_submit", models.BooleanField(default=True)),
                ("prevent_backtracking", models.BooleanField(default=False)),
                ("available_from", models.DateTimeField(blank=True, null=True)),
                ("available_until", models.DateTimeField(blank=True, null=True)),
                ("is_proctored", models.BooleanField(default=False)),
                ("attempt_count", models.PositiveIntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("completion_rate", models.FloatField(default=0.0)),
                ("xp_reward", models.PositiveIntegerField(default=100)),
                ("certificate_required", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessments",
                        to="course.course",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessments",
                        to="course.lesson",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessments",
                        to="course.module",
                    ),
                ),
            ],
            options={
                "verbose_name": "Assessment",
                "verbose_name_plural": "Assessments",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("multi_select", "Multi Select"),
                            ("fill_blank", "Fill in the Blank"),
                            ("drag_drop", "Drag and Drop"),
                            ("matching", "Matching"),
                            ("true_false", "True/False"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                            ("audio_response", "Audio Response"),
                            ("video_response", "Video Response"),
                            ("speaking_practice", "Speaking Practice"),
                            ("listening_comprehension", "Listening Comprehension"),
                            ("pronunciation_check", "Pronunciation Check"),
                            ("conversation_practice", "Conversation Practice"),
                            ("translation", "Translation"),
                            ("sentence_building", "Sentence Building"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("text", models.TextField()),
                ("instruction", models.TextField(blank=True)),
                ("options", models.JSONField(blank=True, default=list)),
                ("correct_answers", models.JSONField(blank=True, default=list)),
                ("partial_credit_rules", models.JSONField(blank=True, default=dict)),
                ("explanation", models.TextField(blank=True)),
                ("hints", models.JSONField(blank=True, default=list)),
                ("points", models.PositiveIntegerField(default=1)),
                ("negative_marking", models.FloatField(default=0.0)),
                (
                    "time_limit_seconds",
                    models.PositiveIntegerField(blank=True, default=0),
                ),
                ("recommended_time_seconds", models.PositiveIntegerField(default=30)),
                ("media_url", models.URLField(blank=True, max_length=500)),
                (
                    "media_file",
                    models.FileField(
                        blank=True, null=True, upload_to="question_media/"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="question_images/"
                    ),
                ),
                (
                    "difficulty",
                    models.IntegerField(
                        db_index=True,
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "cognitive_load",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("skill_focus", models.JSONField(blank=True, default=list)),
                ("ai_evaluation_criteria", models.JSONField(blank=True, default=dict)),
                ("ai_generated", models.BooleanField(default=False)),
                ("auto_grading_enabled", models.BooleanField(default=True)),
                ("average_response_time", models.PositiveIntegerField(default=0)),
                ("success_rate", models.FloatField(default=0.0)),
                ("attempt_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AssessmentQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("order", models.PositiveIntegerField(default=1)),
                ("points", models.PositiveIntegerField(default=1)),
                ("is_mandatory", models.BooleanField(default=True)),
                ("weight", models.FloatField(default=1.0)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course.question",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="questions",
            field=models.ManyToManyField(
                related_name="assessments",
                through="course.AssessmentQuestion",
                to="course.question",
            ),
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "recommended_type",
                    models.CharField(
                        choices=[
                            ("course", "Course"),
                            ("lesson", "Lesson"),
                            ("vocabulary", "Vocabulary"),
                            ("grammar", "Grammar"),
                            ("practice", "Practice"),
                            ("review", "Review"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                ("recommended_id", models.UUIDField()),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ai", "AI Algorithm"),
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content-Based"),
                            ("popularity", "Popularity-Based"),
                            ("instructor", "Instructor Recommended"),
                            ("peer", "Peer Recommended"),
                        ],
                        db_index=True,
                        default="ai",
                        max_length=50,
                    ),
                ),
                ("score", models.FloatField(db_index=True, default=0.0)),
                ("confidence", models.FloatField(default=0.0)),
                ("relevance_score", models.FloatField(default=0.0)),
                ("reason", models.TextField(blank=True)),
                ("explanation_data", models.JSONField(blank=True, default=dict)),
                ("factors", models.JSONField(blank=True, default=list)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("context", models.JSONField(blank=True, default=dict)),
                ("is_viewed", models.BooleanField(default=False)),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                ("is_clicked", models.BooleanField(default=False)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("is_dismissed", models.BooleanField(default=False)),
                ("dismissed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback_text", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Recommendation",
                "verbose_name_plural": "Recommendations",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpacedRepetition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("object_id", models.UUIDField()),
                ("last_reviewed", models.DateTimeField(blank=True, null=True)),
                (
                    "next_review",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("ease_factor", models.FloatField(default=2.5)),
                ("interval_days", models.PositiveIntegerField(default=1)),
                ("repetition_count", models.PositiveIntegerField(default=0)),
                ("consecutive_correct", models.PositiveIntegerField(default=0)),
                ("average_response_time", models.PositiveIntegerField(default=0)),
                ("difficulty_rating", models.FloatField(default=0.0)),
                ("success_rate", models.FloatField(default=0.0)),
                ("is_due", models.BooleanField(db_index=True, default=True)),
                ("is_learning", models.BooleanField(default=True)),
                ("is_mature", models.BooleanField(default=False)),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("sm2", "SuperMemo 2"),
                            ("anki", "Anki Algorithm"),
                            ("fsrs", "Free Spaced Repetition Scheduler"),
                        ],
                        default="sm2",
                        max_length=10,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spaced_repetitions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Spaced Repetition",
                "verbose_name_plural": "Spaced Repetitions",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Step",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("order", models.PositiveIntegerField(db_index=True, default=1)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("image", "Image"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("interactive", "Interactive"),
                            ("code", "Code"),
                            ("flashcard", "Flashcard"),
                            ("dialogue", "Dialogue"),
                            ("pronunciation", "Pronunciation Practice"),
                            ("game", "Game"),
                            ("quiz", "Quiz"),
                            ("story", "Story"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                ("data", models.JSONField(blank=True, default=dict)),
                (
                    "media_file",
                    models.FileField(blank=True, null=True, upload_to="content_media/"),
                ),
                ("external_url", models.URLField(blank=True, max_length=500)),
                (
                    "duration_seconds",
                    models.PositiveIntegerField(blank=True, default=0),
                ),
                ("is_interactive", models.BooleanField(default=False)),
                ("required_for_completion", models.BooleanField(default=True)),
                (
                    "step_type",
                    models.CharField(
                        choices=[
                            ("intro", "Introduction"),
                            ("learning", "Learning"),
                            ("practice", "Practice"),
                            ("review", "Review"),
                            ("assessment", "Assessment"),
                            ("bonus", "Bonus"),
                        ],
                        db_index=True,
                        default="learning",
                        max_length=50,
                    ),
                ),
                ("learning_objective", models.TextField(blank=True)),
                ("hints", models.JSONField(blank=True, default=list)),
                ("feedback_correct", models.TextField(blank=True)),
                ("feedback_incorrect", models.TextField(blank=True)),
                ("feedback_partial", models.TextField(blank=True)),
                (
                    "required_completion_percentage",
                    models.PositiveIntegerField(
                        default=100,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("max_attempts", models.PositiveIntegerField(default=3)),
                (
                    "time_limit_seconds",
                    models.PositiveIntegerField(blank=True, default=0),
                ),
                ("branching_rules", models.JSONField(blank=True, default=dict)),
                (
                    "difficulty_adjustment_rules",
                    models.JSONField(blank=True, default=dict),
                ),
                ("ai_generated", models.BooleanField(default=False)),
                ("ai_evaluation_enabled", models.BooleanField(default=False)),
                ("base_xp_reward", models.PositiveIntegerField(default=10)),
                ("bonus_xp_conditions", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_blocks",
                        to="course.lesson",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Step",
                "verbose_name_plural": "Steps",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="question",
            name="step",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="course.step",
            ),
        ),
        migrations.CreateModel(
            name="Translation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("object_id", models.UUIDField()),
                ("translated_title", models.CharField(blank=True, max_length=255)),
                ("translated_description", models.TextField(blank=True)),
                ("translated_text", models.TextField(blank=True)),
                ("grade_boundaries", models.JSONField(blank=True, default=dict)),
                ("is_ai_translated", models.BooleanField(default=False)),
                ("translation_service", models.CharField(blank=True, max_length=50)),
                ("confidence_score", models.FloatField(default=0.0)),
                ("is_reviewed", models.BooleanField(default=False)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("quality_score", models.FloatField(default=0.0)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="course.language",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_translations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "translator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="translations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Translation",
                "verbose_name_plural": "Translations",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserAchievement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("unlocked_at", models.DateTimeField(auto_now_add=True)),
                ("progress_data", models.JSONField(blank=True, default=dict)),
                ("notification_sent", models.BooleanField(default=False)),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unlocked_by",
                        to="course.achievement",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Achievement",
                "verbose_name_plural": "User Achievements",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserAnalytics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("date", models.DateField(db_index=True)),
                ("total_time_spent_minutes", models.PositiveIntegerField(default=0)),
                ("active_learning_minutes", models.PositiveIntegerField(default=0)),
                ("passive_learning_minutes", models.PositiveIntegerField(default=0)),
                ("lessons_started", models.PositiveIntegerField(default=0)),
                ("lessons_completed", models.PositiveIntegerField(default=0)),
                ("steps_completed", models.PositiveIntegerField(default=0)),
                ("questions_answered", models.PositiveIntegerField(default=0)),
                ("correct_answers", models.PositiveIntegerField(default=0)),
                ("xp_gained", models.PositiveIntegerField(default=0)),
                ("accuracy_percentage", models.FloatField(default=0.0)),
                ("average_response_time", models.FloatField(default=0.0)),
                ("completion_rate", models.FloatField(default=0.0)),
                ("skills_improved", models.JSONField(blank=True, default=list)),
                ("content_types_engaged", models.JSONField(blank=True, default=list)),
                ("vocabulary_learned", models.PositiveIntegerField(default=0)),
                ("grammar_rules_practiced", models.PositiveIntegerField(default=0)),
                ("login_count", models.PositiveIntegerField(default=0)),
                ("session_count", models.PositiveIntegerField(default=0)),
                ("streak_maintained", models.BooleanField(default=False)),
                ("achievements_unlocked", models.PositiveIntegerField(default=0)),
                ("discussions_participated", models.PositiveIntegerField(default=0)),
                ("feedback_given", models.PositiveIntegerField(default=0)),
                ("help_requests", models.PositiveIntegerField(default=0)),
                ("primary_device_type", models.CharField(blank=True, max_length=50)),
                ("study_locations", models.JSONField(blank=True, default=list)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_analytics",
                        to="course.course",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_analytics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Analytics",
                "verbose_name_plural": "User Analytics",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserProgress",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("is_completed", models.BooleanField(db_index=True, default=False)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("first_accessed", models.DateTimeField(blank=True, null=True)),
                ("total_time_spent_seconds", models.PositiveBigIntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("best_score", models.FloatField(default=0.0)),
                ("attempts_count", models.PositiveIntegerField(default=0)),
                ("xp_earned", models.PositiveBigIntegerField(db_index=True, default=0)),
                ("streak_days", models.PositiveIntegerField(default=0)),
                ("current_streak", models.PositiveIntegerField(default=0)),
                ("longest_streak", models.PositiveIntegerField(default=0)),
                (
                    "difficulty_preference",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(-2),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                ("learning_style_data", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
                ("bookmarked", models.BooleanField(default=False)),
                ("interaction_count", models.PositiveIntegerField(default=0)),
                ("help_requests_count", models.PositiveIntegerField(default=0)),
                ("mistakes_made", models.PositiveIntegerField(default=0)),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="course.assessment",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="course.course",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="course.lesson",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="course.module",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="course.step",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_progress_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Progress",
                "verbose_name_plural": "User Progresses",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserResponse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("response_data", models.JSONField(blank=True, default=dict)),
                ("is_correct", models.BooleanField(db_index=True, default=False)),
                ("is_partially_correct", models.BooleanField(default=False)),
                ("score", models.FloatField(db_index=True, default=0.0)),
                ("max_score", models.FloatField(default=1.0)),
                ("time_taken_seconds", models.PositiveIntegerField(default=0)),
                ("attempt_number", models.PositiveIntegerField(default=1)),
                ("feedback", models.TextField(blank=True)),
                ("analytics_data", models.JSONField(blank=True, default=dict)),
                ("instructor_feedback", models.TextField(blank=True)),
                (
                    "confidence_level",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "perceived_difficulty",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("hints_used", models.JSONField(blank=True, default=list)),
                ("help_requested", models.BooleanField(default=False)),
                ("session_id", models.UUIDField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_responses",
                        to="course.question",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Response",
                "verbose_name_plural": "User Responses",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserAssessmentAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("attempt_number", models.PositiveIntegerField(default=1)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("score", models.FloatField(db_index=True, default=0.0)),
                ("max_score", models.FloatField(default=0.0)),
                ("percentage_score", models.FloatField(db_index=True, default=0.0)),
                ("grade", models.CharField(blank=True, max_length=5)),
                ("passed", models.BooleanField(db_index=True, default=False)),
                ("completion_time_seconds", models.PositiveIntegerField(default=0)),
                ("time_limit_exceeded", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("submitted", "Submitted"),
                            ("graded", "Graded"),
                            ("abandoned", "Abandoned"),
                        ],
                        db_index=True,
                        default="in_progress",
                        max_length=20,
                    ),
                ),
                ("preferences", models.JSONField(blank=True, default=dict)),
                ("integrity_flags", models.JSONField(blank=True, default=list)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_attempts",
                        to="course.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "responses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="assessment_attempts",
                        to="course.userresponse",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Assessment Attempt",
                "verbose_name_plural": "User Assessment Attempts",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "learning_style",
                    models.CharField(
                        choices=[
                            ("visual", "Visual"),
                            ("auditory", "Auditory"),
                            ("kinesthetic", "Kinesthetic"),
                            ("reading", "Reading/Writing"),
                            ("mixed", "Mixed"),
                        ],
                        default="mixed",
                        max_length=50,
                    ),
                ),
                (
                    "difficulty_preference",
                    models.CharField(
                        choices=[
                            ("easy", "Prefer Easier Content"),
                            ("balanced", "Balanced"),
                            ("challenging", "Prefer Challenging Content"),
                            ("adaptive", "Adaptive to Performance"),
                        ],
                        default="balanced",
                        max_length=50,
                    ),
                ),
                ("daily_goal_minutes", models.PositiveIntegerField(default=15)),
                ("weekly_goal_lessons", models.PositiveIntegerField(default=5)),
                ("preferred_study_times", models.JSONField(blank=True, default=list)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("reminder_enabled", models.BooleanField(default=True)),
                ("reminder_time", models.TimeField(blank=True, null=True)),
                (
                    "notification_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("achievement_notifications", models.BooleanField(default=True)),
                ("enable_spaced_repetition", models.BooleanField(default=True)),
                ("enable_adaptive_difficulty", models.BooleanField(default=True)),
                ("enable_ai_recommendations", models.BooleanField(default=True)),
                ("enable_gamification", models.BooleanField(default=True)),
                (
                    "accessibility_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                ("high_contrast_mode", models.BooleanField(default=False)),
                ("large_text_mode", models.BooleanField(default=False)),
                ("screen_reader_mode", models.BooleanField(default=False)),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("friends", "Friends"),
                            ("private", "Private"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("show_in_leaderboards", models.BooleanField(default=True)),
                ("allow_friend_requests", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "preferred_base_language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="preferred_by",
                        to="course.language",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "ui_language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ui_language_users",
                        to="course.language",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Settings",
                "verbose_name_plural": "User Settings",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Vocabulary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("word", models.CharField(db_index=True, max_length=255)),
                (
                    "phonetic_transcription",
                    models.CharField(blank=True, max_length=255),
                ),
                ("translation", models.CharField(blank=True, max_length=255)),
                ("translations", models.JSONField(blank=True, default=dict)),
                (
                    "part_of_speech",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("noun", "Noun"),
                            ("verb", "Verb"),
                            ("adjective", "Adjective"),
                            ("adverb", "Adverb"),
                            ("pronoun", "Pronoun"),
                            ("preposition", "Preposition"),
                            ("conjunction", "Conjunction"),
                            ("interjection", "Interjection"),
                            ("phrase", "Phrase"),
                            ("idiom", "Idiom"),
                        ],
                        max_length=50,
                    ),
                ),
                ("definition", models.TextField(blank=True)),
                ("example_sentence", models.TextField(blank=True)),
                ("example_sentences", models.JSONField(blank=True, default=list)),
                ("audio_url", models.URLField(blank=True, max_length=500)),
                ("image_url", models.URLField(blank=True, max_length=500)),
                ("pronunciation_tips", models.TextField(blank=True)),
                ("frequency_rating", models.IntegerField(db_index=True, default=1)),
                (
                    "difficulty_level",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("usage_notes", models.TextField(blank=True)),
                ("etymology", models.TextField(blank=True)),
                ("ai_generated_examples", models.BooleanField(default=False)),
                ("context_categories", models.JSONField(blank=True, default=list)),
                (
                    "antonyms",
                    models.ManyToManyField(blank=True, to="course.vocabulary"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vocabulary",
                        to="course.language",
                    ),
                ),
                (
                    "lessons",
                    models.ManyToManyField(
                        blank=True, related_name="vocabulary", to="course.lesson"
                    ),
                ),
                (
                    "related_words",
                    models.ManyToManyField(blank=True, to="course.vocabulary"),
                ),
                (
                    "synonyms",
                    models.ManyToManyField(blank=True, to="course.vocabulary"),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Vocabulary",
                "verbose_name_plural": "Vocabulary",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_achi_created_0413d4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["category", "rarity"], name="course_achi_categor_b0d795_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["is_secret", "available_from"],
                name="course_achi_is_secr_515b0b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_cert_created_92aa0b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["user", "course", "issued_at"],
                name="course_cert_user_id_fca71a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["verification_code"], name="course_cert_verific_6876e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["is_revoked", "expiration_date"],
                name="course_cert_is_revo_f61e75_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="certificate",
            unique_together={("user", "course")},
        ),
        migrations.AddIndex(
            model_name="discussionthread",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_disc_created_b2fe0e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discussionthread",
            index=models.Index(
                fields=["content_type", "object_id", "is_pinned", "last_post_at"],
                name="course_disc_content_83e3db_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discussionthread",
            index=models.Index(
                fields=["thread_type", "visibility"],
                name="course_disc_thread__8d7107_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discussionthread",
            index=models.Index(
                fields=["creator", "created_at"], name="course_disc_creator_bf174a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discussionpost",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_disc_created_59d42d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discussionpost",
            index=models.Index(
                fields=["thread", "created_at"], name="course_disc_thread__c39500_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discussionpost",
            index=models.Index(
                fields=["author", "created_at"], name="course_disc_author__d6aab5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discussionpost",
            index=models.Index(
                fields=["is_solution", "helpful_votes"],
                name="course_disc_is_solu_191320_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feedback",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_feed_created_e04b53_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feedback",
            index=models.Index(
                fields=["content_type", "object_id", "rating"],
                name="course_feed_content_a22f90_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feedback",
            index=models.Index(
                fields=["feedback_type", "status", "severity"],
                name="course_feed_feedbac_2e82bb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feedback",
            index=models.Index(
                fields=["is_helpful", "helpful_votes"],
                name="course_feed_is_help_be11f7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="language",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_lang_created_d21a35_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="language",
            index=models.Index(
                fields=["code", "difficulty_rating"], name="course_lang_code_9bee1f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dialect",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_dial_created_47378a_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dialect",
            unique_together={("language", "name")},
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_cour_created_c3809e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=[
                    "slug",
                    "target_language",
                    "level",
                    "is_published",
                    "is_featured",
                ],
                name="course_cour_slug_3dbc5c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["average_rating", "enrollment_count", "category"],
                name="course_cour_average_49f55b_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="course",
            unique_together={("title", "target_language", "level")},
        ),
        migrations.AddIndex(
            model_name="leaderboardentry",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_lead_created_5d0d5e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboardentry",
            index=models.Index(
                fields=["leaderboard_type", "course", "total_xp", "current_rank"],
                name="course_lead_leaderb_c7edbc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboardentry",
            index=models.Index(
                fields=["period_start", "period_end"],
                name="course_lead_period__7be61b_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="leaderboardentry",
            unique_together={("user", "leaderboard_type", "course", "period_start")},
        ),
        migrations.AddIndex(
            model_name="grammarrule",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_gram_created_9c1f66_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="grammarrule",
            index=models.Index(
                fields=["language", "level", "category"],
                name="course_gram_languag_202a47_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grammarrule",
            unique_together={("title", "language")},
        ),
        migrations.AddIndex(
            model_name="module",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_modu_created_e4773c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="module",
            index=models.Index(
                fields=["course", "order"], name="course_modu_course__78ea83_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="module",
            unique_together={("course", "order"), ("course", "slug")},
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_less_created_ae6ec9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["module", "order", "content_type", "difficulty"],
                name="course_less_module__a2c069_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("module", "order"), ("module", "slug")},
        ),
        migrations.AddIndex(
            model_name="assessmentquestion",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_asse_created_7ec667_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="assessmentquestion",
            unique_together={("assessment", "order"), ("assessment", "question")},
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_asse_created_dc081d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["assessment_type", "course"],
                name="course_asse_assessm_1c052a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["available_from", "available_until"],
                name="course_asse_availab_4e4f53_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="assessment",
            unique_together={
                ("course", "slug"),
                ("lesson", "slug"),
                ("module", "slug"),
            },
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_reco_created_5ff29b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["user", "score", "generated_at"],
                name="course_reco_user_id_697464_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["recommended_type", "source"],
                name="course_reco_recomme_11842d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["expires_at", "is_dismissed"],
                name="course_reco_expires_6ebf52_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="spacedrepetition",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_spac_created_ef7c03_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="spacedrepetition",
            index=models.Index(
                fields=["user", "next_review", "is_due"],
                name="course_spac_user_id_cf8eb8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="spacedrepetition",
            index=models.Index(
                fields=["is_learning", "is_mature"],
                name="course_spac_is_lear_c88913_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="spacedrepetition",
            unique_together={("user", "content_type", "object_id")},
        ),
        migrations.AddIndex(
            model_name="step",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_step_created_a545bf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="step",
            index=models.Index(
                fields=["lesson", "order", "content_type"],
                name="course_step_lesson__8da32e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="step",
            index=models.Index(
                fields=["step_type"], name="course_step_step_ty_786cfa_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="step",
            unique_together={("lesson", "order")},
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_ques_created_fd60b7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["question_type", "difficulty"],
                name="course_ques_questio_dbc72e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["step", "question_type"], name="course_ques_step_id_895e08_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="translation",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_tran_created_978ff3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="translation",
            index=models.Index(
                fields=["content_type", "object_id", "language"],
                name="course_tran_content_5ab901_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="translation",
            index=models.Index(
                fields=["is_ai_translated", "is_reviewed"],
                name="course_tran_is_ai_t_856ca5_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="translation",
            unique_together={("content_type", "object_id", "language")},
        ),
        migrations.AddIndex(
            model_name="userachievement",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_14bf7f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userachievement",
            index=models.Index(
                fields=["user", "unlocked_at"], name="course_user_user_id_11524a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userachievement",
            index=models.Index(
                fields=["achievement", "unlocked_at"],
                name="course_user_achieve_c09892_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userachievement",
            unique_together={("user", "achievement")},
        ),
        migrations.AddIndex(
            model_name="useranalytics",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_08d95e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useranalytics",
            index=models.Index(
                fields=["user", "date"], name="course_user_user_id_9cc273_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useranalytics",
            index=models.Index(
                fields=["date", "course"], name="course_user_date_d2c862_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useranalytics",
            index=models.Index(
                fields=["accuracy_percentage", "xp_gained"],
                name="course_user_accurac_8e2b89_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="useranalytics",
            unique_together={("user", "date", "course")},
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_3f2e52_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["user", "course", "completion_percentage", "xp_earned"],
                name="course_user_user_id_2402cf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["is_completed", "completed_at"],
                name="course_user_is_comp_76bf46_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["last_accessed", "streak_days"],
                name="course_user_last_ac_7b306f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userresponse",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_15aa54_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userresponse",
            index=models.Index(
                fields=["user", "question", "is_correct", "score"],
                name="course_user_user_id_d86b70_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userresponse",
            index=models.Index(
                fields=["session_id", "created_at"],
                name="course_user_session_fb4d18_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userresponse",
            unique_together={("user", "question", "attempt_number")},
        ),
        migrations.AddIndex(
            model_name="userassessmentattempt",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_f3a524_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userassessmentattempt",
            index=models.Index(
                fields=["user", "assessment", "passed", "score"],
                name="course_user_user_id_8c94b5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userassessmentattempt",
            index=models.Index(
                fields=["status", "started_at"], name="course_user_status_74e183_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userassessmentattempt",
            unique_together={("user", "assessment", "attempt_number")},
        ),
        migrations.AddIndex(
            model_name="usersettings",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_user_created_1c2d11_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vocabulary",
            index=models.Index(
                fields=["created_at", "is_active"],
                name="course_voca_created_d94857_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vocabulary",
            index=models.Index(
                fields=["word", "language", "frequency_rating"],
                name="course_voca_word_d8a039_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vocabulary",
            index=models.Index(
                fields=["part_of_speech", "difficulty_level"],
                name="course_voca_part_of_f2ffce_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="vocabulary",
            unique_together={("word", "language")},
        ),
    ]
