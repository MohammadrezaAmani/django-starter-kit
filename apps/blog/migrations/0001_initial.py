# Generated by Django 5.2.1 on 2025-08-15 08:45

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0002_userprofile_bio_userprofile_current_position_and_more"),
        ("chats", "0005_chatpoll_chat_alter_chat_last_message_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogBadge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("author", "Author Badge"),
                            ("reader", "Reader Badge"),
                            ("commenter", "Commenter Badge"),
                            ("sharer", "Sharer Badge"),
                            ("milestone", "Milestone Badge"),
                        ],
                        max_length=20,
                        verbose_name="Badge Type",
                    ),
                ),
                ("level", models.PositiveIntegerField(default=1, verbose_name="Level")),
                (
                    "icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blog/badges/",
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6366f1", max_length=7, verbose_name="Color"
                    ),
                ),
                (
                    "criteria",
                    models.JSONField(
                        default=dict,
                        help_text="Criteria for earning this badge",
                        verbose_name="Criteria",
                    ),
                ),
                (
                    "points",
                    models.PositiveIntegerField(default=0, verbose_name="Points"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Blog Badge",
                "verbose_name_plural": "Blog Badges",
                "ordering": ["badge_type", "level"],
            },
        ),
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "slug",
                    models.SlugField(max_length=120, unique=True, verbose_name="Slug"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Description"
                    ),
                ),
                (
                    "icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blog/category_icons/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png", "svg", "webp"]
                            )
                        ],
                        verbose_name="Icon",
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blog/category_covers/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png", "webp"]
                            )
                        ],
                        verbose_name="Cover Image",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6366f1",
                        help_text="Hex color code",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=60, verbose_name="SEO Title"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True, max_length=160, verbose_name="SEO Description"
                    ),
                ),
                (
                    "seo_keywords",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of SEO keywords",
                        verbose_name="SEO Keywords",
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(blank=True, verbose_name="Canonical URL"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "post_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Post Count"
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="View Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_categories",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="blog.blogcategory",
                        verbose_name="Parent Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Category",
                "verbose_name_plural": "Blog Categories",
                "ordering": ["tree_id", "lft"],
                "permissions": [
                    ("can_manage_categories", "Can manage blog categories"),
                    ("can_view_analytics", "Can view category analytics"),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogModerationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("approve", "Approve"),
                            ("reject", "Reject"),
                            ("delete", "Delete"),
                            ("edit", "Edit"),
                            ("feature", "Feature"),
                            ("unfeature", "Unfeature"),
                            ("ban_user", "Ban User"),
                            ("warn_user", "Warn User"),
                        ],
                        max_length=20,
                        verbose_name="Action Type",
                    ),
                ),
                ("object_id", models.UUIDField()),
                ("reason", models.TextField(blank=True, verbose_name="Reason")),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "moderator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_moderation_actions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Moderator",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Moderation Log",
                "verbose_name_plural": "Blog Moderation Logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=300, verbose_name="Title")),
                (
                    "slug",
                    models.SlugField(max_length=350, unique=True, verbose_name="Slug"),
                ),
                (
                    "subtitle",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Subtitle"
                    ),
                ),
                (
                    "excerpt",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Excerpt"
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Lexical JSON format content",
                        verbose_name="Content",
                    ),
                ),
                (
                    "content_format",
                    models.CharField(
                        choices=[
                            ("lexical", "Lexical JSON"),
                            ("markdown", "Markdown"),
                            ("html", "HTML"),
                            ("plain_text", "Plain Text"),
                        ],
                        default="lexical",
                        max_length=20,
                        verbose_name="Content Format",
                    ),
                ),
                (
                    "raw_content",
                    models.TextField(
                        blank=True,
                        help_text="Plain text version for search indexing",
                        verbose_name="Raw Content",
                    ),
                ),
                (
                    "content_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 hash for content integrity",
                        max_length=64,
                        verbose_name="Content Hash",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("scheduled", "Scheduled"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                            ("private", "Private"),
                            ("deleted", "Deleted"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("subscribers_only", "Subscribers Only"),
                            ("paywall", "Paywall"),
                            ("members_only", "Members Only"),
                            ("internal", "Internal"),
                            ("private", "Private"),
                        ],
                        default="public",
                        max_length=20,
                        verbose_name="Visibility",
                    ),
                ),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("article", "Article"),
                            ("news", "News"),
                            ("tutorial", "Tutorial"),
                            ("review", "Review"),
                            ("opinion", "Opinion"),
                            ("interview", "Interview"),
                            ("announcement", "Announcement"),
                            ("case_study", "Case Study"),
                        ],
                        default="article",
                        max_length=20,
                        verbose_name="Post Type",
                    ),
                ),
                (
                    "publish_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Publish Date"
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Scheduled Date"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Expiry Date"
                    ),
                ),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blog/featured_images/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png", "webp"]
                            )
                        ],
                        verbose_name="Featured Image",
                    ),
                ),
                (
                    "featured_image_alt",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Featured Image Alt Text",
                    ),
                ),
                (
                    "featured_video",
                    models.URLField(blank=True, verbose_name="Featured Video URL"),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=60, verbose_name="SEO Title"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True, max_length=160, verbose_name="SEO Description"
                    ),
                ),
                (
                    "seo_keywords",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of SEO keywords",
                        verbose_name="SEO Keywords",
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(blank=True, verbose_name="Canonical URL"),
                ),
                (
                    "meta_robots",
                    models.CharField(
                        default="index,follow",
                        help_text="SEO meta robots directive",
                        max_length=100,
                        verbose_name="Meta Robots",
                    ),
                ),
                (
                    "open_graph_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Social media sharing metadata",
                        verbose_name="Open Graph Data",
                    ),
                ),
                (
                    "structured_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON-LD structured data for search engines",
                        verbose_name="Structured Data",
                    ),
                ),
                (
                    "ai_generated",
                    models.BooleanField(default=False, verbose_name="AI Generated"),
                ),
                (
                    "ai_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="AI generation details and prompts",
                        verbose_name="AI Metadata",
                    ),
                ),
                (
                    "ai_suggestions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="AI-generated suggestions for improvement",
                        verbose_name="AI Suggestions",
                    ),
                ),
                (
                    "auto_translate",
                    models.BooleanField(default=False, verbose_name="Auto Translate"),
                ),
                (
                    "version",
                    models.PositiveIntegerField(default=1, verbose_name="Version"),
                ),
                (
                    "version_notes",
                    models.TextField(blank=True, verbose_name="Version Notes"),
                ),
                (
                    "custom_template",
                    models.CharField(
                        blank=True,
                        help_text="Custom template for rendering",
                        max_length=100,
                        verbose_name="Custom Template",
                    ),
                ),
                ("custom_css", models.TextField(blank=True, verbose_name="Custom CSS")),
                (
                    "custom_js",
                    models.TextField(blank=True, verbose_name="Custom JavaScript"),
                ),
                (
                    "ab_test_variant",
                    models.CharField(
                        blank=True,
                        help_text="Variant identifier for A/B testing",
                        max_length=10,
                        verbose_name="A/B Test Variant",
                    ),
                ),
                (
                    "ab_test_group",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="A/B Test Group"
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(default=False, verbose_name="Is Premium"),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Price",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "subscription_tiers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of subscription tiers",
                        verbose_name="Subscription Tiers",
                    ),
                ),
                (
                    "paywall_position",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Character position where paywall appears",
                        verbose_name="Paywall Position",
                    ),
                ),
                (
                    "tip_enabled",
                    models.BooleanField(default=False, verbose_name="Tips Enabled"),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", max_length=10, verbose_name="Language"
                    ),
                ),
                (
                    "languages",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of supported languages",
                        verbose_name="Languages",
                    ),
                ),
                (
                    "translations",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Translations in different languages",
                        verbose_name="Translations",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="View Count"
                    ),
                ),
                (
                    "unique_view_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Unique View Count"
                    ),
                ),
                (
                    "like_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Like Count"
                    ),
                ),
                (
                    "dislike_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Dislike Count"
                    ),
                ),
                (
                    "comment_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Comment Count"
                    ),
                ),
                (
                    "share_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Share Count"
                    ),
                ),
                (
                    "bookmark_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Bookmark Count"
                    ),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Download Count"
                    ),
                ),
                (
                    "reading_time",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Estimated reading time in minutes",
                        verbose_name="Reading Time",
                    ),
                ),
                (
                    "word_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Word Count"
                    ),
                ),
                (
                    "character_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Character Count"
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI-calculated content quality score",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="Quality Score",
                    ),
                ),
                (
                    "readability_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Flesch reading ease score",
                        verbose_name="Readability Score",
                    ),
                ),
                (
                    "seo_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="SEO Score",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "is_trending",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Is Trending"
                    ),
                ),
                (
                    "is_editors_choice",
                    models.BooleanField(default=False, verbose_name="Editor's Choice"),
                ),
                (
                    "is_sponsored",
                    models.BooleanField(default=False, verbose_name="Is Sponsored"),
                ),
                (
                    "moderation_notes",
                    models.TextField(blank=True, verbose_name="Moderation Notes"),
                ),
                (
                    "content_warnings",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Content warnings for sensitive topics",
                        verbose_name="Content Warnings",
                    ),
                ),
                (
                    "search_boost",
                    models.FloatField(default=1.0, verbose_name="Search Boost"),
                ),
                (
                    "allow_indexing",
                    models.BooleanField(default=True, verbose_name="Allow Indexing"),
                ),
                (
                    "allow_comments",
                    models.BooleanField(default=True, verbose_name="Allow Comments"),
                ),
                (
                    "allow_reactions",
                    models.BooleanField(default=True, verbose_name="Allow Reactions"),
                ),
                (
                    "allow_shares",
                    models.BooleanField(default=True, verbose_name="Allow Shares"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "last_viewed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Viewed At"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts_authored",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="blog_posts",
                        to="blog.blogcategory",
                        verbose_name="Categories",
                    ),
                ),
                (
                    "co_authors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="blog_posts_coauthored",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Co-authors",
                    ),
                ),
                (
                    "editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Editor",
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_modified_posts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "linked_chat",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts",
                        to="chats.chat",
                        verbose_name="Linked Chat",
                    ),
                ),
                (
                    "linked_network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts",
                        to="accounts.network",
                        verbose_name="Linked Network",
                    ),
                ),
                (
                    "linked_project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts",
                        to="accounts.project",
                        verbose_name="Linked Project",
                    ),
                ),
                (
                    "linked_task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_posts",
                        to="accounts.task",
                        verbose_name="Linked Task",
                    ),
                ),
                (
                    "parent_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revisions",
                        to="blog.blogpost",
                        verbose_name="Parent Version",
                    ),
                ),
                (
                    "translation_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translation_versions",
                        to="blog.blogpost",
                        verbose_name="Translation Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Post",
                "verbose_name_plural": "Blog Posts",
                "ordering": ["-publish_date", "-created_at"],
                "permissions": [
                    ("can_moderate_posts", "Can moderate blog posts"),
                    ("can_publish_posts", "Can publish blog posts"),
                    ("can_schedule_posts", "Can schedule blog posts"),
                    ("can_view_analytics", "Can view post analytics"),
                    ("can_manage_monetization", "Can manage post monetization"),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogNewsletter",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("subject", models.CharField(max_length=200, verbose_name="Subject")),
                ("content", models.JSONField(default=dict, verbose_name="Content")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("sent", "Sent"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Scheduled Date"
                    ),
                ),
                (
                    "sent_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Sent Date"
                    ),
                ),
                (
                    "recipient_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Recipient Count"
                    ),
                ),
                (
                    "open_rate",
                    models.FloatField(
                        default=0.0, editable=False, verbose_name="Open Rate"
                    ),
                ),
                (
                    "click_rate",
                    models.FloatField(
                        default=0.0, editable=False, verbose_name="Click Rate"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_newsletters",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "featured_posts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="newsletters",
                        to="blog.blogpost",
                        verbose_name="Featured Posts",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Newsletter",
                "verbose_name_plural": "Blog Newsletters",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField(max_length=5000, verbose_name="Content")),
                (
                    "content_format",
                    models.CharField(
                        choices=[
                            ("plain", "Plain Text"),
                            ("markdown", "Markdown"),
                            ("html", "HTML"),
                        ],
                        default="plain",
                        max_length=20,
                        verbose_name="Content Format",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Moderation"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("spam", "Spam"),
                            ("deleted", "Deleted"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP Address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                (
                    "like_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Like Count"
                    ),
                ),
                (
                    "dislike_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Dislike Count"
                    ),
                ),
                (
                    "reply_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Reply Count"
                    ),
                ),
                (
                    "reactions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Emoji reactions with counts",
                        verbose_name="Reactions",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(default=False, verbose_name="Is Pinned"),
                ),
                (
                    "is_highlighted",
                    models.BooleanField(default=False, verbose_name="Is Highlighted"),
                ),
                (
                    "moderation_notes",
                    models.TextField(blank=True, verbose_name="Moderation Notes"),
                ),
                (
                    "flagged_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Flagged Count"
                    ),
                ),
                (
                    "is_edited",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Is Edited"
                    ),
                ),
                (
                    "edit_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Edit Count"
                    ),
                ),
                (
                    "edit_history",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="History of edits made to this comment",
                        verbose_name="Edit History",
                    ),
                ),
                (
                    "spam_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Spam Score",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approved At"
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approved By",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="blog.blogcomment",
                        verbose_name="Parent Comment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="blog.blogpost",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Comment",
                "verbose_name_plural": "Blog Comments",
                "ordering": ["created_at"],
                "permissions": [
                    ("can_moderate_comments", "Can moderate blog comments"),
                    ("can_approve_comments", "Can approve comments"),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="blog/attachments/",
                        verbose_name="File",
                    ),
                ),
                ("url", models.URLField(blank=True, verbose_name="External URL")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("document", "Document"),
                            ("embed", "Embed"),
                            ("gallery", "Gallery"),
                            ("code", "Code"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="Title"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Description"
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alternative text for accessibility",
                        max_length=255,
                        verbose_name="Alt Text",
                    ),
                ),
                (
                    "caption",
                    models.TextField(
                        blank=True, max_length=500, verbose_name="Caption"
                    ),
                ),
                (
                    "credit",
                    models.CharField(blank=True, max_length=200, verbose_name="Credit"),
                ),
                (
                    "copyright",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Copyright"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="File metadata like dimensions, duration, etc.",
                        verbose_name="Metadata",
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        default=0, help_text="File size in bytes", verbose_name="Size"
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="MIME Type"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Download Count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_attachments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="blog.blogpost",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Attachment",
                "verbose_name_plural": "Blog Attachments",
                "ordering": ["sort_order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_views",
                    models.PositiveIntegerField(default=0, verbose_name="Total Views"),
                ),
                (
                    "unique_views",
                    models.PositiveIntegerField(default=0, verbose_name="Unique Views"),
                ),
                (
                    "total_likes",
                    models.PositiveIntegerField(default=0, verbose_name="Total Likes"),
                ),
                (
                    "total_comments",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Comments"
                    ),
                ),
                (
                    "total_shares",
                    models.PositiveIntegerField(default=0, verbose_name="Total Shares"),
                ),
                (
                    "total_bookmarks",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Bookmarks"
                    ),
                ),
                (
                    "engagement_rate",
                    models.FloatField(default=0.0, verbose_name="Engagement Rate"),
                ),
                (
                    "bounce_rate",
                    models.FloatField(default=0.0, verbose_name="Bounce Rate"),
                ),
                (
                    "avg_reading_time",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Avg Reading Time"
                    ),
                ),
                (
                    "completion_rate",
                    models.FloatField(default=0.0, verbose_name="Completion Rate"),
                ),
                (
                    "search_impressions",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Search Impressions"
                    ),
                ),
                (
                    "search_clicks",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Search Clicks"
                    ),
                ),
                (
                    "search_ctr",
                    models.FloatField(default=0.0, verbose_name="Search CTR"),
                ),
                (
                    "avg_search_position",
                    models.FloatField(default=0.0, verbose_name="Avg Search Position"),
                ),
                (
                    "direct_traffic",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Direct Traffic"
                    ),
                ),
                (
                    "search_traffic",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Search Traffic"
                    ),
                ),
                (
                    "social_traffic",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Social Traffic"
                    ),
                ),
                (
                    "referral_traffic",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Referral Traffic"
                    ),
                ),
                (
                    "top_countries",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Top Countries"
                    ),
                ),
                (
                    "top_cities",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Top Cities"
                    ),
                ),
                (
                    "desktop_views",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Desktop Views"
                    ),
                ),
                (
                    "mobile_views",
                    models.PositiveIntegerField(default=0, verbose_name="Mobile Views"),
                ),
                (
                    "tablet_views",
                    models.PositiveIntegerField(default=0, verbose_name="Tablet Views"),
                ),
                (
                    "hourly_views",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Hourly Views"
                    ),
                ),
                (
                    "daily_views",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Daily Views"
                    ),
                ),
                (
                    "weekly_views",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Weekly Views"
                    ),
                ),
                (
                    "newsletter_signups",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Newsletter Signups"
                    ),
                ),
                (
                    "downloads",
                    models.PositiveIntegerField(default=0, verbose_name="Downloads"),
                ),
                (
                    "contact_form_submissions",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Contact Form Submissions"
                    ),
                ),
                (
                    "content_quality_score",
                    models.FloatField(
                        default=0.0, verbose_name="Content Quality Score"
                    ),
                ),
                (
                    "readability_score",
                    models.FloatField(default=0.0, verbose_name="Readability Score"),
                ),
                ("seo_score", models.FloatField(default=0.0, verbose_name="SEO Score")),
                (
                    "sentiment_score",
                    models.FloatField(default=0.0, verbose_name="Sentiment Score"),
                ),
                (
                    "trending_score",
                    models.FloatField(default=0.0, verbose_name="Trending Score"),
                ),
                (
                    "virality_prediction",
                    models.FloatField(default=0.0, verbose_name="Virality Prediction"),
                ),
                (
                    "predicted_views_7d",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Predicted Views (7d)"
                    ),
                ),
                (
                    "predicted_views_30d",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Predicted Views (30d)"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "last_calculated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Calculated"
                    ),
                ),
                (
                    "post",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="blog.blogpost",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Analytics",
                "verbose_name_plural": "Blog Analytics",
            },
        ),
        migrations.CreateModel(
            name="BlogPostVersion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "version_number",
                    models.PositiveIntegerField(verbose_name="Version Number"),
                ),
                ("title", models.CharField(max_length=300, verbose_name="Title")),
                ("content", models.JSONField(default=dict, verbose_name="Content")),
                (
                    "raw_content",
                    models.TextField(blank=True, verbose_name="Raw Content"),
                ),
                (
                    "changes_summary",
                    models.TextField(blank=True, verbose_name="Changes Summary"),
                ),
                (
                    "changes_diff",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed diff of changes",
                        verbose_name="Changes Diff",
                    ),
                ),
                (
                    "edit_reason",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Edit Reason"
                    ),
                ),
                (
                    "is_major_edit",
                    models.BooleanField(default=False, verbose_name="Is Major Edit"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "editor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Editor",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="blog.blogpost",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Post Version",
                "verbose_name_plural": "Blog Post Versions",
                "ordering": ["-version_number"],
            },
        ),
        migrations.CreateModel(
            name="BlogReaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("object_id", models.UUIDField()),
                (
                    "reaction_type",
                    models.CharField(
                        choices=[
                            ("like", "👍 Like"),
                            ("heart", "❤️ Heart"),
                            ("laugh", "😂 Laugh"),
                            ("wow", "😮 Wow"),
                            ("sad", "😢 Sad"),
                            ("angry", "😠 Angry"),
                            ("bookmark", "🔖 Bookmark"),
                        ],
                        default="like",
                        max_length=20,
                        verbose_name="Reaction Type",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_reactions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Reaction",
                "verbose_name_plural": "Blog Reactions",
            },
        ),
        migrations.CreateModel(
            name="BlogReadingList",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=500, verbose_name="Description"
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("followers", "Followers Only"),
                        ],
                        default="private",
                        max_length=20,
                        verbose_name="Privacy",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="Is Default"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "posts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="reading_lists",
                        to="blog.blogpost",
                        verbose_name="Posts",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reading_lists",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Reading List",
                "verbose_name_plural": "Blog Reading Lists",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogSeries",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "slug",
                    models.SlugField(max_length=220, unique=True, verbose_name="Slug"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Description"
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blog/series_covers/",
                        verbose_name="Cover Image",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "is_completed",
                    models.BooleanField(default=False, verbose_name="Is Completed"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_series",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Series",
                "verbose_name_plural": "Blog Series",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogSeriesPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(verbose_name="Order")),
                (
                    "added_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Added At"),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="blog.blogpost"
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blog.blogseries",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Series Post",
                "verbose_name_plural": "Blog Series Posts",
                "ordering": ["order"],
            },
        ),
        migrations.AddField(
            model_name="blogseries",
            name="posts",
            field=models.ManyToManyField(
                related_name="series",
                through="blog.BlogSeriesPost",
                to="blog.blogpost",
                verbose_name="Posts",
            ),
        ),
        migrations.CreateModel(
            name="BlogSubscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subscription_type",
                    models.CharField(
                        choices=[
                            ("author", "Author"),
                            ("category", "Category"),
                            ("tag", "Tag"),
                            ("post", "Specific Post"),
                            ("all_posts", "All Posts"),
                        ],
                        max_length=20,
                        verbose_name="Subscription Type",
                    ),
                ),
                ("object_id", models.UUIDField(blank=True, null=True)),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, verbose_name="Email Notifications"
                    ),
                ),
                (
                    "push_notifications",
                    models.BooleanField(
                        default=True, verbose_name="Push Notifications"
                    ),
                ),
                (
                    "in_app_notifications",
                    models.BooleanField(
                        default=True, verbose_name="In-App Notifications"
                    ),
                ),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("instant", "Instant"),
                            ("daily", "Daily Digest"),
                            ("weekly", "Weekly Digest"),
                            ("monthly", "Monthly Digest"),
                        ],
                        default="instant",
                        max_length=20,
                        verbose_name="Notification Frequency",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "unsubscribe_token",
                    models.CharField(
                        max_length=64, unique=True, verbose_name="Unsubscribe Token"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "last_notification_sent",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Notification Sent"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Subscription",
                "verbose_name_plural": "Blog Subscriptions",
            },
        ),
        migrations.CreateModel(
            name="BlogTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="Name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=60, unique=True, verbose_name="Slug"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=500, verbose_name="Description"
                    ),
                ),
                (
                    "synonyms",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tag synonyms",
                        verbose_name="Synonyms",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6b7280",
                        help_text="Hex color code",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Usage Count"
                    ),
                ),
                (
                    "trending_score",
                    models.FloatField(
                        default=0.0, editable=False, verbose_name="Trending Score"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tags",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Tag",
                "verbose_name_plural": "Blog Tags",
                "ordering": ["-usage_count", "name"],
            },
        ),
        migrations.AddField(
            model_name="blogpost",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                related_name="blog_posts",
                to="blog.blogtag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="BlogView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="Session Key"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP Address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                ("referrer", models.URLField(blank=True, verbose_name="Referrer")),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("desktop", "Desktop"),
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                            ("bot", "Bot"),
                        ],
                        max_length=20,
                        verbose_name="Device Type",
                    ),
                ),
                (
                    "country",
                    models.CharField(blank=True, max_length=2, verbose_name="Country"),
                ),
                (
                    "region",
                    models.CharField(blank=True, max_length=100, verbose_name="Region"),
                ),
                (
                    "city",
                    models.CharField(blank=True, max_length=100, verbose_name="City"),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Time spent reading in seconds",
                        verbose_name="Duration",
                    ),
                ),
                (
                    "scroll_depth",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Maximum scroll percentage",
                        verbose_name="Scroll Depth",
                    ),
                ),
                (
                    "is_bounce",
                    models.BooleanField(default=True, verbose_name="Is Bounce"),
                ),
                (
                    "utm_source",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="UTM Source"
                    ),
                ),
                (
                    "utm_medium",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="UTM Medium"
                    ),
                ),
                (
                    "utm_campaign",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="UTM Campaign"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="blog.blogpost",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_views",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog View",
                "verbose_name_plural": "Blog Views",
            },
        ),
        migrations.CreateModel(
            name="UserBlogBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "earned_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Earned At"),
                ),
                (
                    "progress",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Progress towards earning the badge",
                        verbose_name="Progress",
                    ),
                ),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_badges",
                        to="blog.blogbadge",
                        verbose_name="Badge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_badges",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Blog Badge",
                "verbose_name_plural": "User Blog Badges",
                "ordering": ["-earned_at"],
            },
        ),
        migrations.AddIndex(
            model_name="blogcategory",
            index=models.Index(fields=["slug"], name="blog_blogca_slug_465e50_idx"),
        ),
        migrations.AddIndex(
            model_name="blogcategory",
            index=models.Index(
                fields=["parent", "is_active"], name="blog_blogca_parent__25a7b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogmoderationlog",
            index=models.Index(
                fields=["moderator", "-created_at"],
                name="blog_blogmo_moderat_086d20_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogmoderationlog",
            index=models.Index(
                fields=["action_type", "-created_at"],
                name="blog_blogmo_action__b73c56_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogcomment",
            index=models.Index(
                fields=["post", "status", "created_at"],
                name="blog_blogco_post_id_5724c4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogcomment",
            index=models.Index(
                fields=["author", "created_at"], name="blog_blogco_author__1614fe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogcomment",
            index=models.Index(
                fields=["parent", "created_at"], name="blog_blogco_parent__81e622_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogattachment",
            index=models.Index(
                fields=["post", "type"], name="blog_blogat_post_id_b37e1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogattachment",
            index=models.Index(
                fields=["created_at"], name="blog_blogat_created_ba9889_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpostversion",
            index=models.Index(
                fields=["post", "-version_number"],
                name="blog_blogpo_post_id_23a0e7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogpostversion",
            index=models.Index(
                fields=["created_at"], name="blog_blogpo_created_a80cc0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="blogpostversion",
            unique_together={("post", "version_number")},
        ),
        migrations.AddIndex(
            model_name="blogreaction",
            index=models.Index(
                fields=["content_type", "object_id", "reaction_type"],
                name="blog_blogre_content_49770e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogreaction",
            index=models.Index(
                fields=["user", "created_at"], name="blog_blogre_user_id_03266b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="blogreaction",
            unique_together={("user", "content_type", "object_id", "reaction_type")},
        ),
        migrations.AlterUniqueTogether(
            name="blogreadinglist",
            unique_together={("user", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="blogseriespost",
            unique_together={("series", "order"), ("series", "post")},
        ),
        migrations.AddIndex(
            model_name="blogseries",
            index=models.Index(fields=["slug"], name="blog_blogse_slug_c32db3_idx"),
        ),
        migrations.AddIndex(
            model_name="blogseries",
            index=models.Index(
                fields=["author", "-created_at"], name="blog_blogse_author__f5abeb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogsubscription",
            index=models.Index(
                fields=["user", "is_active"], name="blog_blogsu_user_id_164127_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogsubscription",
            index=models.Index(
                fields=["subscription_type", "is_active"],
                name="blog_blogsu_subscri_efdff3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="blogsubscription",
            unique_together={
                ("user", "subscription_type", "content_type", "object_id")
            },
        ),
        migrations.AddIndex(
            model_name="blogtag",
            index=models.Index(fields=["slug"], name="blog_blogta_slug_7db848_idx"),
        ),
        migrations.AddIndex(
            model_name="blogtag",
            index=models.Index(
                fields=["-usage_count"], name="blog_blogta_usage_c_c9cce3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(fields=["slug"], name="blog_blogpo_slug_361555_idx"),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["status", "visibility"], name="blog_blogpo_status_31c251_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["author", "-publish_date"],
                name="blog_blogpo_author__75eb42_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["-publish_date", "status"],
                name="blog_blogpo_publish_0f20d8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["is_featured", "-publish_date"],
                name="blog_blogpo_is_feat_d69555_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["scheduled_date"], name="blog_blogpo_schedul_7f0397_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["-created_at"], name="blog_blogpo_created_2e77d7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogview",
            index=models.Index(
                fields=["post", "created_at"], name="blog_blogvi_post_id_63bd78_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogview",
            index=models.Index(
                fields=["user", "created_at"], name="blog_blogvi_user_id_93b87e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogview",
            index=models.Index(
                fields=["created_at"], name="blog_blogvi_created_d45b93_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userblogbadge",
            unique_together={("user", "badge")},
        ),
    ]
